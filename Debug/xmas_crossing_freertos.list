
xmas_crossing_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b8  080065b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c0  080065c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080065c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a884  20000014  080065dc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a898  080065dc  0002a898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a7a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003132  00000000  00000000  00037abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003abf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001188  00000000  00000000  0003bf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004659  00000000  00000000  0003d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013bf3  00000000  00000000  00041701  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6429  00000000  00000000  000552f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b71d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f38  00000000  00000000  0012b798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006454 	.word	0x08006454

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006454 	.word	0x08006454

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80001de:	f100 0618 	add.w	r6, r0, #24
 80001e2:	6930      	ldr	r0, [r6, #16]
 80001e4:	68f7      	ldr	r7, [r6, #12]
 80001e6:	6875      	ldr	r5, [r6, #4]
 80001e8:	4287      	cmp	r7, r0
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
 80001ec:	68b3      	ldr	r3, [r6, #8]
 80001ee:	1bdc      	subs	r4, r3, r7
 80001f0:	1e63      	subs	r3, r4, #1
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
 80001f6:	197d      	adds	r5, r7, r5
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
 8000204:	3a01      	subs	r2, #1
 8000206:	d005      	beq.n	8000214 <_CSDone>
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
 8000210:	3a01      	subs	r2, #1
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
 8000214:	f3bf 8f5f 	dmb	sy
 8000218:	60f0      	str	r0, [r6, #12]
 800021a:	2001      	movs	r0, #1
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
 8000220:	18c0      	adds	r0, r0, r3
 8000222:	4290      	cmp	r0, r2
 8000224:	d319      	bcc.n	800025a <_Case3>
 8000226:	1978      	adds	r0, r7, r5
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
 8000232:	3c01      	subs	r4, #1
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
 8000236:	1c14      	adds	r4, r2, #0
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
 8000246:	f3bf 8f5f 	dmb	sy
 800024a:	60f4      	str	r4, [r6, #12]
 800024c:	2001      	movs	r0, #1
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
 8000252:	1bc0      	subs	r0, r0, r7
 8000254:	3801      	subs	r0, #1
 8000256:	4290      	cmp	r0, r2
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
 800025a:	2000      	movs	r0, #0
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
 800025e:	4770      	bx	lr
 8000260:	2001a7f0 	.word	0x2001a7f0

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b972 	b.w	8000560 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14b      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	d967      	bls.n	8000378 <__udivmoddi4+0xe4>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0720 	rsb	r7, r2, #32
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ba:	4095      	lsls	r5, r2
 80002bc:	ea47 0803 	orr.w	r8, r7, r3
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002cc:	fa1f fc85 	uxth.w	ip, r5
 80002d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d8:	fb07 f10c 	mul.w	r1, r7, ip
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18eb      	adds	r3, r5, r3
 80002e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e6:	f080 811b 	bcs.w	8000520 <__udivmoddi4+0x28c>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8118 	bls.w	8000520 <__udivmoddi4+0x28c>
 80002f0:	3f02      	subs	r7, #2
 80002f2:	442b      	add	r3, r5
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fc0c 	mul.w	ip, r0, ip
 8000308:	45a4      	cmp	ip, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8107 	bcs.w	8000524 <__udivmoddi4+0x290>
 8000316:	45a4      	cmp	ip, r4
 8000318:	f240 8104 	bls.w	8000524 <__udivmoddi4+0x290>
 800031c:	3802      	subs	r0, #2
 800031e:	442c      	add	r4, r5
 8000320:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000324:	eba4 040c 	sub.w	r4, r4, ip
 8000328:	2700      	movs	r7, #0
 800032a:	b11e      	cbz	r6, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c6 4300 	strd	r4, r3, [r6]
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0xbe>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80eb 	beq.w	800051a <__udivmoddi4+0x286>
 8000344:	2700      	movs	r7, #0
 8000346:	e9c6 0100 	strd	r0, r1, [r6]
 800034a:	4638      	mov	r0, r7
 800034c:	4639      	mov	r1, r7
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f783 	clz	r7, r3
 8000356:	2f00      	cmp	r7, #0
 8000358:	d147      	bne.n	80003ea <__udivmoddi4+0x156>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xd0>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80fa 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0303 	sbc.w	r3, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	4698      	mov	r8, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0e0      	beq.n	8000334 <__udivmoddi4+0xa0>
 8000372:	e9c6 4800 	strd	r4, r8, [r6]
 8000376:	e7dd      	b.n	8000334 <__udivmoddi4+0xa0>
 8000378:	b902      	cbnz	r2, 800037c <__udivmoddi4+0xe8>
 800037a:	deff      	udf	#255	; 0xff
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	2a00      	cmp	r2, #0
 8000382:	f040 808f 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000386:	1b49      	subs	r1, r1, r5
 8000388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800038c:	fa1f f885 	uxth.w	r8, r5
 8000390:	2701      	movs	r7, #1
 8000392:	fbb1 fcfe 	udiv	ip, r1, lr
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fb0e 111c 	mls	r1, lr, ip, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb08 f10c 	mul.w	r1, r8, ip
 80003a4:	4299      	cmp	r1, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a8:	18eb      	adds	r3, r5, r3
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4299      	cmp	r1, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1a59      	subs	r1, r3, r1
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x14c>
 80003d0:	192c      	adds	r4, r5, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x14a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80b6 	bhi.w	800054a <__udivmoddi4+0x2b6>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e79f      	b.n	800032a <__udivmoddi4+0x96>
 80003ea:	f1c7 0c20 	rsb	ip, r7, #32
 80003ee:	40bb      	lsls	r3, r7
 80003f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f8:	fa01 f407 	lsl.w	r4, r1, r7
 80003fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000400:	fa21 f30c 	lsr.w	r3, r1, ip
 8000404:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000408:	4325      	orrs	r5, r4
 800040a:	fbb3 f9f8 	udiv	r9, r3, r8
 800040e:	0c2c      	lsrs	r4, r5, #16
 8000410:	fb08 3319 	mls	r3, r8, r9, r3
 8000414:	fa1f fa8e 	uxth.w	sl, lr
 8000418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800041c:	fb09 f40a 	mul.w	r4, r9, sl
 8000420:	429c      	cmp	r4, r3
 8000422:	fa02 f207 	lsl.w	r2, r2, r7
 8000426:	fa00 f107 	lsl.w	r1, r0, r7
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1e 0303 	adds.w	r3, lr, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	f080 8087 	bcs.w	8000546 <__udivmoddi4+0x2b2>
 8000438:	429c      	cmp	r4, r3
 800043a:	f240 8084 	bls.w	8000546 <__udivmoddi4+0x2b2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4473      	add	r3, lr
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	b2ad      	uxth	r5, r5
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000454:	fb00 fa0a 	mul.w	sl, r0, sl
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1e 0404 	adds.w	r4, lr, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	d26b      	bcs.n	800053e <__udivmoddi4+0x2aa>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d969      	bls.n	800053e <__udivmoddi4+0x2aa>
 800046a:	3802      	subs	r0, #2
 800046c:	4474      	add	r4, lr
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c2      	mov	sl, r8
 800047e:	464b      	mov	r3, r9
 8000480:	d354      	bcc.n	800052c <__udivmoddi4+0x298>
 8000482:	d051      	beq.n	8000528 <__udivmoddi4+0x294>
 8000484:	2e00      	cmp	r6, #0
 8000486:	d069      	beq.n	800055c <__udivmoddi4+0x2c8>
 8000488:	ebb1 050a 	subs.w	r5, r1, sl
 800048c:	eb64 0403 	sbc.w	r4, r4, r3
 8000490:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000494:	40fd      	lsrs	r5, r7
 8000496:	40fc      	lsrs	r4, r7
 8000498:	ea4c 0505 	orr.w	r5, ip, r5
 800049c:	e9c6 5400 	strd	r5, r4, [r6]
 80004a0:	2700      	movs	r7, #0
 80004a2:	e747      	b.n	8000334 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ac:	4095      	lsls	r5, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	fa21 f303 	lsr.w	r3, r1, r3
 80004b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ba:	4338      	orrs	r0, r7
 80004bc:	0c01      	lsrs	r1, r0, #16
 80004be:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c2:	fa1f f885 	uxth.w	r8, r5
 80004c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb07 f308 	mul.w	r3, r7, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x256>
 80004da:	1869      	adds	r1, r5, r1
 80004dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e0:	d22f      	bcs.n	8000542 <__udivmoddi4+0x2ae>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d92d      	bls.n	8000542 <__udivmoddi4+0x2ae>
 80004e6:	3f02      	subs	r7, #2
 80004e8:	4429      	add	r1, r5
 80004ea:	1acb      	subs	r3, r1, r3
 80004ec:	b281      	uxth	r1, r0
 80004ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb00 f308 	mul.w	r3, r0, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x27e>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f100 3cff 	add.w	ip, r0, #4294967295
 8000508:	d217      	bcs.n	800053a <__udivmoddi4+0x2a6>
 800050a:	428b      	cmp	r3, r1
 800050c:	d915      	bls.n	800053a <__udivmoddi4+0x2a6>
 800050e:	3802      	subs	r0, #2
 8000510:	4429      	add	r1, r5
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000518:	e73b      	b.n	8000392 <__udivmoddi4+0xfe>
 800051a:	4637      	mov	r7, r6
 800051c:	4630      	mov	r0, r6
 800051e:	e709      	b.n	8000334 <__udivmoddi4+0xa0>
 8000520:	4607      	mov	r7, r0
 8000522:	e6e7      	b.n	80002f4 <__udivmoddi4+0x60>
 8000524:	4618      	mov	r0, r3
 8000526:	e6fb      	b.n	8000320 <__udivmoddi4+0x8c>
 8000528:	4541      	cmp	r1, r8
 800052a:	d2ab      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 800052c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000530:	eb69 020e 	sbc.w	r2, r9, lr
 8000534:	3801      	subs	r0, #1
 8000536:	4613      	mov	r3, r2
 8000538:	e7a4      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053a:	4660      	mov	r0, ip
 800053c:	e7e9      	b.n	8000512 <__udivmoddi4+0x27e>
 800053e:	4618      	mov	r0, r3
 8000540:	e795      	b.n	800046e <__udivmoddi4+0x1da>
 8000542:	4667      	mov	r7, ip
 8000544:	e7d1      	b.n	80004ea <__udivmoddi4+0x256>
 8000546:	4681      	mov	r9, r0
 8000548:	e77c      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054a:	3802      	subs	r0, #2
 800054c:	442c      	add	r4, r5
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0x14c>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	442b      	add	r3, r5
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	4638      	mov	r0, r7
 800055a:	e708      	b.n	800036e <__udivmoddi4+0xda>
 800055c:	4637      	mov	r7, r6
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0xa0>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <vTask_IntersectionCtrl>:
 *      Author: jpaca
 */
#include "intersection_ctrl.h"

void vTask_IntersectionCtrl(void* params)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Wait for the next cycle
//		vTaskDelayUntil(&xLastWakeTime, xFrequency);

		if ( state_machine_get_state() == CLC_train_crossing )
 800056c:	f000 f8c2 	bl	80006f4 <state_machine_get_state>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d10c      	bne.n	8000590 <vTask_IntersectionCtrl+0x2c>
		{
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);	/* Red Led On*/
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <vTask_IntersectionCtrl+0x48>)
 800057e:	f000 fb9b 	bl	8000cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <vTask_IntersectionCtrl+0x48>)
 800058a:	f000 fb95 	bl	8000cb8 <HAL_GPIO_WritePin>
 800058e:	e7ed      	b.n	800056c <vTask_IntersectionCtrl+0x8>
		}
		else
		{
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);	/* Green Led On*/
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <vTask_IntersectionCtrl+0x48>)
 8000598:	f000 fb8e 	bl	8000cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a2:	4802      	ldr	r0, [pc, #8]	; (80005ac <vTask_IntersectionCtrl+0x48>)
 80005a4:	f000 fb88 	bl	8000cb8 <HAL_GPIO_WritePin>
		if ( state_machine_get_state() == CLC_train_crossing )
 80005a8:	e7e0      	b.n	800056c <vTask_IntersectionCtrl+0x8>
 80005aa:	bf00      	nop
 80005ac:	40020c00 	.word	0x40020c00

080005b0 <vTask_SensorRead>:

static timer_state sensor1_cond_timer_state = timer_not_started;
static timer_state sensor2_cond_timer_state = timer_not_started;

void vTask_SensorRead(void* params)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
		 * LOW = train detected
		 *
		 * Applies signal conditioning
		*/
//		sensor1_reading = sensor_read_sensor1_conditioned();
		sensor1_reading = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 80005b8:	2101      	movs	r1, #1
 80005ba:	4815      	ldr	r0, [pc, #84]	; (8000610 <vTask_SensorRead+0x60>)
 80005bc:	f000 fb64 	bl	8000c88 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <vTask_SensorRead+0x64>)
 80005c6:	701a      	strb	r2, [r3, #0]
//		sensor2_reading = sensor_read_sensor2_conditioned();
		sensor2_reading = HAL_GPIO_ReadPin(Sensor2_GPIO_Port, Sensor2_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4813      	ldr	r0, [pc, #76]	; (8000618 <vTask_SensorRead+0x68>)
 80005cc:	f000 fb5c 	bl	8000c88 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <vTask_SensorRead+0x6c>)
 80005d6:	701a      	strb	r2, [r3, #0]

		/* exit sensor is sensor2 */
		if ( sensor1_reading == LOW && sensor2_reading == HIGH )
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <vTask_SensorRead+0x64>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d107      	bne.n	80005f0 <vTask_SensorRead+0x40>
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <vTask_SensorRead+0x6c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d103      	bne.n	80005f0 <vTask_SensorRead+0x40>
		{
			exit_sensor = exit_sensor_sens2;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <vTask_SensorRead+0x70>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	e00e      	b.n	800060e <vTask_SensorRead+0x5e>
		}

		/* exit sensor is sensor1 */
		else if ( sensor1_reading == HIGH && sensor2_reading == LOW )
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <vTask_SensorRead+0x64>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d107      	bne.n	8000608 <vTask_SensorRead+0x58>
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <vTask_SensorRead+0x6c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d103      	bne.n	8000608 <vTask_SensorRead+0x58>
		{
			exit_sensor = exit_sensor_sens1;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <vTask_SensorRead+0x70>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	e002      	b.n	800060e <vTask_SensorRead+0x5e>
		}

		/* Any other combination is reset */
		else
		{
			exit_sensor = exit_sensor_reset;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <vTask_SensorRead+0x70>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
		sensor1_reading = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 800060e:	e7d3      	b.n	80005b8 <vTask_SensorRead+0x8>
 8000610:	40020c00 	.word	0x40020c00
 8000614:	20000030 	.word	0x20000030
 8000618:	40021000 	.word	0x40021000
 800061c:	20000031 	.word	0x20000031
 8000620:	20000032 	.word	0x20000032

08000624 <sensor_read_get_sensor1_reading>:

	}
}

uint8_t sensor_read_get_sensor1_reading(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	return sensor1_reading;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <sensor_read_get_sensor1_reading+0x14>)
 800062a:	781b      	ldrb	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000030 	.word	0x20000030

0800063c <sensor_read_get_sensor2_reading>:

uint8_t sensor_read_get_sensor2_reading(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	return sensor2_reading;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <sensor_read_get_sensor2_reading+0x14>)
 8000642:	781b      	ldrb	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000031 	.word	0x20000031

08000654 <sensor_read_get_exit_sensor>:

uint8_t sensor_read_get_exit_sensor(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	return exit_sensor;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <sensor_read_get_exit_sensor+0x14>)
 800065a:	781b      	ldrb	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000032 	.word	0x20000032

0800066c <vTask_StateMachine>:

static uint8_t CLC_current_state = CLC_train_not_present;
static uint8_t CLC_train_exit_timeout_timer_state = timer_not_started;

void vTask_StateMachine(void* params)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Wait for the next cycle
//		vTaskDelayUntil(&xLastWakeTime, xFrequency);

		uint8_t sens1 = sensor_read_get_sensor1_reading();
 8000674:	f7ff ffd6 	bl	8000624 <sensor_read_get_sensor1_reading>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
		uint8_t sens2 = sensor_read_get_sensor2_reading();
 800067c:	f7ff ffde 	bl	800063c <sensor_read_get_sensor2_reading>
 8000680:	4603      	mov	r3, r0
 8000682:	73bb      	strb	r3, [r7, #14]

		if ( sens1 == LOW && CLC_current_state == CLC_train_not_present )
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d107      	bne.n	800069a <vTask_StateMachine+0x2e>
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <vTask_StateMachine+0x84>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d103      	bne.n	800069a <vTask_StateMachine+0x2e>
		{
			CLC_current_state = CLC_train_crossing;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <vTask_StateMachine+0x84>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	e009      	b.n	80006ae <vTask_StateMachine+0x42>
		}
		else if ( sens2 == LOW && CLC_current_state == CLC_train_not_present )
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d106      	bne.n	80006ae <vTask_StateMachine+0x42>
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <vTask_StateMachine+0x84>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <vTask_StateMachine+0x42>
		{
			CLC_current_state = CLC_train_crossing;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <vTask_StateMachine+0x84>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
		}

		if ( sensor_read_get_exit_sensor() == exit_sensor_sens1
 80006ae:	f7ff ffd1 	bl	8000654 <sensor_read_get_exit_sensor>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10a      	bne.n	80006ce <vTask_StateMachine+0x62>
				&& CLC_current_state == CLC_train_crossing )
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <vTask_StateMachine+0x84>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d106      	bne.n	80006ce <vTask_StateMachine+0x62>
		{
			if ( sens1 == LOW )
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d112      	bne.n	80006ec <vTask_StateMachine+0x80>
			{
				CLC_current_state = CLC_train_exit;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <vTask_StateMachine+0x84>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	701a      	strb	r2, [r3, #0]
			if ( sens1 == LOW )
 80006cc:	e00e      	b.n	80006ec <vTask_StateMachine+0x80>
			}
		}
		else if ( sensor_read_get_exit_sensor() == exit_sensor_sens2
 80006ce:	f7ff ffc1 	bl	8000654 <sensor_read_get_exit_sensor>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d1cd      	bne.n	8000674 <vTask_StateMachine+0x8>
				&& CLC_current_state == CLC_train_crossing )
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <vTask_StateMachine+0x84>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d1c9      	bne.n	8000674 <vTask_StateMachine+0x8>
		{
			if ( sens2 == LOW )
 80006e0:	7bbb      	ldrb	r3, [r7, #14]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1c6      	bne.n	8000674 <vTask_StateMachine+0x8>
			{
				CLC_current_state = CLC_train_exit;
 80006e6:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <vTask_StateMachine+0x84>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	701a      	strb	r2, [r3, #0]
	{
 80006ec:	e7c2      	b.n	8000674 <vTask_StateMachine+0x8>
 80006ee:	bf00      	nop
 80006f0:	20000033 	.word	0x20000033

080006f4 <state_machine_get_state>:

	}
}

uint8_t state_machine_get_state(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	return CLC_current_state;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <state_machine_get_state+0x14>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000033 	.word	0x20000033

0800070c <HAL_Init>:
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_Init+0x40>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <HAL_Init+0x40>)
 8000716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <HAL_Init+0x40>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_Init+0x40>)
 8000722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_Init+0x40>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_Init+0x40>)
 800072e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f8d8 	bl	80008ea <HAL_NVIC_SetPriorityGrouping>
 800073a:	2000      	movs	r0, #0
 800073c:	f001 fc24 	bl	8001f88 <HAL_InitTick>
 8000740:	f001 fbfa 	bl	8001f38 <HAL_MspInit>
 8000744:	2300      	movs	r3, #0
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023c00 	.word	0x40023c00

08000750 <HAL_IncTick>:
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x20>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_IncTick+0x24>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_IncTick+0x24>)
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000004 	.word	0x20000004
 8000774:	2001a76c 	.word	0x2001a76c

08000778 <HAL_GetTick>:
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_GetTick+0x14>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	2001a76c 	.word	0x2001a76c

08000790 <__NVIC_SetPriorityGrouping>:
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	021a      	lsls	r2, r3, #8
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_GetPriorityGrouping>:
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_EnableIRQ>:
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db0b      	blt.n	800081e <__NVIC_EnableIRQ+0x2a>
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 021f 	and.w	r2, r3, #31
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <__NVIC_EnableIRQ+0x38>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	2001      	movs	r0, #1
 8000816:	fa00 f202 	lsl.w	r2, r0, r2
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000e100 	.word	0xe000e100

08000830 <__NVIC_SetPriority>:
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
 80008dc:	4313      	orrs	r3, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <HAL_NVIC_SetPriorityGrouping>:
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ff4c 	bl	8000790 <__NVIC_SetPriorityGrouping>
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HAL_NVIC_SetPriority>:
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	f7ff ff61 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 8000916:	6178      	str	r0, [r7, #20]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	6978      	ldr	r0, [r7, #20]
 800091e:	f7ff ffb1 	bl	8000884 <NVIC_EncodePriority>
 8000922:	4602      	mov	r2, r0
 8000924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff80 	bl	8000830 <__NVIC_SetPriority>
 8000930:	bf00      	nop
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_NVIC_EnableIRQ>:
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff54 	bl	80007f4 <__NVIC_EnableIRQ>
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_GPIO_Init>:
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	e16b      	b.n	8000c48 <HAL_GPIO_Init+0x2f4>
 8000970:	2201      	movs	r2, #1
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	429a      	cmp	r2, r3
 800098a:	f040 815a 	bne.w	8000c42 <HAL_GPIO_Init+0x2ee>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d00b      	beq.n	80009ae <HAL_GPIO_Init+0x5a>
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d007      	beq.n	80009ae <HAL_GPIO_Init+0x5a>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b11      	cmp	r3, #17
 80009a4:	d003      	beq.n	80009ae <HAL_GPIO_Init+0x5a>
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	2b12      	cmp	r3, #18
 80009ac:	d130      	bne.n	8000a10 <HAL_GPIO_Init+0xbc>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68da      	ldr	r2, [r3, #12]
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	2201      	movs	r2, #1
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	091b      	lsrs	r3, r3, #4
 80009fa:	f003 0201 	and.w	r2, r3, #1
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	4013      	ands	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0xfc>
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2b12      	cmp	r3, #18
 8000a4e:	d123      	bne.n	8000a98 <HAL_GPIO_Init+0x144>
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	08da      	lsrs	r2, r3, #3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3208      	adds	r2, #8
 8000a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	f003 0307 	and.w	r3, r3, #7
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	220f      	movs	r2, #15
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	691a      	ldr	r2, [r3, #16]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	08da      	lsrs	r2, r3, #3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3208      	adds	r2, #8
 8000a92:	69b9      	ldr	r1, [r7, #24]
 8000a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0203 	and.w	r2, r3, #3
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 80b4 	beq.w	8000c42 <HAL_GPIO_Init+0x2ee>
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b5f      	ldr	r3, [pc, #380]	; (8000c5c <HAL_GPIO_Init+0x308>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a5e      	ldr	r2, [pc, #376]	; (8000c5c <HAL_GPIO_Init+0x308>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b5c      	ldr	r3, [pc, #368]	; (8000c5c <HAL_GPIO_Init+0x308>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4a5a      	ldr	r2, [pc, #360]	; (8000c60 <HAL_GPIO_Init+0x30c>)
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3302      	adds	r3, #2
 8000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4013      	ands	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a51      	ldr	r2, [pc, #324]	; (8000c64 <HAL_GPIO_Init+0x310>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d02b      	beq.n	8000b7a <HAL_GPIO_Init+0x226>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a50      	ldr	r2, [pc, #320]	; (8000c68 <HAL_GPIO_Init+0x314>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d025      	beq.n	8000b76 <HAL_GPIO_Init+0x222>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4f      	ldr	r2, [pc, #316]	; (8000c6c <HAL_GPIO_Init+0x318>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d01f      	beq.n	8000b72 <HAL_GPIO_Init+0x21e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4e      	ldr	r2, [pc, #312]	; (8000c70 <HAL_GPIO_Init+0x31c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d019      	beq.n	8000b6e <HAL_GPIO_Init+0x21a>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4d      	ldr	r2, [pc, #308]	; (8000c74 <HAL_GPIO_Init+0x320>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d013      	beq.n	8000b6a <HAL_GPIO_Init+0x216>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a4c      	ldr	r2, [pc, #304]	; (8000c78 <HAL_GPIO_Init+0x324>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d00d      	beq.n	8000b66 <HAL_GPIO_Init+0x212>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a4b      	ldr	r2, [pc, #300]	; (8000c7c <HAL_GPIO_Init+0x328>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d007      	beq.n	8000b62 <HAL_GPIO_Init+0x20e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a4a      	ldr	r2, [pc, #296]	; (8000c80 <HAL_GPIO_Init+0x32c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_GPIO_Init+0x20a>
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	e00e      	b.n	8000b7c <HAL_GPIO_Init+0x228>
 8000b5e:	2308      	movs	r3, #8
 8000b60:	e00c      	b.n	8000b7c <HAL_GPIO_Init+0x228>
 8000b62:	2306      	movs	r3, #6
 8000b64:	e00a      	b.n	8000b7c <HAL_GPIO_Init+0x228>
 8000b66:	2305      	movs	r3, #5
 8000b68:	e008      	b.n	8000b7c <HAL_GPIO_Init+0x228>
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	e006      	b.n	8000b7c <HAL_GPIO_Init+0x228>
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e004      	b.n	8000b7c <HAL_GPIO_Init+0x228>
 8000b72:	2302      	movs	r3, #2
 8000b74:	e002      	b.n	8000b7c <HAL_GPIO_Init+0x228>
 8000b76:	2301      	movs	r3, #1
 8000b78:	e000      	b.n	8000b7c <HAL_GPIO_Init+0x228>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	69fa      	ldr	r2, [r7, #28]
 8000b7e:	f002 0203 	and.w	r2, r2, #3
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	4093      	lsls	r3, r2
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	4934      	ldr	r1, [pc, #208]	; (8000c60 <HAL_GPIO_Init+0x30c>)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <HAL_GPIO_Init+0x330>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x26a>
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <HAL_GPIO_Init+0x330>)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_GPIO_Init+0x330>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x294>
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <HAL_GPIO_Init+0x330>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	6053      	str	r3, [r2, #4]
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <HAL_GPIO_Init+0x330>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x2be>
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <HAL_GPIO_Init+0x330>)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	6093      	str	r3, [r2, #8]
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_GPIO_Init+0x330>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x2e8>
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <HAL_GPIO_Init+0x330>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	60d3      	str	r3, [r2, #12]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	f67f ae90 	bls.w	8000970 <HAL_GPIO_Init+0x1c>
 8000c50:	bf00      	nop
 8000c52:	3724      	adds	r7, #36	; 0x24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40013800 	.word	0x40013800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40021400 	.word	0x40021400
 8000c7c:	40021800 	.word	0x40021800
 8000c80:	40021c00 	.word	0x40021c00
 8000c84:	40013c00 	.word	0x40013c00

08000c88 <HAL_GPIO_ReadPin>:
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <HAL_GPIO_ReadPin+0x1e>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e001      	b.n	8000caa <HAL_GPIO_ReadPin+0x22>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_GPIO_WritePin>:
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	707b      	strb	r3, [r7, #1]
 8000cc8:	787b      	ldrb	r3, [r7, #1]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_WritePin+0x1e>
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	619a      	str	r2, [r3, #24]
 8000cd4:	e003      	b.n	8000cde <HAL_GPIO_WritePin+0x26>
 8000cd6:	887b      	ldrh	r3, [r7, #2]
 8000cd8:	041a      	lsls	r2, r3, #16
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	619a      	str	r2, [r3, #24]
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <HAL_RCC_OscConfig>:
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_RCC_OscConfig+0x12>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e25b      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d075      	beq.n	8000df6 <HAL_RCC_OscConfig+0x10a>
 8000d0a:	4ba3      	ldr	r3, [pc, #652]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d00c      	beq.n	8000d30 <HAL_RCC_OscConfig+0x44>
 8000d16:	4ba0      	ldr	r3, [pc, #640]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d112      	bne.n	8000d48 <HAL_RCC_OscConfig+0x5c>
 8000d22:	4b9d      	ldr	r3, [pc, #628]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d2e:	d10b      	bne.n	8000d48 <HAL_RCC_OscConfig+0x5c>
 8000d30:	4b99      	ldr	r3, [pc, #612]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d05b      	beq.n	8000df4 <HAL_RCC_OscConfig+0x108>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d157      	bne.n	8000df4 <HAL_RCC_OscConfig+0x108>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e236      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d50:	d106      	bne.n	8000d60 <HAL_RCC_OscConfig+0x74>
 8000d52:	4b91      	ldr	r3, [pc, #580]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a90      	ldr	r2, [pc, #576]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e01d      	b.n	8000d9c <HAL_RCC_OscConfig+0xb0>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x98>
 8000d6a:	4b8b      	ldr	r3, [pc, #556]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a8a      	ldr	r2, [pc, #552]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b88      	ldr	r3, [pc, #544]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a87      	ldr	r2, [pc, #540]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xb0>
 8000d84:	4b84      	ldr	r3, [pc, #528]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a83      	ldr	r2, [pc, #524]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a80      	ldr	r2, [pc, #512]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe0>
 8000da4:	f7ff fce8 	bl	8000778 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0xd2>
 8000dac:	f7ff fce4 	bl	8000778 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0xd2>
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e1fb      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000dbe:	4b76      	ldr	r3, [pc, #472]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0xc0>
 8000dca:	e014      	b.n	8000df6 <HAL_RCC_OscConfig+0x10a>
 8000dcc:	f7ff fcd4 	bl	8000778 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0xfa>
 8000dd4:	f7ff fcd0 	bl	8000778 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	; 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0xfa>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e1e7      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000de6:	4b6c      	ldr	r3, [pc, #432]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xe8>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x10a>
 8000df4:	bf00      	nop
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d063      	beq.n	8000eca <HAL_RCC_OscConfig+0x1de>
 8000e02:	4b65      	ldr	r3, [pc, #404]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <HAL_RCC_OscConfig+0x13a>
 8000e0e:	4b62      	ldr	r3, [pc, #392]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d11c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x168>
 8000e1a:	4b5f      	ldr	r3, [pc, #380]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d116      	bne.n	8000e54 <HAL_RCC_OscConfig+0x168>
 8000e26:	4b5c      	ldr	r3, [pc, #368]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d005      	beq.n	8000e3e <HAL_RCC_OscConfig+0x152>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d001      	beq.n	8000e3e <HAL_RCC_OscConfig+0x152>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e1bb      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000e3e:	4b56      	ldr	r3, [pc, #344]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	4952      	ldr	r1, [pc, #328]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
 8000e52:	e03a      	b.n	8000eca <HAL_RCC_OscConfig+0x1de>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d020      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1b2>
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <HAL_RCC_OscConfig+0x2b0>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	f7ff fc89 	bl	8000778 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x190>
 8000e6a:	f7ff fc85 	bl	8000778 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x190>
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e19c      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000e7c:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x17e>
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4940      	ldr	r1, [pc, #256]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
 8000e9c:	e015      	b.n	8000eca <HAL_RCC_OscConfig+0x1de>
 8000e9e:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <HAL_RCC_OscConfig+0x2b0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	f7ff fc68 	bl	8000778 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x1d2>
 8000eac:	f7ff fc64 	bl	8000778 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x1d2>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e17b      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000ebe:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x1c0>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d030      	beq.n	8000f38 <HAL_RCC_OscConfig+0x24c>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d016      	beq.n	8000f0c <HAL_RCC_OscConfig+0x220>
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_RCC_OscConfig+0x2b4>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	f7ff fc48 	bl	8000778 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x212>
 8000eec:	f7ff fc44 	bl	8000778 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x212>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e15b      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0x200>
 8000f0a:	e015      	b.n	8000f38 <HAL_RCC_OscConfig+0x24c>
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_RCC_OscConfig+0x2b4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	f7ff fc31 	bl	8000778 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x240>
 8000f1a:	f7ff fc2d 	bl	8000778 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x240>
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e144      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f0      	bne.n	8000f1a <HAL_RCC_OscConfig+0x22e>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80a0 	beq.w	8001086 <HAL_RCC_OscConfig+0x39a>
 8000f46:	2300      	movs	r3, #0
 8000f48:	75fb      	strb	r3, [r7, #23]
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10f      	bne.n	8000f76 <HAL_RCC_OscConfig+0x28a>
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2301      	movs	r3, #1
 8000f74:	75fb      	strb	r3, [r7, #23]
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_RCC_OscConfig+0x2b8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d121      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2da>
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_RCC_OscConfig+0x2b8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_RCC_OscConfig+0x2b8>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	f7ff fbf3 	bl	8000778 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]
 8000f94:	e011      	b.n	8000fba <HAL_RCC_OscConfig+0x2ce>
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	42470000 	.word	0x42470000
 8000fa0:	42470e80 	.word	0x42470e80
 8000fa4:	40007000 	.word	0x40007000
 8000fa8:	f7ff fbe6 	bl	8000778 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x2ce>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e0fd      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8000fba:	4b81      	ldr	r3, [pc, #516]	; (80011c0 <HAL_RCC_OscConfig+0x4d4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x2bc>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d106      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2f0>
 8000fce:	4b7d      	ldr	r3, [pc, #500]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8000fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd2:	4a7c      	ldr	r2, [pc, #496]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8000fda:	e01c      	b.n	8001016 <HAL_RCC_OscConfig+0x32a>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d10c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x312>
 8000fe4:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8000fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe8:	4a76      	ldr	r2, [pc, #472]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6713      	str	r3, [r2, #112]	; 0x70
 8000ff0:	4b74      	ldr	r3, [pc, #464]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8000ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff4:	4a73      	ldr	r2, [pc, #460]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8000ffc:	e00b      	b.n	8001016 <HAL_RCC_OscConfig+0x32a>
 8000ffe:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8001000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001002:	4a70      	ldr	r2, [pc, #448]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6713      	str	r3, [r2, #112]	; 0x70
 800100a:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800100e:	4a6d      	ldr	r2, [pc, #436]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8001010:	f023 0304 	bic.w	r3, r3, #4
 8001014:	6713      	str	r3, [r2, #112]	; 0x70
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d015      	beq.n	800104a <HAL_RCC_OscConfig+0x35e>
 800101e:	f7ff fbab 	bl	8000778 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]
 8001024:	e00a      	b.n	800103c <HAL_RCC_OscConfig+0x350>
 8001026:	f7ff fba7 	bl	8000778 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	f241 3288 	movw	r2, #5000	; 0x1388
 8001034:	4293      	cmp	r3, r2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x350>
 8001038:	2303      	movs	r3, #3
 800103a:	e0bc      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 800103c:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 800103e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0ee      	beq.n	8001026 <HAL_RCC_OscConfig+0x33a>
 8001048:	e014      	b.n	8001074 <HAL_RCC_OscConfig+0x388>
 800104a:	f7ff fb95 	bl	8000778 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x37c>
 8001052:	f7ff fb91 	bl	8000778 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x37c>
 8001064:	2303      	movs	r3, #3
 8001066:	e0a6      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8001068:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 800106a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1ee      	bne.n	8001052 <HAL_RCC_OscConfig+0x366>
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d105      	bne.n	8001086 <HAL_RCC_OscConfig+0x39a>
 800107a:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a51      	ldr	r2, [pc, #324]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8001080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8092 	beq.w	80011b4 <HAL_RCC_OscConfig+0x4c8>
 8001090:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b08      	cmp	r3, #8
 800109a:	d05c      	beq.n	8001156 <HAL_RCC_OscConfig+0x46a>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d141      	bne.n	8001128 <HAL_RCC_OscConfig+0x43c>
 80010a4:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_RCC_OscConfig+0x4dc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f7ff fb65 	bl	8000778 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x3d8>
 80010b2:	f7ff fb61 	bl	8000778 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x3d8>
 80010c0:	2303      	movs	r3, #3
 80010c2:	e078      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 80010c4:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f0      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3c6>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69da      	ldr	r2, [r3, #28]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	019b      	lsls	r3, r3, #6
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	3b01      	subs	r3, #1
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	061b      	lsls	r3, r3, #24
 80010f4:	4933      	ldr	r1, [pc, #204]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_RCC_OscConfig+0x4dc>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	f7ff fb3a 	bl	8000778 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x42e>
 8001108:	f7ff fb36 	bl	8000778 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x42e>
 8001116:	2303      	movs	r3, #3
 8001118:	e04d      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x41c>
 8001126:	e045      	b.n	80011b4 <HAL_RCC_OscConfig+0x4c8>
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <HAL_RCC_OscConfig+0x4dc>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	f7ff fb23 	bl	8000778 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x45c>
 8001136:	f7ff fb1f 	bl	8000778 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x45c>
 8001144:	2303      	movs	r3, #3
 8001146:	e036      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x44a>
 8001154:	e02e      	b.n	80011b4 <HAL_RCC_OscConfig+0x4c8>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x476>
 800115e:	2301      	movs	r3, #1
 8001160:	e029      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_RCC_OscConfig+0x4d8>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	429a      	cmp	r2, r3
 8001174:	d11c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4c4>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	429a      	cmp	r2, r3
 8001182:	d115      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4c4>
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800118a:	4013      	ands	r3, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001190:	4293      	cmp	r3, r2
 8001192:	d10d      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4c4>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119e:	429a      	cmp	r2, r3
 80011a0:	d106      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4c4>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0x4c8>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
 80011b4:	2300      	movs	r3, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40007000 	.word	0x40007000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	42470060 	.word	0x42470060

080011cc <HAL_RCC_ClockConfig>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x14>
 80011dc:	2301      	movs	r3, #1
 80011de:	e0cc      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d90c      	bls.n	8001208 <HAL_RCC_ClockConfig+0x3c>
 80011ee:	4b65      	ldr	r3, [pc, #404]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	4b63      	ldr	r3, [pc, #396]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x3c>
 8001204:	2301      	movs	r3, #1
 8001206:	e0b8      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x60>
 8001220:	4b59      	ldr	r3, [pc, #356]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a58      	ldr	r2, [pc, #352]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800122a:	6093      	str	r3, [r2, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x78>
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001242:	6093      	str	r3, [r2, #8]
 8001244:	4b50      	ldr	r3, [pc, #320]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	494d      	ldr	r1, [pc, #308]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d044      	beq.n	80012ec <HAL_RCC_ClockConfig+0x120>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xae>
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
 8001276:	2301      	movs	r3, #1
 8001278:	e07f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d003      	beq.n	800128a <HAL_RCC_ClockConfig+0xbe>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xce>
 800128a:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
 8001296:	2301      	movs	r3, #1
 8001298:	e06f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e067      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4934      	ldr	r1, [pc, #208]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]
 80012bc:	f7ff fa5c 	bl	8000778 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x10e>
 80012c4:	f7ff fa58 	bl	8000778 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x10e>
 80012d6:	2303      	movs	r3, #3
 80012d8:	e04f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xf8>
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d20c      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x148>
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x148>
 8001310:	2301      	movs	r3, #1
 8001312:	e032      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_RCC_ClockConfig+0x166>
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4916      	ldr	r1, [pc, #88]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	4313      	orrs	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_ClockConfig+0x186>
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	490e      	ldr	r1, [pc, #56]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
 8001352:	f000 f821 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 8001356:	4601      	mov	r1, r0
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	fa21 f303 	lsr.w	r3, r1, r3
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_ClockConfig+0x1c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fe08 	bl	8001f88 <HAL_InitTick>
 8001378:	2300      	movs	r3, #0
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00
 8001388:	40023800 	.word	0x40023800
 800138c:	0800658c 	.word	0x0800658c
 8001390:	20000008 	.word	0x20000008
 8001394:	20000000 	.word	0x20000000

08001398 <HAL_RCC_GetSysClockFreq>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d007      	beq.n	80013ca <HAL_RCC_GetSysClockFreq+0x32>
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d008      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0x38>
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 80b4 	bne.w	800152c <HAL_RCC_GetSysClockFreq+0x194>
 80013c4:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	e0b3      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x19a>
 80013ca:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	e0b0      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x19a>
 80013d0:	4b5a      	ldr	r3, [pc, #360]	; (800153c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b58      	ldr	r3, [pc, #352]	; (800153c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d04a      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0xe4>
 80013e6:	4b55      	ldr	r3, [pc, #340]	; (800153c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	099b      	lsrs	r3, r3, #6
 80013ec:	f04f 0400 	mov.w	r4, #0
 80013f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	ea03 0501 	and.w	r5, r3, r1
 80013fc:	ea04 0602 	and.w	r6, r4, r2
 8001400:	4629      	mov	r1, r5
 8001402:	4632      	mov	r2, r6
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	f04f 0400 	mov.w	r4, #0
 800140c:	0154      	lsls	r4, r2, #5
 800140e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001412:	014b      	lsls	r3, r1, #5
 8001414:	4619      	mov	r1, r3
 8001416:	4622      	mov	r2, r4
 8001418:	1b49      	subs	r1, r1, r5
 800141a:	eb62 0206 	sbc.w	r2, r2, r6
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	f04f 0400 	mov.w	r4, #0
 8001426:	0194      	lsls	r4, r2, #6
 8001428:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800142c:	018b      	lsls	r3, r1, #6
 800142e:	1a5b      	subs	r3, r3, r1
 8001430:	eb64 0402 	sbc.w	r4, r4, r2
 8001434:	f04f 0100 	mov.w	r1, #0
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	00e2      	lsls	r2, r4, #3
 800143e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001442:	00d9      	lsls	r1, r3, #3
 8001444:	460b      	mov	r3, r1
 8001446:	4614      	mov	r4, r2
 8001448:	195b      	adds	r3, r3, r5
 800144a:	eb44 0406 	adc.w	r4, r4, r6
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	0262      	lsls	r2, r4, #9
 8001458:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800145c:	0259      	lsls	r1, r3, #9
 800145e:	460b      	mov	r3, r1
 8001460:	4614      	mov	r4, r2
 8001462:	4618      	mov	r0, r3
 8001464:	4621      	mov	r1, r4
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f04f 0400 	mov.w	r4, #0
 800146c:	461a      	mov	r2, r3
 800146e:	4623      	mov	r3, r4
 8001470:	f7fe fef8 	bl	8000264 <__aeabi_uldivmod>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	e049      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x178>
 800147c:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	099b      	lsrs	r3, r3, #6
 8001482:	f04f 0400 	mov.w	r4, #0
 8001486:	f240 11ff 	movw	r1, #511	; 0x1ff
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	ea03 0501 	and.w	r5, r3, r1
 8001492:	ea04 0602 	and.w	r6, r4, r2
 8001496:	4629      	mov	r1, r5
 8001498:	4632      	mov	r2, r6
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	f04f 0400 	mov.w	r4, #0
 80014a2:	0154      	lsls	r4, r2, #5
 80014a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	4619      	mov	r1, r3
 80014ac:	4622      	mov	r2, r4
 80014ae:	1b49      	subs	r1, r1, r5
 80014b0:	eb62 0206 	sbc.w	r2, r2, r6
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	f04f 0400 	mov.w	r4, #0
 80014bc:	0194      	lsls	r4, r2, #6
 80014be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014c2:	018b      	lsls	r3, r1, #6
 80014c4:	1a5b      	subs	r3, r3, r1
 80014c6:	eb64 0402 	sbc.w	r4, r4, r2
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	00e2      	lsls	r2, r4, #3
 80014d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014d8:	00d9      	lsls	r1, r3, #3
 80014da:	460b      	mov	r3, r1
 80014dc:	4614      	mov	r4, r2
 80014de:	195b      	adds	r3, r3, r5
 80014e0:	eb44 0406 	adc.w	r4, r4, r6
 80014e4:	f04f 0100 	mov.w	r1, #0
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	02a2      	lsls	r2, r4, #10
 80014ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80014f2:	0299      	lsls	r1, r3, #10
 80014f4:	460b      	mov	r3, r1
 80014f6:	4614      	mov	r4, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	4621      	mov	r1, r4
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f04f 0400 	mov.w	r4, #0
 8001502:	461a      	mov	r2, r3
 8001504:	4623      	mov	r3, r4
 8001506:	f7fe fead 	bl	8000264 <__aeabi_uldivmod>
 800150a:	4603      	mov	r3, r0
 800150c:	460c      	mov	r4, r1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	3301      	adds	r3, #1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	e002      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x19a>
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	bf00      	nop
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	00f42400 	.word	0x00f42400
 8001544:	007a1200 	.word	0x007a1200

08001548 <HAL_RCC_GetHCLKFreq>:
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_RCC_GetHCLKFreq+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008

08001560 <HAL_RCC_GetPCLK1Freq>:
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
 8001564:	f7ff fff0 	bl	8001548 <HAL_RCC_GetHCLKFreq>
 8001568:	4601      	mov	r1, r0
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	fa21 f303 	lsr.w	r3, r1, r3
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800
 8001584:	0800659c 	.word	0x0800659c

08001588 <HAL_RCC_GetClockConfig>:
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	220f      	movs	r2, #15
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_RCC_GetClockConfig+0x5c>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0203 	and.w	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_RCC_GetClockConfig+0x5c>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_RCC_GetClockConfig+0x5c>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_GetClockConfig+0x5c>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_RCC_GetClockConfig+0x60>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 020f 	and.w	r2, r3, #15
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_TIM_Base_Init>:
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_TIM_Base_Init+0x12>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e01d      	b.n	800163a <HAL_TIM_Base_Init+0x4e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_TIM_Base_Init+0x2c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f815 	bl	8001642 <HAL_TIM_Base_MspInit>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3304      	adds	r3, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f000 f968 	bl	8001900 <TIM_Base_SetConfig>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001638:	2300      	movs	r3, #0
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_TIM_Base_MspInit>:
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_TIM_Base_Start_IT>:
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b06      	cmp	r3, #6
 800167e:	d007      	beq.n	8001690 <HAL_TIM_Base_Start_IT+0x3a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_TIM_IRQHandler>:
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d122      	bne.n	80016fa <HAL_TIM_IRQHandler+0x5c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d11b      	bne.n	80016fa <HAL_TIM_IRQHandler+0x5c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f06f 0202 	mvn.w	r2, #2
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	771a      	strb	r2, [r3, #28]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_TIM_IRQHandler+0x4a>
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f8ee 	bl	80018c2 <HAL_TIM_IC_CaptureCallback>
 80016e6:	e005      	b.n	80016f4 <HAL_TIM_IRQHandler+0x56>
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8e0 	bl	80018ae <HAL_TIM_OC_DelayElapsedCallback>
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f8f1 	bl	80018d6 <HAL_TIM_PWM_PulseFinishedCallback>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	771a      	strb	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b04      	cmp	r3, #4
 8001706:	d122      	bne.n	800174e <HAL_TIM_IRQHandler+0xb0>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b04      	cmp	r3, #4
 8001714:	d11b      	bne.n	800174e <HAL_TIM_IRQHandler+0xb0>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f06f 0204 	mvn.w	r2, #4
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	771a      	strb	r2, [r3, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_TIM_IRQHandler+0x9e>
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f8c4 	bl	80018c2 <HAL_TIM_IC_CaptureCallback>
 800173a:	e005      	b.n	8001748 <HAL_TIM_IRQHandler+0xaa>
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8b6 	bl	80018ae <HAL_TIM_OC_DelayElapsedCallback>
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8c7 	bl	80018d6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	771a      	strb	r2, [r3, #28]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b08      	cmp	r3, #8
 800175a:	d122      	bne.n	80017a2 <HAL_TIM_IRQHandler+0x104>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b08      	cmp	r3, #8
 8001768:	d11b      	bne.n	80017a2 <HAL_TIM_IRQHandler+0x104>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f06f 0208 	mvn.w	r2, #8
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2204      	movs	r2, #4
 8001778:	771a      	strb	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_TIM_IRQHandler+0xf2>
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f89a 	bl	80018c2 <HAL_TIM_IC_CaptureCallback>
 800178e:	e005      	b.n	800179c <HAL_TIM_IRQHandler+0xfe>
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f88c 	bl	80018ae <HAL_TIM_OC_DelayElapsedCallback>
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f89d 	bl	80018d6 <HAL_TIM_PWM_PulseFinishedCallback>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	771a      	strb	r2, [r3, #28]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d122      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x158>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d11b      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x158>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f06f 0210 	mvn.w	r2, #16
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2208      	movs	r2, #8
 80017cc:	771a      	strb	r2, [r3, #28]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_TIM_IRQHandler+0x146>
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f870 	bl	80018c2 <HAL_TIM_IC_CaptureCallback>
 80017e2:	e005      	b.n	80017f0 <HAL_TIM_IRQHandler+0x152>
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f862 	bl	80018ae <HAL_TIM_OC_DelayElapsedCallback>
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f873 	bl	80018d6 <HAL_TIM_PWM_PulseFinishedCallback>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	771a      	strb	r2, [r3, #28]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10e      	bne.n	8001822 <HAL_TIM_IRQHandler+0x184>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_TIM_IRQHandler+0x184>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f06f 0201 	mvn.w	r2, #1
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fb71 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182c:	2b80      	cmp	r3, #128	; 0x80
 800182e:	d10e      	bne.n	800184e <HAL_TIM_IRQHandler+0x1b0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	2b80      	cmp	r3, #128	; 0x80
 800183c:	d107      	bne.n	800184e <HAL_TIM_IRQHandler+0x1b0>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f903 	bl	8001a54 <HAL_TIMEx_BreakCallback>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001858:	2b40      	cmp	r3, #64	; 0x40
 800185a:	d10e      	bne.n	800187a <HAL_TIM_IRQHandler+0x1dc>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001866:	2b40      	cmp	r3, #64	; 0x40
 8001868:	d107      	bne.n	800187a <HAL_TIM_IRQHandler+0x1dc>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f838 	bl	80018ea <HAL_TIM_TriggerCallback>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b20      	cmp	r3, #32
 8001886:	d10e      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x208>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b20      	cmp	r3, #32
 8001894:	d107      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x208>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f06f 0220 	mvn.w	r2, #32
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f8cd 	bl	8001a40 <HAL_TIMEx_CommutCallback>
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_TIM_OC_DelayElapsedCallback>:
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_TIM_IC_CaptureCallback>:
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_TIM_TriggerCallback>:
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <TIM_Base_SetConfig>:
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a40      	ldr	r2, [pc, #256]	; (8001a14 <TIM_Base_SetConfig+0x114>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d013      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191e:	d00f      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3d      	ldr	r2, [pc, #244]	; (8001a18 <TIM_Base_SetConfig+0x118>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00b      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3c      	ldr	r2, [pc, #240]	; (8001a1c <TIM_Base_SetConfig+0x11c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d007      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <TIM_Base_SetConfig+0x120>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d003      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <TIM_Base_SetConfig+0x124>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d108      	bne.n	8001952 <TIM_Base_SetConfig+0x52>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <TIM_Base_SetConfig+0x114>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d02b      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d027      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a2c      	ldr	r2, [pc, #176]	; (8001a18 <TIM_Base_SetConfig+0x118>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d023      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <TIM_Base_SetConfig+0x11c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a2a      	ldr	r2, [pc, #168]	; (8001a20 <TIM_Base_SetConfig+0x120>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01b      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <TIM_Base_SetConfig+0x124>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d017      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <TIM_Base_SetConfig+0x128>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a27      	ldr	r2, [pc, #156]	; (8001a2c <TIM_Base_SetConfig+0x12c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00f      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <TIM_Base_SetConfig+0x130>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00b      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <TIM_Base_SetConfig+0x134>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <TIM_Base_SetConfig+0x138>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d003      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <TIM_Base_SetConfig+0x13c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d108      	bne.n	80019c4 <TIM_Base_SetConfig+0xc4>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <TIM_Base_SetConfig+0x114>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d003      	beq.n	80019f8 <TIM_Base_SetConfig+0xf8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <TIM_Base_SetConfig+0x124>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d103      	bne.n	8001a00 <TIM_Base_SetConfig+0x100>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40000800 	.word	0x40000800
 8001a20:	40000c00 	.word	0x40000c00
 8001a24:	40010400 	.word	0x40010400
 8001a28:	40014000 	.word	0x40014000
 8001a2c:	40014400 	.word	0x40014400
 8001a30:	40014800 	.word	0x40014800
 8001a34:	40001800 	.word	0x40001800
 8001a38:	40001c00 	.word	0x40001c00
 8001a3c:	40002000 	.word	0x40002000

08001a40 <HAL_TIMEx_CommutCallback>:
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_TIMEx_BreakCallback>:
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6e:	f7fe fe4d 	bl	800070c <HAL_Init>

  /* USER CODE BEGIN Init */

  // Enable the cycle counter
  DWT_CTRL |= (1<<0);
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <main+0xc0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a2c      	ldr	r2, [pc, #176]	; (8001b28 <main+0xc0>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]
  // start segger sys view
  SEGGER_SYSVIEW_Conf();
 8001a7e:	f002 ffd7 	bl	8004a30 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8001a82:	f003 fed7 	bl	8005834 <SEGGER_SYSVIEW_Start>
//  software_timers_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a86:	f000 f85d 	bl	8001b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8a:	f000 f8c5 	bl	8001c18 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* Create tasks - dynamically allocate memory to heap */
  status = xTaskCreate(vTask_IntersectionCtrl,"Task_IntersectionCtrl",100,NULL,2,NULL);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	2302      	movs	r3, #2
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2300      	movs	r3, #0
 8001a98:	2264      	movs	r2, #100	; 0x64
 8001a9a:	4924      	ldr	r1, [pc, #144]	; (8001b2c <main+0xc4>)
 8001a9c:	4824      	ldr	r0, [pc, #144]	; (8001b30 <main+0xc8>)
 8001a9e:	f001 f937 	bl	8002d10 <xTaskCreate>
 8001aa2:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d009      	beq.n	8001abe <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aae:	f383 8811 	msr	BASEPRI, r3
 8001ab2:	f3bf 8f6f 	isb	sy
 8001ab6:	f3bf 8f4f 	dsb	sy
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	e7fe      	b.n	8001abc <main+0x54>
  status = xTaskCreate(vTask_SensorRead,"Task_SensorRead",300,NULL,2,NULL);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001acc:	4919      	ldr	r1, [pc, #100]	; (8001b34 <main+0xcc>)
 8001ace:	481a      	ldr	r0, [pc, #104]	; (8001b38 <main+0xd0>)
 8001ad0:	f001 f91e 	bl	8002d10 <xTaskCreate>
 8001ad4:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d009      	beq.n	8001af0 <main+0x88>
 8001adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae0:	f383 8811 	msr	BASEPRI, r3
 8001ae4:	f3bf 8f6f 	isb	sy
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	e7fe      	b.n	8001aee <main+0x86>
  status = xTaskCreate(vTask_StateMachine,"Task_StateMachine",200,NULL,2,NULL);
 8001af0:	2300      	movs	r3, #0
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2302      	movs	r3, #2
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2300      	movs	r3, #0
 8001afa:	22c8      	movs	r2, #200	; 0xc8
 8001afc:	490f      	ldr	r1, [pc, #60]	; (8001b3c <main+0xd4>)
 8001afe:	4810      	ldr	r0, [pc, #64]	; (8001b40 <main+0xd8>)
 8001b00:	f001 f906 	bl	8002d10 <xTaskCreate>
 8001b04:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d009      	beq.n	8001b20 <main+0xb8>
 8001b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b10:	f383 8811 	msr	BASEPRI, r3
 8001b14:	f3bf 8f6f 	isb	sy
 8001b18:	f3bf 8f4f 	dsb	sy
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	e7fe      	b.n	8001b1e <main+0xb6>

  vTaskStartScheduler();
 8001b20:	f001 fa58 	bl	8002fd4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <main+0xbc>
 8001b26:	bf00      	nop
 8001b28:	e0001000 	.word	0xe0001000
 8001b2c:	0800646c 	.word	0x0800646c
 8001b30:	08000565 	.word	0x08000565
 8001b34:	08006484 	.word	0x08006484
 8001b38:	080005b1 	.word	0x080005b1
 8001b3c:	08006494 	.word	0x08006494
 8001b40:	0800066d 	.word	0x0800066d

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b094      	sub	sp, #80	; 0x50
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	2230      	movs	r2, #48	; 0x30
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 fc76 	bl	8006444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <SystemClock_Config+0xcc>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <SystemClock_Config+0xcc>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <SystemClock_Config+0xcc>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <SystemClock_Config+0xd0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <SystemClock_Config+0xd0>)
 8001b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <SystemClock_Config+0xd0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba8:	2310      	movs	r3, #16
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bac:	2302      	movs	r3, #2
 8001bae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001bb8:	2332      	movs	r3, #50	; 0x32
 8001bba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc4:	f107 0320 	add.w	r3, r7, #32
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f88f 	bl	8000cec <HAL_RCC_OscConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bd4:	f000 f9a8 	bl	8001f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd8:	230f      	movs	r3, #15
 8001bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001be4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001bea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fae8 	bl	80011cc <HAL_RCC_ClockConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c02:	f000 f991 	bl	8001f28 <Error_Handler>
  }
}
 8001c06:	bf00      	nop
 8001c08:	3750      	adds	r7, #80	; 0x50
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000

08001c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	4bad      	ldr	r3, [pc, #692]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4aac      	ldr	r2, [pc, #688]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c38:	f043 0310 	orr.w	r3, r3, #16
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4baa      	ldr	r3, [pc, #680]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	4ba6      	ldr	r3, [pc, #664]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4aa5      	ldr	r2, [pc, #660]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4ba3      	ldr	r3, [pc, #652]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b9f      	ldr	r3, [pc, #636]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a9e      	ldr	r2, [pc, #632]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b9c      	ldr	r3, [pc, #624]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b98      	ldr	r3, [pc, #608]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a97      	ldr	r2, [pc, #604]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b95      	ldr	r3, [pc, #596]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b91      	ldr	r3, [pc, #580]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a90      	ldr	r2, [pc, #576]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b8e      	ldr	r3, [pc, #568]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4b8a      	ldr	r3, [pc, #552]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a89      	ldr	r2, [pc, #548]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <MX_GPIO_Init+0x2d0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2108      	movs	r1, #8
 8001cda:	4884      	ldr	r0, [pc, #528]	; (8001eec <MX_GPIO_Init+0x2d4>)
 8001cdc:	f7fe ffec 	bl	8000cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	4882      	ldr	r0, [pc, #520]	; (8001ef0 <MX_GPIO_Init+0x2d8>)
 8001ce6:	f7fe ffe7 	bl	8000cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001cea:	2200      	movs	r2, #0
 8001cec:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001cf0:	4880      	ldr	r0, [pc, #512]	; (8001ef4 <MX_GPIO_Init+0x2dc>)
 8001cf2:	f7fe ffe1 	bl	8000cb8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4877      	ldr	r0, [pc, #476]	; (8001eec <MX_GPIO_Init+0x2d4>)
 8001d0e:	f7fe fe21 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4871      	ldr	r0, [pc, #452]	; (8001ef0 <MX_GPIO_Init+0x2d8>)
 8001d2a:	f7fe fe13 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3e:	2305      	movs	r3, #5
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	4869      	ldr	r0, [pc, #420]	; (8001ef0 <MX_GPIO_Init+0x2d8>)
 8001d4a:	f7fe fe03 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d52:	4b69      	ldr	r3, [pc, #420]	; (8001ef8 <MX_GPIO_Init+0x2e0>)
 8001d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4866      	ldr	r0, [pc, #408]	; (8001efc <MX_GPIO_Init+0x2e4>)
 8001d62:	f7fe fdf7 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d66:	2310      	movs	r3, #16
 8001d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d76:	2306      	movs	r3, #6
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	485e      	ldr	r0, [pc, #376]	; (8001efc <MX_GPIO_Init+0x2e4>)
 8001d82:	f7fe fde7 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d86:	23e0      	movs	r3, #224	; 0xe0
 8001d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d96:	2305      	movs	r3, #5
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4856      	ldr	r0, [pc, #344]	; (8001efc <MX_GPIO_Init+0x2e4>)
 8001da2:	f7fe fdd7 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001da6:	2304      	movs	r3, #4
 8001da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4851      	ldr	r0, [pc, #324]	; (8001f00 <MX_GPIO_Init+0x2e8>)
 8001dba:	f7fe fdcb 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor2_Pin;
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor2_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4846      	ldr	r0, [pc, #280]	; (8001eec <MX_GPIO_Init+0x2d4>)
 8001dd2:	f7fe fdbf 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001de8:	2305      	movs	r3, #5
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4843      	ldr	r0, [pc, #268]	; (8001f00 <MX_GPIO_Init+0x2e8>)
 8001df4:	f7fe fdae 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001df8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001dfc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4838      	ldr	r0, [pc, #224]	; (8001ef4 <MX_GPIO_Init+0x2dc>)
 8001e12:	f7fe fd9f 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e16:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e28:	2306      	movs	r3, #6
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	482f      	ldr	r0, [pc, #188]	; (8001ef0 <MX_GPIO_Init+0x2d8>)
 8001e34:	f7fe fd8e 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	482b      	ldr	r0, [pc, #172]	; (8001efc <MX_GPIO_Init+0x2e4>)
 8001e4e:	f7fe fd81 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001e52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e64:	230a      	movs	r3, #10
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4823      	ldr	r0, [pc, #140]	; (8001efc <MX_GPIO_Init+0x2e4>)
 8001e70:	f7fe fd70 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor1_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor1_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	481b      	ldr	r0, [pc, #108]	; (8001ef4 <MX_GPIO_Init+0x2dc>)
 8001e88:	f7fe fd64 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4815      	ldr	r0, [pc, #84]	; (8001ef4 <MX_GPIO_Init+0x2dc>)
 8001ea0:	f7fe fd58 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001ea4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	2312      	movs	r3, #18
 8001eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480f      	ldr	r0, [pc, #60]	; (8001f00 <MX_GPIO_Init+0x2e8>)
 8001ec2:	f7fe fd47 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <MX_GPIO_Init+0x2e0>)
 8001ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_GPIO_Init+0x2d4>)
 8001eda:	f7fe fd3b 	bl	8000954 <HAL_GPIO_Init>

}
 8001ede:	bf00      	nop
 8001ee0:	3730      	adds	r7, #48	; 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	10120000 	.word	0x10120000
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400

08001f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f16:	f7fe fc1b 	bl	8000750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40000c00 	.word	0x40000c00

08001f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001f76:	f002 f9bb 	bl	80042f0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_InitTick>:
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	2300      	movs	r3, #0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	2032      	movs	r0, #50	; 0x32
 8001f9e:	f7fe fcaf 	bl	8000900 <HAL_NVIC_SetPriority>
 8001fa2:	2032      	movs	r0, #50	; 0x32
 8001fa4:	f7fe fcc8 	bl	8000938 <HAL_NVIC_EnableIRQ>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_InitTick+0xa4>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_InitTick+0xa4>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_InitTick+0xa4>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f107 0210 	add.w	r2, r7, #16
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fada 	bl	8001588 <HAL_RCC_GetClockConfig>
 8001fd4:	f7ff fac4 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_InitTick+0xa8>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_InitTick+0xac>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_InitTick+0xb0>)
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_InitTick+0xac>)
 8001ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_InitTick+0xac>)
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	6053      	str	r3, [r2, #4]
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_InitTick+0xac>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_InitTick+0xac>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <HAL_InitTick+0xac>)
 800200e:	f7ff faed 	bl	80015ec <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_InitTick+0x9a>
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <HAL_InitTick+0xac>)
 800201a:	f7ff fb1c 	bl	8001656 <HAL_TIM_Base_Start_IT>
 800201e:	4603      	mov	r3, r0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x9c>
 8002022:	2301      	movs	r3, #1
 8002024:	4618      	mov	r0, r3
 8002026:	3730      	adds	r7, #48	; 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	431bde83 	.word	0x431bde83
 8002034:	2001a770 	.word	0x2001a770
 8002038:	40000c00 	.word	0x40000c00

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <TIM5_IRQHandler+0x10>)
 8002076:	f7ff fb12 	bl	800169e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2001a770 	.word	0x2001a770

08002084 <SystemInit>:
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <SystemInit+0x28>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	4a07      	ldr	r2, [pc, #28]	; (80020ac <SystemInit+0x28>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SystemInit+0x28>)
 800209a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <Reset_Handler>:
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e8 <LoopFillZerobss+0x14>
 80020b4:	2100      	movs	r1, #0
 80020b6:	e003      	b.n	80020c0 <LoopCopyDataInit>

080020b8 <CopyDataInit>:
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <LoopFillZerobss+0x18>)
 80020ba:	585b      	ldr	r3, [r3, r1]
 80020bc:	5043      	str	r3, [r0, r1]
 80020be:	3104      	adds	r1, #4

080020c0 <LoopCopyDataInit>:
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <LoopFillZerobss+0x1c>)
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <LoopFillZerobss+0x20>)
 80020c4:	1842      	adds	r2, r0, r1
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3f6      	bcc.n	80020b8 <CopyDataInit>
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <LoopFillZerobss+0x24>)
 80020cc:	e002      	b.n	80020d4 <LoopFillZerobss>

080020ce <FillZerobss>:
 80020ce:	2300      	movs	r3, #0
 80020d0:	f842 3b04 	str.w	r3, [r2], #4

080020d4 <LoopFillZerobss>:
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <LoopFillZerobss+0x28>)
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d3f9      	bcc.n	80020ce <FillZerobss>
 80020da:	f7ff ffd3 	bl	8002084 <SystemInit>
 80020de:	f004 f973 	bl	80063c8 <__libc_init_array>
 80020e2:	f7ff fcc1 	bl	8001a68 <main>
 80020e6:	4770      	bx	lr
 80020e8:	20020000 	.word	0x20020000
 80020ec:	080065c8 	.word	0x080065c8
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000014 	.word	0x20000014
 80020f8:	20000014 	.word	0x20000014
 80020fc:	2001a898 	.word	0x2001a898

08002100 <ADC_IRQHandler>:
 8002100:	e7fe      	b.n	8002100 <ADC_IRQHandler>

08002102 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 0208 	add.w	r2, r3, #8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0208 	add.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f103 0208 	add.w	r2, r3, #8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d103      	bne.n	80021c4 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e00c      	b.n	80021de <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3308      	adds	r3, #8
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e002      	b.n	80021d2 <vListInsert+0x2e>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d2f6      	bcs.n	80021cc <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	601a      	str	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6892      	ldr	r2, [r2, #8]
 800222c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6852      	ldr	r2, [r2, #4]
 8002236:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	d103      	bne.n	800224a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <xQueueGenericReset+0x28>
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	e7fe      	b.n	8002292 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002294:	f002 f8a6 	bl	80043e4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	441a      	add	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	3b01      	subs	r3, #1
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	441a      	add	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	22ff      	movs	r2, #255	; 0xff
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d114      	bne.n	8002314 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01a      	beq.n	8002328 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3310      	adds	r3, #16
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 f912 	bl	8003520 <xTaskRemoveFromEventList>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d012      	beq.n	8002328 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <xQueueGenericReset+0xcc>)
 8002304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	e009      	b.n	8002328 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3310      	adds	r3, #16
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fef2 	bl	8002102 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3324      	adds	r3, #36	; 0x24
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff feed 	bl	8002102 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002328:	f002 f88a 	bl	8004440 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800232c:	2301      	movs	r3, #1
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000ed04 	.word	0xe000ed04

0800233c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	; 0x30
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <xQueueGenericCreate+0x28>
 8002350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	e7fe      	b.n	8002362 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <xQueueGenericCreate+0x46>
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	429a      	cmp	r2, r3
 8002380:	d101      	bne.n	8002386 <xQueueGenericCreate+0x4a>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <xQueueGenericCreate+0x4c>
 8002386:	2300      	movs	r3, #0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <xQueueGenericCreate+0x64>
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e7fe      	b.n	800239e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023a6:	d909      	bls.n	80023bc <xQueueGenericCreate+0x80>
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	e7fe      	b.n	80023ba <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	3350      	adds	r3, #80	; 0x50
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 f92f 	bl	8004624 <pvPortMalloc>
 80023c6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3350      	adds	r3, #80	; 0x50
 80023d6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f805 	bl	80023f4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023ea:	6a3b      	ldr	r3, [r7, #32]
    }
 80023ec:	4618      	mov	r0, r3
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e002      	b.n	8002416 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002422:	2101      	movs	r1, #1
 8002424:	69b8      	ldr	r0, [r7, #24]
 8002426:	f7ff ff21 	bl	800226c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	68f9      	ldr	r1, [r7, #12]
 8002438:	2073      	movs	r0, #115	; 0x73
 800243a:	f003 f8f3 	bl	8005624 <SEGGER_SYSVIEW_RecordU32x3>
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b090      	sub	sp, #64	; 0x40
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <xQueueGenericSend+0x30>
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
 8002476:	e7fe      	b.n	8002476 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <xQueueGenericSend+0x3e>
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <xQueueGenericSend+0x42>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <xQueueGenericSend+0x44>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <xQueueGenericSend+0x5c>
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	e7fe      	b.n	80024a2 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d103      	bne.n	80024b2 <xQueueGenericSend+0x6a>
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <xQueueGenericSend+0x6e>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <xQueueGenericSend+0x70>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <xQueueGenericSend+0x88>
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	623b      	str	r3, [r7, #32]
 80024ce:	e7fe      	b.n	80024ce <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024d0:	f001 f9c2 	bl	8003858 <xTaskGetSchedulerState>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <xQueueGenericSend+0x98>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <xQueueGenericSend+0x9c>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <xQueueGenericSend+0x9e>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <xQueueGenericSend+0xb6>
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	e7fe      	b.n	80024fc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024fe:	f001 ff71 	bl	80043e4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <xQueueGenericSend+0xcc>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d136      	bne.n	8002582 <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fe0e 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	460b      	mov	r3, r1
 8002526:	4601      	mov	r1, r0
 8002528:	205a      	movs	r0, #90	; 0x5a
 800252a:	f003 f8f1 	bl	8005710 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002534:	f000 fa78 	bl	8002a28 <prvCopyDataToQueue>
 8002538:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	3324      	adds	r3, #36	; 0x24
 8002546:	4618      	mov	r0, r3
 8002548:	f000 ffea 	bl	8003520 <xTaskRemoveFromEventList>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d013      	beq.n	800257a <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002552:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <xQueueGenericSend+0x240>)
 8002554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	e00a      	b.n	800257a <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <xQueueGenericSend+0x240>)
 800256c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800257a:	f001 ff61 	bl	8004440 <vPortExitCritical>
                return pdPASS;
 800257e:	2301      	movs	r3, #1
 8002580:	e07d      	b.n	800267e <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d110      	bne.n	80025aa <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002588:	f001 ff5a 	bl	8004440 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fdd2 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	4601      	mov	r1, r0
 80025a0:	205a      	movs	r0, #90	; 0x5a
 80025a2:	f003 f8b5 	bl	8005710 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e069      	b.n	800267e <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d106      	bne.n	80025be <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 f819 	bl	80035ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025be:	f001 ff3f 	bl	8004440 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025c2:	f000 fd67 	bl	8003094 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025c6:	f001 ff0d 	bl	80043e4 <vPortEnterCritical>
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d6:	d103      	bne.n	80025e0 <xQueueGenericSend+0x198>
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d103      	bne.n	80025f6 <xQueueGenericSend+0x1ae>
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025f6:	f001 ff23 	bl	8004440 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025fa:	1d3a      	adds	r2, r7, #4
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f001 f808 	bl	8003618 <xTaskCheckForTimeOut>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d124      	bne.n	8002658 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800260e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002610:	f000 fb02 	bl	8002c18 <prvIsQueueFull>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d018      	beq.n	800264c <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	3310      	adds	r3, #16
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f000 ff2a 	bl	800347c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800262a:	f000 fa8d 	bl	8002b48 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800262e:	f000 fd3f 	bl	80030b0 <xTaskResumeAll>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f47f af62 	bne.w	80024fe <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <xQueueGenericSend+0x240>)
 800263c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	e758      	b.n	80024fe <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800264c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264e:	f000 fa7b 	bl	8002b48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002652:	f000 fd2d 	bl	80030b0 <xTaskResumeAll>
 8002656:	e752      	b.n	80024fe <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800265a:	f000 fa75 	bl	8002b48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800265e:	f000 fd27 	bl	80030b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fd67 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	460b      	mov	r3, r1
 8002674:	4601      	mov	r1, r0
 8002676:	205a      	movs	r0, #90	; 0x5a
 8002678:	f003 f84a 	bl	8005710 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800267c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800267e:	4618      	mov	r0, r3
 8002680:	3738      	adds	r7, #56	; 0x38
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b090      	sub	sp, #64	; 0x40
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <xQueueGenericSendFromISR+0x2c>
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b6:	e7fe      	b.n	80026b6 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <xQueueGenericSendFromISR+0x3a>
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <xQueueGenericSendFromISR+0x3e>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <xQueueGenericSendFromISR+0x40>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <xQueueGenericSendFromISR+0x58>
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	e7fe      	b.n	80026e2 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d103      	bne.n	80026f2 <xQueueGenericSendFromISR+0x66>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <xQueueGenericSendFromISR+0x6a>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <xQueueGenericSendFromISR+0x6c>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <xQueueGenericSendFromISR+0x84>
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	623b      	str	r3, [r7, #32]
 800270e:	e7fe      	b.n	800270e <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002710:	f001 ff4a 	bl	80045a8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002714:	f3ef 8211 	mrs	r2, BASEPRI
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	61fa      	str	r2, [r7, #28]
 800272a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800272c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	429a      	cmp	r2, r3
 800273a:	d302      	bcc.n	8002742 <xQueueGenericSendFromISR+0xb6>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d147      	bne.n	80027d2 <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002748:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fcef 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 800275a:	4601      	mov	r1, r0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	461a      	mov	r2, r3
 8002760:	2060      	movs	r0, #96	; 0x60
 8002762:	f002 ff05 	bl	8005570 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800276c:	f000 f95c 	bl	8002a28 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002770:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d112      	bne.n	80027a0 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d024      	beq.n	80027cc <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	3324      	adds	r3, #36	; 0x24
 8002786:	4618      	mov	r0, r3
 8002788:	f000 feca 	bl	8003520 <xTaskRemoveFromEventList>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01c      	beq.n	80027cc <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d019      	beq.n	80027cc <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e015      	b.n	80027cc <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027a4:	2b7f      	cmp	r3, #127	; 0x7f
 80027a6:	d109      	bne.n	80027bc <xQueueGenericSendFromISR+0x130>
        __asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	e7fe      	b.n	80027ba <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027c0:	3301      	adds	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027cc:	2301      	movs	r3, #1
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80027d0:	e00b      	b.n	80027ea <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 fcaf 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 80027da:	4601      	mov	r1, r0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	2060      	movs	r0, #96	; 0x60
 80027e2:	f002 fec5 	bl	8005570 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3740      	adds	r7, #64	; 0x40
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b08f      	sub	sp, #60	; 0x3c
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <xQueueReceive+0x2e>
        __asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	623b      	str	r3, [r7, #32]
 800282c:	e7fe      	b.n	800282c <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <xQueueReceive+0x3c>
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <xQueueReceive+0x40>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <xQueueReceive+0x42>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <xQueueReceive+0x5a>
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	e7fe      	b.n	8002858 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800285a:	f000 fffd 	bl	8003858 <xTaskGetSchedulerState>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <xQueueReceive+0x6a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <xQueueReceive+0x6e>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueReceive+0x70>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <xQueueReceive+0x88>
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e7fe      	b.n	8002886 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002888:	f001 fdac 	bl	80043e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	d031      	beq.n	80028fc <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289c:	f000 f92e 	bl	8002afc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fc48 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 80028a8:	4604      	mov	r4, r0
 80028aa:	2000      	movs	r0, #0
 80028ac:	f003 fc44 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 80028b0:	4601      	mov	r1, r0
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	2301      	movs	r3, #1
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	460a      	mov	r2, r1
 80028bc:	4621      	mov	r1, r4
 80028be:	205c      	movs	r0, #92	; 0x5c
 80028c0:	f002 ff26 	bl	8005710 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00f      	beq.n	80028f4 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	3310      	adds	r3, #16
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fe21 	bl	8003520 <xTaskRemoveFromEventList>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80028e4:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <xQueueReceive+0x224>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028f4:	f001 fda4 	bl	8004440 <vPortExitCritical>
                return pdPASS;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e08e      	b.n	8002a1a <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d115      	bne.n	800292e <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002902:	f001 fd9d 	bl	8004440 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fc15 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 800290e:	4604      	mov	r4, r0
 8002910:	2000      	movs	r0, #0
 8002912:	f003 fc11 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 8002916:	4601      	mov	r1, r0
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	2301      	movs	r3, #1
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	460a      	mov	r2, r1
 8002922:	4621      	mov	r1, r4
 8002924:	205c      	movs	r0, #92	; 0x5c
 8002926:	f002 fef3 	bl	8005710 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800292a:	2300      	movs	r3, #0
 800292c:	e075      	b.n	8002a1a <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fe57 	bl	80035ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800293e:	2301      	movs	r3, #1
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002942:	f001 fd7d 	bl	8004440 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002946:	f000 fba5 	bl	8003094 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800294a:	f001 fd4b 	bl	80043e4 <vPortEnterCritical>
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002954:	b25b      	sxtb	r3, r3
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d103      	bne.n	8002964 <xQueueReceive+0x164>
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296a:	b25b      	sxtb	r3, r3
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d103      	bne.n	800297a <xQueueReceive+0x17a>
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297a:	f001 fd61 	bl	8004440 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800297e:	1d3a      	adds	r2, r7, #4
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fe46 	bl	8003618 <xTaskCheckForTimeOut>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d124      	bne.n	80029dc <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002994:	f000 f92a 	bl	8002bec <prvIsQueueEmpty>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d018      	beq.n	80029d0 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	3324      	adds	r3, #36	; 0x24
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fd68 	bl	800347c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ae:	f000 f8cb 	bl	8002b48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029b2:	f000 fb7d 	bl	80030b0 <xTaskResumeAll>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f af65 	bne.w	8002888 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <xQueueReceive+0x224>)
 80029c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	e75b      	b.n	8002888 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d2:	f000 f8b9 	bl	8002b48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029d6:	f000 fb6b 	bl	80030b0 <xTaskResumeAll>
 80029da:	e755      	b.n	8002888 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029de:	f000 f8b3 	bl	8002b48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029e2:	f000 fb65 	bl	80030b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e8:	f000 f900 	bl	8002bec <prvIsQueueEmpty>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f43f af4a 	beq.w	8002888 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fb9e 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 80029fc:	4604      	mov	r4, r0
 80029fe:	2000      	movs	r0, #0
 8002a00:	f003 fb9a 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 8002a04:	4601      	mov	r1, r0
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	460a      	mov	r2, r1
 8002a10:	4621      	mov	r1, r4
 8002a12:	205c      	movs	r0, #92	; 0x5c
 8002a14:	f002 fe7c 	bl	8005710 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a18:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3734      	adds	r7, #52	; 0x34
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d14d      	bne.n	8002aea <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 ff1e 	bl	8003894 <xTaskPriorityDisinherit>
 8002a58:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e043      	b.n	8002aea <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d119      	bne.n	8002a9c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6858      	ldr	r0, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	461a      	mov	r2, r3
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	f003 fcdb 	bl	800642e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	441a      	add	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d32b      	bcc.n	8002aea <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e026      	b.n	8002aea <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68d8      	ldr	r0, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	f003 fcc1 	bl	800642e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	425b      	negs	r3, r3
 8002ab6:	441a      	add	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	441a      	add	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d105      	bne.n	8002aea <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002af2:	697b      	ldr	r3, [r7, #20]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	441a      	add	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d303      	bcc.n	8002b30 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68d9      	ldr	r1, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f003 fc77 	bl	800642e <memcpy>
    }
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b50:	f001 fc48 	bl	80043e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b5a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b5c:	e011      	b.n	8002b82 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d012      	beq.n	8002b8c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3324      	adds	r3, #36	; 0x24
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fcd8 	bl	8003520 <xTaskRemoveFromEventList>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b76:	f000 fdb3 	bl	80036e0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	dce9      	bgt.n	8002b5e <prvUnlockQueue+0x16>
 8002b8a:	e000      	b.n	8002b8e <prvUnlockQueue+0x46>
                        break;
 8002b8c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b96:	f001 fc53 	bl	8004440 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b9a:	f001 fc23 	bl	80043e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ba6:	e011      	b.n	8002bcc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fcb3 	bl	8003520 <xTaskRemoveFromEventList>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bc0:	f000 fd8e 	bl	80036e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	dce9      	bgt.n	8002ba8 <prvUnlockQueue+0x60>
 8002bd4:	e000      	b.n	8002bd8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bd6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002be0:	f001 fc2e 	bl	8004440 <vPortExitCritical>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bf4:	f001 fbf6 	bl	80043e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e001      	b.n	8002c0a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c0a:	f001 fc19 	bl	8004440 <vPortExitCritical>

    return xReturn;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c20:	f001 fbe0 	bl	80043e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d102      	bne.n	8002c36 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e001      	b.n	8002c3a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c3a:	f001 fc01 	bl	8004440 <vPortExitCritical>

    return xReturn;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e01e      	b.n	8002c96 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <vQueueAddToRegistry+0x5c>)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d115      	bne.n	8002c90 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c64:	490f      	ldr	r1, [pc, #60]	; (8002ca4 <vQueueAddToRegistry+0x5c>)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <vQueueAddToRegistry+0x5c>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fa5b 	bl	8006138 <SEGGER_SYSVIEW_ShrinkId>
 8002c82:	4601      	mov	r1, r0
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	2071      	movs	r0, #113	; 0x71
 8002c8a:	f002 fc71 	bl	8005570 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c8e:	e005      	b.n	8002c9c <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b07      	cmp	r3, #7
 8002c9a:	d9dd      	bls.n	8002c58 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2001a7b0 	.word	0x2001a7b0

08002ca8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cb8:	f001 fb94 	bl	80043e4 <vPortEnterCritical>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d103      	bne.n	8002cd2 <vQueueWaitForMessageRestricted+0x2a>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <vQueueWaitForMessageRestricted+0x40>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce8:	f001 fbaa 	bl	8004440 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3324      	adds	r3, #36	; 0x24
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fbe1 	bl	80034c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff20 	bl	8002b48 <prvUnlockQueue>
    }
 8002d08:	bf00      	nop
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af04      	add	r7, sp, #16
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 fc7d 	bl	8004624 <pvPortMalloc>
 8002d2a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d32:	2058      	movs	r0, #88	; 0x58
 8002d34:	f001 fc76 	bl	8004624 <pvPortMalloc>
 8002d38:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
 8002d46:	e005      	b.n	8002d54 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d48:	6978      	ldr	r0, [r7, #20]
 8002d4a:	f001 fd47 	bl	80047dc <vPortFree>
 8002d4e:	e001      	b.n	8002d54 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d013      	beq.n	8002d82 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f80e 	bl	8002d92 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d76:	69f8      	ldr	r0, [r7, #28]
 8002d78:	f000 f8a0 	bl	8002ebc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e002      	b.n	8002d88 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
 8002d86:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d88:	69bb      	ldr	r3, [r7, #24]
    }
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b088      	sub	sp, #32
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	461a      	mov	r2, r3
 8002daa:	21a5      	movs	r1, #165	; 0xa5
 8002dac:	f003 fb4a 	bl	8006444 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f023 0307 	bic.w	r3, r3, #7
 8002dc8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <prvInitialiseNewTask+0x56>
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e7fe      	b.n	8002de6 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d01f      	beq.n	8002e2e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e012      	b.n	8002e1a <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	7819      	ldrb	r1, [r3, #0]
 8002dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	3334      	adds	r3, #52	; 0x34
 8002e04:	460a      	mov	r2, r1
 8002e06:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	3301      	adds	r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	2b09      	cmp	r3, #9
 8002e1e:	d9e9      	bls.n	8002df4 <prvInitialiseNewTask+0x62>
 8002e20:	e000      	b.n	8002e24 <prvInitialiseNewTask+0x92>
            {
                break;
 8002e22:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e2c:	e003      	b.n	8002e36 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d901      	bls.n	8002e40 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	2200      	movs	r2, #0
 8002e50:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	3304      	adds	r3, #4
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f973 	bl	8002142 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	3318      	adds	r3, #24
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f96e 	bl	8002142 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	f1c3 0205 	rsb	r2, r3, #5
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	3350      	adds	r3, #80	; 0x50
 8002e80:	2204      	movs	r2, #4
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fadd 	bl	8006444 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	3354      	adds	r3, #84	; 0x54
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 fad6 	bl	8006444 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	69b8      	ldr	r0, [r7, #24]
 8002e9e:	f001 f8fd 	bl	800409c <pxPortInitialiseStack>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eb4:	bf00      	nop
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ebc:	b5b0      	push	{r4, r5, r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ec4:	f001 fa8e 	bl	80043e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <prvAddNewTaskToReadyList+0xfc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	4a3a      	ldr	r2, [pc, #232]	; (8002fb8 <prvAddNewTaskToReadyList+0xfc>)
 8002ed0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <prvAddNewTaskToReadyList+0x100>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002eda:	4a38      	ldr	r2, [pc, #224]	; (8002fbc <prvAddNewTaskToReadyList+0x100>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <prvAddNewTaskToReadyList+0xfc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d110      	bne.n	8002f0a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ee8:	f000 fc1e 	bl	8003728 <prvInitialiseTaskLists>
 8002eec:	e00d      	b.n	8002f0a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002eee:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <prvAddNewTaskToReadyList+0x104>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ef6:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <prvAddNewTaskToReadyList+0x100>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d802      	bhi.n	8002f0a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f04:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <prvAddNewTaskToReadyList+0x100>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f0a:	4b2e      	ldr	r3, [pc, #184]	; (8002fc4 <prvAddNewTaskToReadyList+0x108>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <prvAddNewTaskToReadyList+0x108>)
 8002f12:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <prvAddNewTaskToReadyList+0x108>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <prvAddNewTaskToReadyList+0x94>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 ffe1 	bl	8005eec <SEGGER_SYSVIEW_OnTaskCreate>
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461c      	mov	r4, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	1ae3      	subs	r3, r4, r3
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	f001 fe0a 	bl	8004b64 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 f84e 	bl	8005ff4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <prvAddNewTaskToReadyList+0x10c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <prvAddNewTaskToReadyList+0x10c>)
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <prvAddNewTaskToReadyList+0x110>)
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4610      	mov	r0, r2
 8002f82:	f7ff f8eb 	bl	800215c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f86:	f001 fa5b 	bl	8004440 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <prvAddNewTaskToReadyList+0x104>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <prvAddNewTaskToReadyList+0x100>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <prvAddNewTaskToReadyList+0x114>)
 8002fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb8:	2000010c 	.word	0x2000010c
 8002fbc:	20000034 	.word	0x20000034
 8002fc0:	20000118 	.word	0x20000118
 8002fc4:	20000128 	.word	0x20000128
 8002fc8:	20000114 	.word	0x20000114
 8002fcc:	20000038 	.word	0x20000038
 8002fd0:	e000ed04 	.word	0xe000ed04

08002fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <vTaskStartScheduler+0xa0>)
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2282      	movs	r2, #130	; 0x82
 8002fe6:	4924      	ldr	r1, [pc, #144]	; (8003078 <vTaskStartScheduler+0xa4>)
 8002fe8:	4824      	ldr	r0, [pc, #144]	; (800307c <vTaskStartScheduler+0xa8>)
 8002fea:	f7ff fe91 	bl	8002d10 <xTaskCreate>
 8002fee:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002ff6:	f000 fd43 	bl	8003a80 <xTimerCreateTimerTask>
 8002ffa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d123      	bne.n	800304a <vTaskStartScheduler+0x76>
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <vTaskStartScheduler+0xac>)
 8003016:	f04f 32ff 	mov.w	r2, #4294967295
 800301a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <vTaskStartScheduler+0xb0>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <vTaskStartScheduler+0xb4>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <vTaskStartScheduler+0xb8>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <vTaskStartScheduler+0xa0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d102      	bne.n	800303a <vTaskStartScheduler+0x66>
 8003034:	f002 ff3e 	bl	8005eb4 <SEGGER_SYSVIEW_OnIdle>
 8003038:	e004      	b.n	8003044 <vTaskStartScheduler+0x70>
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <vTaskStartScheduler+0xb8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f002 ff96 	bl	8005f70 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003044:	f001 f8b6 	bl	80041b4 <xPortStartScheduler>
 8003048:	e00d      	b.n	8003066 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d109      	bne.n	8003066 <vTaskStartScheduler+0x92>
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	e7fe      	b.n	8003064 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <vTaskStartScheduler+0xbc>)
 8003068:	681b      	ldr	r3, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000130 	.word	0x20000130
 8003078:	080064a8 	.word	0x080064a8
 800307c:	080036f9 	.word	0x080036f9
 8003080:	2000012c 	.word	0x2000012c
 8003084:	20000118 	.word	0x20000118
 8003088:	20000110 	.word	0x20000110
 800308c:	20000034 	.word	0x20000034
 8003090:	2000000c 	.word	0x2000000c

08003094 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <vTaskSuspendAll+0x18>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	4a03      	ldr	r2, [pc, #12]	; (80030ac <vTaskSuspendAll+0x18>)
 80030a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20000134 	.word	0x20000134

080030b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030be:	4b43      	ldr	r3, [pc, #268]	; (80031cc <xTaskResumeAll+0x11c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <xTaskResumeAll+0x2a>
 80030c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	e7fe      	b.n	80030d8 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030da:	f001 f983 	bl	80043e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <xTaskResumeAll+0x11c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	4a39      	ldr	r2, [pc, #228]	; (80031cc <xTaskResumeAll+0x11c>)
 80030e6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030e8:	4b38      	ldr	r3, [pc, #224]	; (80031cc <xTaskResumeAll+0x11c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d165      	bne.n	80031bc <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030f0:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <xTaskResumeAll+0x120>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d061      	beq.n	80031bc <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f8:	e032      	b.n	8003160 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <xTaskResumeAll+0x124>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3318      	adds	r3, #24
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f885 	bl	8002216 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3304      	adds	r3, #4
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f880 	bl	8002216 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4618      	mov	r0, r3
 800311a:	f002 ff6b 	bl	8005ff4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	2201      	movs	r2, #1
 8003124:	409a      	lsls	r2, r3
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <xTaskResumeAll+0x128>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <xTaskResumeAll+0x128>)
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <xTaskResumeAll+0x12c>)
 800313e:	441a      	add	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f7ff f808 	bl	800215c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <xTaskResumeAll+0x130>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <xTaskResumeAll+0x134>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <xTaskResumeAll+0x124>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1c8      	bne.n	80030fa <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800316e:	f000 fb57 	bl	8003820 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <xTaskResumeAll+0x138>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800317e:	f000 f859 	bl	8003234 <xTaskIncrementTick>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <xTaskResumeAll+0x134>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3b01      	subs	r3, #1
 8003192:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f1      	bne.n	800317e <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <xTaskResumeAll+0x138>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <xTaskResumeAll+0x134>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <xTaskResumeAll+0x13c>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031bc:	f001 f940 	bl	8004440 <vPortExitCritical>

    return xAlreadyYielded;
 80031c0:	68bb      	ldr	r3, [r7, #8]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000134 	.word	0x20000134
 80031d0:	2000010c 	.word	0x2000010c
 80031d4:	200000cc 	.word	0x200000cc
 80031d8:	20000114 	.word	0x20000114
 80031dc:	20000038 	.word	0x20000038
 80031e0:	20000034 	.word	0x20000034
 80031e4:	20000120 	.word	0x20000120
 80031e8:	2000011c 	.word	0x2000011c
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <xTaskGetTickCount+0x1c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031fc:	687b      	ldr	r3, [r7, #4]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000110 	.word	0x20000110

08003210 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003216:	f001 f9c7 	bl	80045a8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <xTaskGetTickCountFromISR+0x20>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003224:	683b      	ldr	r3, [r7, #0]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000110 	.word	0x20000110

08003234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800323e:	4b50      	ldr	r3, [pc, #320]	; (8003380 <xTaskIncrementTick+0x14c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8091 	bne.w	800336a <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003248:	4b4e      	ldr	r3, [pc, #312]	; (8003384 <xTaskIncrementTick+0x150>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003250:	4a4c      	ldr	r2, [pc, #304]	; (8003384 <xTaskIncrementTick+0x150>)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11f      	bne.n	800329c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800325c:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <xTaskIncrementTick+0x154>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <xTaskIncrementTick+0x46>
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	e7fe      	b.n	8003278 <xTaskIncrementTick+0x44>
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <xTaskIncrementTick+0x154>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <xTaskIncrementTick+0x158>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a40      	ldr	r2, [pc, #256]	; (8003388 <xTaskIncrementTick+0x154>)
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4a40      	ldr	r2, [pc, #256]	; (800338c <xTaskIncrementTick+0x158>)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b40      	ldr	r3, [pc, #256]	; (8003390 <xTaskIncrementTick+0x15c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3301      	adds	r3, #1
 8003294:	4a3e      	ldr	r2, [pc, #248]	; (8003390 <xTaskIncrementTick+0x15c>)
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	f000 fac2 	bl	8003820 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800329c:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <xTaskIncrementTick+0x160>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d34c      	bcc.n	8003340 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <xTaskIncrementTick+0x154>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <xTaskIncrementTick+0x160>)
 80032b2:	f04f 32ff 	mov.w	r2, #4294967295
 80032b6:	601a      	str	r2, [r3, #0]
                    break;
 80032b8:	e042      	b.n	8003340 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <xTaskIncrementTick+0x154>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d203      	bcs.n	80032da <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032d2:	4a30      	ldr	r2, [pc, #192]	; (8003394 <xTaskIncrementTick+0x160>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032d8:	e032      	b.n	8003340 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	3304      	adds	r3, #4
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe ff99 	bl	8002216 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d004      	beq.n	80032f6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3318      	adds	r3, #24
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe ff90 	bl	8002216 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fe7b 	bl	8005ff4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	2201      	movs	r2, #1
 8003304:	409a      	lsls	r2, r3
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <xTaskIncrementTick+0x164>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4313      	orrs	r3, r2
 800330c:	4a22      	ldr	r2, [pc, #136]	; (8003398 <xTaskIncrementTick+0x164>)
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4a1f      	ldr	r2, [pc, #124]	; (800339c <xTaskIncrementTick+0x168>)
 800331e:	441a      	add	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7fe ff18 	bl	800215c <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <xTaskIncrementTick+0x16c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	429a      	cmp	r2, r3
 8003338:	d3b5      	bcc.n	80032a6 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800333a:	2301      	movs	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800333e:	e7b2      	b.n	80032a6 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003340:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <xTaskIncrementTick+0x16c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003346:	4915      	ldr	r1, [pc, #84]	; (800339c <xTaskIncrementTick+0x168>)
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d901      	bls.n	800335c <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <xTaskIncrementTick+0x170>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8003364:	2301      	movs	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e004      	b.n	8003374 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <xTaskIncrementTick+0x174>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <xTaskIncrementTick+0x174>)
 8003372:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003374:	697b      	ldr	r3, [r7, #20]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000134 	.word	0x20000134
 8003384:	20000110 	.word	0x20000110
 8003388:	200000c4 	.word	0x200000c4
 800338c:	200000c8 	.word	0x200000c8
 8003390:	20000124 	.word	0x20000124
 8003394:	2000012c 	.word	0x2000012c
 8003398:	20000114 	.word	0x20000114
 800339c:	20000038 	.word	0x20000038
 80033a0:	20000034 	.word	0x20000034
 80033a4:	20000120 	.word	0x20000120
 80033a8:	2000011c 	.word	0x2000011c

080033ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033b2:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <vTaskSwitchContext+0xb8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033ba:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <vTaskSwitchContext+0xbc>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033c0:	e04c      	b.n	800345c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80033c2:	4b29      	ldr	r3, [pc, #164]	; (8003468 <vTaskSwitchContext+0xbc>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <vTaskSwitchContext+0xc0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	f1c3 031f 	rsb	r3, r3, #31
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	4924      	ldr	r1, [pc, #144]	; (8003470 <vTaskSwitchContext+0xc4>)
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <vTaskSwitchContext+0x5a>
        __asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	e7fe      	b.n	8003404 <vTaskSwitchContext+0x58>
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4a17      	ldr	r2, [pc, #92]	; (8003470 <vTaskSwitchContext+0xc4>)
 8003412:	4413      	add	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	3308      	adds	r3, #8
 8003428:	429a      	cmp	r2, r3
 800342a:	d104      	bne.n	8003436 <vTaskSwitchContext+0x8a>
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <vTaskSwitchContext+0xc8>)
 800343e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <vTaskSwitchContext+0xc8>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <vTaskSwitchContext+0xcc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d102      	bne.n	8003452 <vTaskSwitchContext+0xa6>
 800344c:	f002 fd32 	bl	8005eb4 <SEGGER_SYSVIEW_OnIdle>
}
 8003450:	e004      	b.n	800345c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <vTaskSwitchContext+0xc8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f002 fd8a 	bl	8005f70 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000134 	.word	0x20000134
 8003468:	20000120 	.word	0x20000120
 800346c:	20000114 	.word	0x20000114
 8003470:	20000038 	.word	0x20000038
 8003474:	20000034 	.word	0x20000034
 8003478:	20000130 	.word	0x20000130

0800347c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <vTaskPlaceOnEventList+0x24>
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	e7fe      	b.n	800349e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <vTaskPlaceOnEventList+0x44>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3318      	adds	r3, #24
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fe fe7b 	bl	80021a4 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034ae:	2101      	movs	r1, #1
 80034b0:	6838      	ldr	r0, [r7, #0]
 80034b2:	f000 fa6d 	bl	8003990 <prvAddCurrentTaskToDelayedList>
}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000034 	.word	0x20000034

080034c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <vTaskPlaceOnEventListRestricted+0x26>
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	e7fe      	b.n	80034e8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <vTaskPlaceOnEventListRestricted+0x58>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3318      	adds	r3, #24
 80034f0:	4619      	mov	r1, r3
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7fe fe32 	bl	800215c <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003504:	2024      	movs	r0, #36	; 0x24
 8003506:	f001 ffd9 	bl	80054bc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	68b8      	ldr	r0, [r7, #8]
 800350e:	f000 fa3f 	bl	8003990 <prvAddCurrentTaskToDelayedList>
    }
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000034 	.word	0x20000034

08003520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <xTaskRemoveFromEventList+0x2a>
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e7fe      	b.n	8003548 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	3318      	adds	r3, #24
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe fe61 	bl	8002216 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <xTaskRemoveFromEventList+0xb4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d120      	bne.n	800359e <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	3304      	adds	r3, #4
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe fe58 	bl	8002216 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4618      	mov	r0, r3
 800356a:	f002 fd43 	bl	8005ff4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	2201      	movs	r2, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <xTaskRemoveFromEventList+0xb8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <xTaskRemoveFromEventList+0xb8>)
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4a13      	ldr	r2, [pc, #76]	; (80035dc <xTaskRemoveFromEventList+0xbc>)
 800358e:	441a      	add	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7fe fde0 	bl	800215c <vListInsertEnd>
 800359c:	e005      	b.n	80035aa <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3318      	adds	r3, #24
 80035a2:	4619      	mov	r1, r3
 80035a4:	480e      	ldr	r0, [pc, #56]	; (80035e0 <xTaskRemoveFromEventList+0xc0>)
 80035a6:	f7fe fdd9 	bl	800215c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <xTaskRemoveFromEventList+0xc4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d905      	bls.n	80035c4 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <xTaskRemoveFromEventList+0xc8>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e001      	b.n	80035c8 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80035c8:	697b      	ldr	r3, [r7, #20]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000134 	.word	0x20000134
 80035d8:	20000114 	.word	0x20000114
 80035dc:	20000038 	.word	0x20000038
 80035e0:	200000cc 	.word	0x200000cc
 80035e4:	20000034 	.word	0x20000034
 80035e8:	20000120 	.word	0x20000120

080035ec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <vTaskInternalSetTimeOutState+0x24>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <vTaskInternalSetTimeOutState+0x28>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	20000124 	.word	0x20000124
 8003614:	20000110 	.word	0x20000110

08003618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <xTaskCheckForTimeOut+0x24>
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	e7fe      	b.n	800363a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <xTaskCheckForTimeOut+0x3e>
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e7fe      	b.n	8003654 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003656:	f000 fec5 	bl	80043e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800365a:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <xTaskCheckForTimeOut+0xc0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d102      	bne.n	800367a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e026      	b.n	80036c8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4b17      	ldr	r3, [pc, #92]	; (80036dc <xTaskCheckForTimeOut+0xc4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d00a      	beq.n	800369c <xTaskCheckForTimeOut+0x84>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	429a      	cmp	r2, r3
 800368e:	d305      	bcc.n	800369c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	e015      	b.n	80036c8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d20b      	bcs.n	80036be <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad2      	subs	r2, r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ff9a 	bl	80035ec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e004      	b.n	80036c8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036c4:	2301      	movs	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036c8:	f000 feba 	bl	8004440 <vPortExitCritical>

    return xReturn;
 80036cc:	69fb      	ldr	r3, [r7, #28]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000110 	.word	0x20000110
 80036dc:	20000124 	.word	0x20000124

080036e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <vTaskMissedYield+0x14>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	20000120 	.word	0x20000120

080036f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003700:	f000 f852 	bl	80037a8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <prvIdleTask+0x28>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d9f9      	bls.n	8003700 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <prvIdleTask+0x2c>)
 800370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800371c:	e7f0      	b.n	8003700 <prvIdleTask+0x8>
 800371e:	bf00      	nop
 8003720:	20000038 	.word	0x20000038
 8003724:	e000ed04 	.word	0xe000ed04

08003728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	e00c      	b.n	800374e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4a12      	ldr	r2, [pc, #72]	; (8003788 <prvInitialiseTaskLists+0x60>)
 8003740:	4413      	add	r3, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fcdd 	bl	8002102 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3301      	adds	r3, #1
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d9ef      	bls.n	8003734 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003754:	480d      	ldr	r0, [pc, #52]	; (800378c <prvInitialiseTaskLists+0x64>)
 8003756:	f7fe fcd4 	bl	8002102 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800375a:	480d      	ldr	r0, [pc, #52]	; (8003790 <prvInitialiseTaskLists+0x68>)
 800375c:	f7fe fcd1 	bl	8002102 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003760:	480c      	ldr	r0, [pc, #48]	; (8003794 <prvInitialiseTaskLists+0x6c>)
 8003762:	f7fe fcce 	bl	8002102 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003766:	480c      	ldr	r0, [pc, #48]	; (8003798 <prvInitialiseTaskLists+0x70>)
 8003768:	f7fe fccb 	bl	8002102 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800376c:	480b      	ldr	r0, [pc, #44]	; (800379c <prvInitialiseTaskLists+0x74>)
 800376e:	f7fe fcc8 	bl	8002102 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <prvInitialiseTaskLists+0x78>)
 8003774:	4a05      	ldr	r2, [pc, #20]	; (800378c <prvInitialiseTaskLists+0x64>)
 8003776:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <prvInitialiseTaskLists+0x7c>)
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <prvInitialiseTaskLists+0x68>)
 800377c:	601a      	str	r2, [r3, #0]
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000038 	.word	0x20000038
 800378c:	2000009c 	.word	0x2000009c
 8003790:	200000b0 	.word	0x200000b0
 8003794:	200000cc 	.word	0x200000cc
 8003798:	200000e0 	.word	0x200000e0
 800379c:	200000f8 	.word	0x200000f8
 80037a0:	200000c4 	.word	0x200000c4
 80037a4:	200000c8 	.word	0x200000c8

080037a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ae:	e019      	b.n	80037e4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80037b0:	f000 fe18 	bl	80043e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <prvCheckTasksWaitingTermination+0x4c>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fd28 	bl	8002216 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <prvCheckTasksWaitingTermination+0x50>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <prvCheckTasksWaitingTermination+0x50>)
 80037ce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <prvCheckTasksWaitingTermination+0x54>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <prvCheckTasksWaitingTermination+0x54>)
 80037d8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80037da:	f000 fe31 	bl	8004440 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f80e 	bl	8003800 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <prvCheckTasksWaitingTermination+0x54>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e1      	bne.n	80037b0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200000e0 	.word	0x200000e0
 80037f8:	2000010c 	.word	0x2000010c
 80037fc:	200000f4 	.word	0x200000f4

08003800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	4618      	mov	r0, r3
 800380e:	f000 ffe5 	bl	80047dc <vPortFree>
                vPortFree( pxTCB );
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 ffe2 	bl	80047dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <prvResetNextTaskUnblockTime+0x30>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <prvResetNextTaskUnblockTime+0x34>)
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003836:	e005      	b.n	8003844 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <prvResetNextTaskUnblockTime+0x30>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <prvResetNextTaskUnblockTime+0x34>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	200000c4 	.word	0x200000c4
 8003854:	2000012c 	.word	0x2000012c

08003858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <xTaskGetSchedulerState+0x34>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003866:	2301      	movs	r3, #1
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	e008      	b.n	800387e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <xTaskGetSchedulerState+0x38>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003874:	2302      	movs	r3, #2
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	e001      	b.n	800387e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800387e:	687b      	ldr	r3, [r7, #4]
    }
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	20000118 	.word	0x20000118
 8003890:	20000134 	.word	0x20000134

08003894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d066      	beq.n	8003978 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <xTaskPriorityDisinherit+0xf0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d009      	beq.n	80038c8 <xTaskPriorityDisinherit+0x34>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e7fe      	b.n	80038c6 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <xTaskPriorityDisinherit+0x50>
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	e7fe      	b.n	80038e2 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d03e      	beq.n	8003978 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d13a      	bne.n	8003978 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3304      	adds	r3, #4
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fc85 	bl	8002216 <uxListRemove>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	2201      	movs	r2, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43da      	mvns	r2, r3
 800391e:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <xTaskPriorityDisinherit+0xf4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4013      	ands	r3, r2
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <xTaskPriorityDisinherit+0xf4>)
 8003926:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4619      	mov	r1, r3
 800392c:	204a      	movs	r0, #74	; 0x4a
 800392e:	f001 fde3 	bl	80054f8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	f1c3 0205 	rsb	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	2201      	movs	r2, #1
 800394c:	409a      	lsls	r2, r3
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <xTaskPriorityDisinherit+0xf4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <xTaskPriorityDisinherit+0xf4>)
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4a09      	ldr	r2, [pc, #36]	; (800398c <xTaskPriorityDisinherit+0xf8>)
 8003966:	441a      	add	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f7fe fbf4 	bl	800215c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003974:	2301      	movs	r3, #1
 8003976:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003978:	697b      	ldr	r3, [r7, #20]
    }
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000034 	.word	0x20000034
 8003988:	20000114 	.word	0x20000114
 800398c:	20000038 	.word	0x20000038

08003990 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <prvAddCurrentTaskToDelayedList+0xd4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a0:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fc35 	bl	8002216 <uxListRemove>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039b2:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	2201      	movs	r2, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <prvAddCurrentTaskToDelayedList+0xdc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4013      	ands	r3, r2
 80039c6:	4a29      	ldr	r2, [pc, #164]	; (8003a6c <prvAddCurrentTaskToDelayedList+0xdc>)
 80039c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d110      	bne.n	80039f4 <prvAddCurrentTaskToDelayedList+0x64>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80039d8:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	211b      	movs	r1, #27
 80039de:	4618      	mov	r0, r3
 80039e0:	f002 fb4a 	bl	8006078 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4619      	mov	r1, r3
 80039ec:	4820      	ldr	r0, [pc, #128]	; (8003a70 <prvAddCurrentTaskToDelayedList+0xe0>)
 80039ee:	f7fe fbb5 	bl	800215c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039f2:	e032      	b.n	8003a5a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039fc:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d20f      	bcs.n	8003a2c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003a0c:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2104      	movs	r1, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 fb30 	bl	8006078 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a18:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3304      	adds	r3, #4
 8003a22:	4619      	mov	r1, r3
 8003a24:	4610      	mov	r0, r2
 8003a26:	f7fe fbbd 	bl	80021a4 <vListInsert>
}
 8003a2a:	e016      	b.n	8003a5a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2104      	movs	r1, #4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f002 fb20 	bl	8006078 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f7fe fbad 	bl	80021a4 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a4a:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d202      	bcs.n	8003a5a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a54:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6013      	str	r3, [r2, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000110 	.word	0x20000110
 8003a68:	20000034 	.word	0x20000034
 8003a6c:	20000114 	.word	0x20000114
 8003a70:	200000f8 	.word	0x200000f8
 8003a74:	200000c8 	.word	0x200000c8
 8003a78:	200000c4 	.word	0x200000c4
 8003a7c:	2000012c 	.word	0x2000012c

08003a80 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a8a:	f000 fad1 	bl	8004030 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <xTimerCreateTimerTask+0x54>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <xTimerCreateTimerTask+0x58>)
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003aa4:	490d      	ldr	r1, [pc, #52]	; (8003adc <xTimerCreateTimerTask+0x5c>)
 8003aa6:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <xTimerCreateTimerTask+0x60>)
 8003aa8:	f7ff f932 	bl	8002d10 <xTaskCreate>
 8003aac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <xTimerCreateTimerTask+0x48>
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	e7fe      	b.n	8003ac6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003ac8:	687b      	ldr	r3, [r7, #4]
    }
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000168 	.word	0x20000168
 8003ad8:	2000016c 	.word	0x2000016c
 8003adc:	080064b0 	.word	0x080064b0
 8003ae0:	08003c15 	.word	0x08003c15

08003ae4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <xTimerGenericCommand+0x2c>
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	e7fe      	b.n	8003b0e <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <xTimerGenericCommand+0x94>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02a      	beq.n	8003b6e <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	dc18      	bgt.n	8003b5c <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b2a:	f7ff fe95 	bl	8003858 <xTaskGetSchedulerState>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d109      	bne.n	8003b48 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b34:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <xTimerGenericCommand+0x94>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	f107 0114 	add.w	r1, r7, #20
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b40:	f7fe fc82 	bl	8002448 <xQueueGenericSend>
 8003b44:	6278      	str	r0, [r7, #36]	; 0x24
 8003b46:	e012      	b.n	8003b6e <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <xTimerGenericCommand+0x94>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	f107 0114 	add.w	r1, r7, #20
 8003b50:	2300      	movs	r3, #0
 8003b52:	2200      	movs	r2, #0
 8003b54:	f7fe fc78 	bl	8002448 <xQueueGenericSend>
 8003b58:	6278      	str	r0, [r7, #36]	; 0x24
 8003b5a:	e008      	b.n	8003b6e <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <xTimerGenericCommand+0x94>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	f107 0114 	add.w	r1, r7, #20
 8003b64:	2300      	movs	r3, #0
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	f7fe fd90 	bl	800268c <xQueueGenericSendFromISR>
 8003b6c:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b70:	4618      	mov	r0, r3
 8003b72:	3728      	adds	r7, #40	; 0x28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000168 	.word	0x20000168

08003b7c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <prvProcessExpiredTimer+0x94>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe fb3e 	bl	8002216 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d021      	beq.n	8003bec <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	18d1      	adds	r1, r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	6978      	ldr	r0, [r7, #20]
 8003bb6:	f000 f8d1 	bl	8003d5c <prvInsertTimerInActiveList>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01e      	beq.n	8003bfe <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f7ff ff8a 	bl	8003ae4 <xTimerGenericCommand>
 8003bd0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d112      	bne.n	8003bfe <prvProcessExpiredTimer+0x82>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	e7fe      	b.n	8003bea <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	6978      	ldr	r0, [r7, #20]
 8003c04:	4798      	blx	r3
    }
 8003c06:	bf00      	nop
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000160 	.word	0x20000160

08003c14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c1c:	f107 0308 	add.w	r3, r7, #8
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f857 	bl	8003cd4 <prvGetNextExpireTime>
 8003c26:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f803 	bl	8003c38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c32:	f000 f8d5 	bl	8003de0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c36:	e7f1      	b.n	8003c1c <prvTimerTask+0x8>

08003c38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c42:	f7ff fa27 	bl	8003094 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f866 	bl	8003d1c <prvSampleTimeNow>
 8003c50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d130      	bne.n	8003cba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <prvProcessTimerOrBlockTask+0x3c>
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d806      	bhi.n	8003c74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c66:	f7ff fa23 	bl	80030b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff85 	bl	8003b7c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c72:	e024      	b.n	8003cbe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <prvProcessTimerOrBlockTask+0x90>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <prvProcessTimerOrBlockTask+0x50>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <prvProcessTimerOrBlockTask+0x52>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <prvProcessTimerOrBlockTask+0x94>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f7ff f805 	bl	8002ca8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c9e:	f7ff fa07 	bl	80030b0 <xTaskResumeAll>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <prvProcessTimerOrBlockTask+0x98>)
 8003caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	f3bf 8f6f 	isb	sy
    }
 8003cb8:	e001      	b.n	8003cbe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003cba:	f7ff f9f9 	bl	80030b0 <xTaskResumeAll>
    }
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000164 	.word	0x20000164
 8003ccc:	20000168 	.word	0x20000168
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <prvGetNextExpireTime+0x44>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <prvGetNextExpireTime+0x16>
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	e000      	b.n	8003cec <prvGetNextExpireTime+0x18>
 8003cea:	2200      	movs	r2, #0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <prvGetNextExpireTime+0x44>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	e001      	b.n	8003d08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d08:	68fb      	ldr	r3, [r7, #12]
    }
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000160 	.word	0x20000160

08003d1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d24:	f7ff fa64 	bl	80031f0 <xTaskGetTickCount>
 8003d28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <prvSampleTimeNow+0x3c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d205      	bcs.n	8003d40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d34:	f000 f918 	bl	8003f68 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e002      	b.n	8003d46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d46:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <prvSampleTimeNow+0x3c>)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
    }
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000170 	.word	0x20000170

08003d5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d812      	bhi.n	8003da8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	1ad2      	subs	r2, r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e01b      	b.n	8003dce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <prvInsertTimerInActiveList+0x7c>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe f9ff 	bl	80021a4 <vListInsert>
 8003da6:	e012      	b.n	8003dce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d206      	bcs.n	8003dbe <prvInsertTimerInActiveList+0x62>
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003db8:	2301      	movs	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e007      	b.n	8003dce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <prvInsertTimerInActiveList+0x80>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4610      	mov	r0, r2
 8003dca:	f7fe f9eb 	bl	80021a4 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dce:	697b      	ldr	r3, [r7, #20]
    }
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000164 	.word	0x20000164
 8003ddc:	20000160 	.word	0x20000160

08003de0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003de6:	e0ac      	b.n	8003f42 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f2c0 80a8 	blt.w	8003f40 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fa08 	bl	8002216 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff87 	bl	8003d1c <prvSampleTimeNow>
 8003e0e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b09      	cmp	r3, #9
 8003e14:	f200 8095 	bhi.w	8003f42 <prvProcessReceivedCommands+0x162>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <prvProcessReceivedCommands+0x40>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e49 	.word	0x08003e49
 8003e2c:	08003ebb 	.word	0x08003ebb
 8003e30:	08003ecf 	.word	0x08003ecf
 8003e34:	08003f17 	.word	0x08003f17
 8003e38:	08003e49 	.word	0x08003e49
 8003e3c:	08003e49 	.word	0x08003e49
 8003e40:	08003ebb 	.word	0x08003ebb
 8003e44:	08003ecf 	.word	0x08003ecf
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	18d1      	adds	r1, r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e68:	f7ff ff78 	bl	8003d5c <prvInsertTimerInActiveList>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d067      	beq.n	8003f42 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e78:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05c      	beq.n	8003f42 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	441a      	add	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e9a:	f7ff fe23 	bl	8003ae4 <xTimerGenericCommand>
 8003e9e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d14d      	bne.n	8003f42 <prvProcessReceivedCommands+0x162>
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e7fe      	b.n	8003eb8 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003ecc:	e039      	b.n	8003f42 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <prvProcessReceivedCommands+0x122>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e7fe      	b.n	8003f00 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	18d1      	adds	r1, r2, r3
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f10:	f7ff ff24 	bl	8003d5c <prvInsertTimerInActiveList>
                        break;
 8003f14:	e015      	b.n	8003f42 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d103      	bne.n	8003f2c <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f26:	f000 fc59 	bl	80047dc <vPortFree>
 8003f2a:	e00a      	b.n	8003f42 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f3e:	e000      	b.n	8003f42 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f40:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <prvProcessReceivedCommands+0x184>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f107 0108 	add.w	r1, r7, #8
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc57 	bl	8002800 <xQueueReceive>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f47f af47 	bne.w	8003de8 <prvProcessReceivedCommands+0x8>
        }
    }
 8003f5a:	bf00      	nop
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000168 	.word	0x20000168

08003f68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f6e:	e047      	b.n	8004000 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe f944 	bl	8002216 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d02d      	beq.n	8004000 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d90e      	bls.n	8003fd4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fc2:	4b19      	ldr	r3, [pc, #100]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe f8e9 	bl	80021a4 <vListInsert>
 8003fd2:	e015      	b.n	8004000 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	2100      	movs	r1, #0
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff fd80 	bl	8003ae4 <xTimerGenericCommand>
 8003fe4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <prvSwitchTimerLists+0x98>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	e7fe      	b.n	8003ffe <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1b2      	bne.n	8003f70 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <prvSwitchTimerLists+0xc0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <prvSwitchTimerLists+0xc4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <prvSwitchTimerLists+0xc0>)
 8004016:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <prvSwitchTimerLists+0xc4>)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6013      	str	r3, [r2, #0]
    }
 800401e:	bf00      	nop
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000160 	.word	0x20000160
 800402c:	20000164 	.word	0x20000164

08004030 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004034:	f000 f9d6 	bl	80043e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <prvCheckForValidListAndQueue+0x54>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d11d      	bne.n	800407c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004040:	4811      	ldr	r0, [pc, #68]	; (8004088 <prvCheckForValidListAndQueue+0x58>)
 8004042:	f7fe f85e 	bl	8002102 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004046:	4811      	ldr	r0, [pc, #68]	; (800408c <prvCheckForValidListAndQueue+0x5c>)
 8004048:	f7fe f85b 	bl	8002102 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <prvCheckForValidListAndQueue+0x60>)
 800404e:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <prvCheckForValidListAndQueue+0x58>)
 8004050:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <prvCheckForValidListAndQueue+0x64>)
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <prvCheckForValidListAndQueue+0x5c>)
 8004056:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004058:	2200      	movs	r2, #0
 800405a:	210c      	movs	r1, #12
 800405c:	200a      	movs	r0, #10
 800405e:	f7fe f96d 	bl	800233c <xQueueGenericCreate>
 8004062:	4602      	mov	r2, r0
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <prvCheckForValidListAndQueue+0x54>)
 8004066:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <prvCheckForValidListAndQueue+0x54>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <prvCheckForValidListAndQueue+0x54>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4908      	ldr	r1, [pc, #32]	; (8004098 <prvCheckForValidListAndQueue+0x68>)
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fde6 	bl	8002c48 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800407c:	f000 f9e0 	bl	8004440 <vPortExitCritical>
    }
 8004080:	bf00      	nop
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000168 	.word	0x20000168
 8004088:	20000138 	.word	0x20000138
 800408c:	2000014c 	.word	0x2000014c
 8004090:	20000160 	.word	0x20000160
 8004094:	20000164 	.word	0x20000164
 8004098:	080064b8 	.word	0x080064b8

0800409c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b04      	subs	r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3b04      	subs	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b04      	subs	r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040cc:	4a0c      	ldr	r2, [pc, #48]	; (8004100 <pxPortInitialiseStack+0x64>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b14      	subs	r3, #20
 80040d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b04      	subs	r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f06f 0202 	mvn.w	r2, #2
 80040ea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3b20      	subs	r3, #32
 80040f0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	08004105 	.word	0x08004105

08004104 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <prvTaskExitError+0x50>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d009      	beq.n	800412c <prvTaskExitError+0x28>
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e7fe      	b.n	800412a <prvTaskExitError+0x26>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800413e:	bf00      	nop
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0fc      	beq.n	8004140 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000010 	.word	0x20000010
	...

08004160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <pxCurrentTCBConst2>)
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	6808      	ldr	r0, [r1, #0]
 8004166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416a:	f380 8809 	msr	PSP, r0
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f380 8811 	msr	BASEPRI, r0
 800417a:	4770      	bx	lr
 800417c:	f3af 8000 	nop.w

08004180 <pxCurrentTCBConst2>:
 8004180:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004188:	4808      	ldr	r0, [pc, #32]	; (80041ac <prvPortStartFirstTask+0x24>)
 800418a:	6800      	ldr	r0, [r0, #0]
 800418c:	6800      	ldr	r0, [r0, #0]
 800418e:	f380 8808 	msr	MSP, r0
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8814 	msr	CONTROL, r0
 800419a:	b662      	cpsie	i
 800419c:	b661      	cpsie	f
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	df00      	svc	0
 80041a8:	bf00      	nop
 80041aa:	0000      	.short	0x0000
 80041ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop

080041b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041ba:	4b44      	ldr	r3, [pc, #272]	; (80042cc <xPortStartScheduler+0x118>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a44      	ldr	r2, [pc, #272]	; (80042d0 <xPortStartScheduler+0x11c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d109      	bne.n	80041d8 <xPortStartScheduler+0x24>
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	e7fe      	b.n	80041d6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041d8:	4b3c      	ldr	r3, [pc, #240]	; (80042cc <xPortStartScheduler+0x118>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3d      	ldr	r2, [pc, #244]	; (80042d4 <xPortStartScheduler+0x120>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d109      	bne.n	80041f6 <xPortStartScheduler+0x42>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e7fe      	b.n	80041f4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041f6:	4b38      	ldr	r3, [pc, #224]	; (80042d8 <xPortStartScheduler+0x124>)
 80041f8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <xPortStartScheduler+0x128>)
 800421c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <xPortStartScheduler+0x12c>)
 8004220:	2207      	movs	r2, #7
 8004222:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004224:	e009      	b.n	800423a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004226:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <xPortStartScheduler+0x12c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3b01      	subs	r3, #1
 800422c:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <xPortStartScheduler+0x12c>)
 800422e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b80      	cmp	r3, #128	; 0x80
 8004244:	d0ef      	beq.n	8004226 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <xPortStartScheduler+0x12c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1c3 0307 	rsb	r3, r3, #7
 800424e:	2b04      	cmp	r3, #4
 8004250:	d009      	beq.n	8004266 <xPortStartScheduler+0xb2>
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	e7fe      	b.n	8004264 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004266:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <xPortStartScheduler+0x12c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <xPortStartScheduler+0x12c>)
 800426e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <xPortStartScheduler+0x12c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <xPortStartScheduler+0x12c>)
 800427a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <xPortStartScheduler+0x130>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <xPortStartScheduler+0x130>)
 800428a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800428e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <xPortStartScheduler+0x130>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <xPortStartScheduler+0x130>)
 8004296:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800429a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800429c:	f000 f954 	bl	8004548 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <xPortStartScheduler+0x134>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042a6:	f000 f973 	bl	8004590 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042aa:	4b10      	ldr	r3, [pc, #64]	; (80042ec <xPortStartScheduler+0x138>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <xPortStartScheduler+0x138>)
 80042b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042b4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042b6:	f7ff ff67 	bl	8004188 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042ba:	f7ff f877 	bl	80033ac <vTaskSwitchContext>
    prvTaskExitError();
 80042be:	f7ff ff21 	bl	8004104 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	e000ed00 	.word	0xe000ed00
 80042d0:	410fc271 	.word	0x410fc271
 80042d4:	410fc270 	.word	0x410fc270
 80042d8:	e000e400 	.word	0xe000e400
 80042dc:	20000174 	.word	0x20000174
 80042e0:	20000178 	.word	0x20000178
 80042e4:	e000ed20 	.word	0xe000ed20
 80042e8:	20000010 	.word	0x20000010
 80042ec:	e000ef34 	.word	0xe000ef34

080042f0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042f6:	4b35      	ldr	r3, [pc, #212]	; (80043cc <vInitPrioGroupValue+0xdc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a35      	ldr	r2, [pc, #212]	; (80043d0 <vInitPrioGroupValue+0xe0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d109      	bne.n	8004314 <vInitPrioGroupValue+0x24>
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	e7fe      	b.n	8004312 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004314:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <vInitPrioGroupValue+0xdc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <vInitPrioGroupValue+0xe4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d109      	bne.n	8004332 <vInitPrioGroupValue+0x42>
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e7fe      	b.n	8004330 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <vInitPrioGroupValue+0xe8>)
 8004334:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004354:	b2da      	uxtb	r2, r3
 8004356:	4b21      	ldr	r3, [pc, #132]	; (80043dc <vInitPrioGroupValue+0xec>)
 8004358:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800435a:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <vInitPrioGroupValue+0xf0>)
 800435c:	2207      	movs	r2, #7
 800435e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004360:	e009      	b.n	8004376 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004362:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <vInitPrioGroupValue+0xf0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3b01      	subs	r3, #1
 8004368:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <vInitPrioGroupValue+0xf0>)
 800436a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b80      	cmp	r3, #128	; 0x80
 8004380:	d0ef      	beq.n	8004362 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <vInitPrioGroupValue+0xf0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1c3 0307 	rsb	r3, r3, #7
 800438a:	2b04      	cmp	r3, #4
 800438c:	d009      	beq.n	80043a2 <vInitPrioGroupValue+0xb2>
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	e7fe      	b.n	80043a0 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <vInitPrioGroupValue+0xf0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <vInitPrioGroupValue+0xf0>)
 80043aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <vInitPrioGroupValue+0xf0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b4:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <vInitPrioGroupValue+0xf0>)
 80043b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00
 80043d0:	410fc271 	.word	0x410fc271
 80043d4:	410fc270 	.word	0x410fc270
 80043d8:	e000e400 	.word	0xe000e400
 80043dc:	20000174 	.word	0x20000174
 80043e0:	20000178 	.word	0x20000178

080043e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <vPortEnterCritical+0x54>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <vPortEnterCritical+0x54>)
 8004404:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004406:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <vPortEnterCritical+0x54>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d10e      	bne.n	800442c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <vPortEnterCritical+0x58>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <vPortEnterCritical+0x48>
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	e7fe      	b.n	800442a <vPortEnterCritical+0x46>
    }
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000010 	.word	0x20000010
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004446:	4b11      	ldr	r3, [pc, #68]	; (800448c <vPortExitCritical+0x4c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <vPortExitCritical+0x22>
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e7fe      	b.n	8004460 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <vPortExitCritical+0x4c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3b01      	subs	r3, #1
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <vPortExitCritical+0x4c>)
 800446a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <vPortExitCritical+0x4c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <vPortExitCritical+0x3e>
 8004474:	2300      	movs	r3, #0
 8004476:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000010 	.word	0x20000010

08004490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004490:	f3ef 8009 	mrs	r0, PSP
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <pxCurrentTCBConst>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	f01e 0f10 	tst.w	lr, #16
 80044a0:	bf08      	it	eq
 80044a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044aa:	6010      	str	r0, [r2, #0]
 80044ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044b4:	f380 8811 	msr	BASEPRI, r0
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f7fe ff74 	bl	80033ac <vTaskSwitchContext>
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	f380 8811 	msr	BASEPRI, r0
 80044cc:	bc09      	pop	{r0, r3}
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	6808      	ldr	r0, [r1, #0]
 80044d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d6:	f01e 0f10 	tst.w	lr, #16
 80044da:	bf08      	it	eq
 80044dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044e0:	f380 8809 	msr	PSP, r0
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst>:
 80044f0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004510:	f001 fc56 	bl	8005dc0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004514:	f7fe fe8e 	bl	8003234 <xTaskIncrementTick>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800451e:	f001 fcad 	bl	8005e7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <SysTick_Handler+0x4c>)
 8004524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e001      	b.n	8004530 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800452c:	f001 fc8a 	bl	8005e44 <SEGGER_SYSVIEW_RecordExitISR>
 8004530:	2300      	movs	r3, #0
 8004532:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <vPortSetupTimerInterrupt+0x34>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004552:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <vPortSetupTimerInterrupt+0x38>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <vPortSetupTimerInterrupt+0x3c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <vPortSetupTimerInterrupt+0x40>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	4a09      	ldr	r2, [pc, #36]	; (800458c <vPortSetupTimerInterrupt+0x44>)
 8004566:	3b01      	subs	r3, #1
 8004568:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <vPortSetupTimerInterrupt+0x34>)
 800456c:	2207      	movs	r2, #7
 800456e:	601a      	str	r2, [r3, #0]
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000e010 	.word	0xe000e010
 8004580:	e000e018 	.word	0xe000e018
 8004584:	20000008 	.word	0x20000008
 8004588:	10624dd3 	.word	0x10624dd3
 800458c:	e000e014 	.word	0xe000e014

08004590 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004590:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045a0 <vPortEnableVFP+0x10>
 8004594:	6801      	ldr	r1, [r0, #0]
 8004596:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800459a:	6001      	str	r1, [r0, #0]
 800459c:	4770      	bx	lr
 800459e:	0000      	.short	0x0000
 80045a0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045ae:	f3ef 8305 	mrs	r3, IPSR
 80045b2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d913      	bls.n	80045e2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ba:	4a16      	ldr	r2, [pc, #88]	; (8004614 <vPortValidateInterruptPriority+0x6c>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <vPortValidateInterruptPriority+0x70>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	7afa      	ldrb	r2, [r7, #11]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d209      	bcs.n	80045e2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	e7fe      	b.n	80045e0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <vPortValidateInterruptPriority+0x74>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <vPortValidateInterruptPriority+0x78>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d909      	bls.n	8004606 <vPortValidateInterruptPriority+0x5e>
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	e7fe      	b.n	8004604 <vPortValidateInterruptPriority+0x5c>
    }
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	e000e3f0 	.word	0xe000e3f0
 8004618:	20000174 	.word	0x20000174
 800461c:	e000ed0c 	.word	0xe000ed0c
 8004620:	20000178 	.word	0x20000178

08004624 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004630:	f7fe fd30 	bl	8003094 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004634:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <pvPortMalloc+0x1a0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800463c:	f000 f92e 	bl	800489c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004640:	4b61      	ldr	r3, [pc, #388]	; (80047c8 <pvPortMalloc+0x1a4>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 80a5 	bne.w	8004798 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d02c      	beq.n	80046ae <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004654:	2208      	movs	r2, #8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d226      	bcs.n	80046ae <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004660:	2208      	movs	r2, #8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f023 0307 	bic.w	r3, r3, #7
 8004678:	3308      	adds	r3, #8
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	d213      	bcs.n	80046a8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f023 0307 	bic.w	r3, r3, #7
 8004686:	3308      	adds	r3, #8
 8004688:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00f      	beq.n	80046b4 <pvPortMalloc+0x90>
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e7fe      	b.n	80046a6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046ac:	e002      	b.n	80046b4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	e000      	b.n	80046b6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046b4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d06d      	beq.n	8004798 <pvPortMalloc+0x174>
 80046bc:	4b43      	ldr	r3, [pc, #268]	; (80047cc <pvPortMalloc+0x1a8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d868      	bhi.n	8004798 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046c6:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <pvPortMalloc+0x1ac>)
 80046c8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <pvPortMalloc+0x1ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046d0:	e004      	b.n	80046dc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d903      	bls.n	80046ee <pvPortMalloc+0xca>
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f1      	bne.n	80046d2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046ee:	4b35      	ldr	r3, [pc, #212]	; (80047c4 <pvPortMalloc+0x1a0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d04f      	beq.n	8004798 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2208      	movs	r2, #8
 80046fe:	4413      	add	r3, r2
 8004700:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	1ad2      	subs	r2, r2, r3
 8004712:	2308      	movs	r3, #8
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	429a      	cmp	r2, r3
 8004718:	d91e      	bls.n	8004758 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <pvPortMalloc+0x11c>
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e7fe      	b.n	800473e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004752:	69b8      	ldr	r0, [r7, #24]
 8004754:	f000 f904 	bl	8004960 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004758:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <pvPortMalloc+0x1a8>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <pvPortMalloc+0x1a8>)
 8004764:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <pvPortMalloc+0x1a8>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <pvPortMalloc+0x1b0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d203      	bcs.n	800477a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <pvPortMalloc+0x1a8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <pvPortMalloc+0x1b0>)
 8004778:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <pvPortMalloc+0x1a4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	431a      	orrs	r2, r3
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <pvPortMalloc+0x1b4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	4a10      	ldr	r2, [pc, #64]	; (80047d8 <pvPortMalloc+0x1b4>)
 8004796:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004798:	f7fe fc8a 	bl	80030b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <pvPortMalloc+0x196>
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e7fe      	b.n	80047b8 <pvPortMalloc+0x194>
    return pvReturn;
 80047ba:	69fb      	ldr	r3, [r7, #28]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3728      	adds	r7, #40	; 0x28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20019184 	.word	0x20019184
 80047c8:	20019198 	.word	0x20019198
 80047cc:	20019188 	.word	0x20019188
 80047d0:	2001917c 	.word	0x2001917c
 80047d4:	2001918c 	.word	0x2001918c
 80047d8:	20019190 	.word	0x20019190

080047dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d04b      	beq.n	8004886 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047ee:	2308      	movs	r3, #8
 80047f0:	425b      	negs	r3, r3
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4b23      	ldr	r3, [pc, #140]	; (8004890 <vPortFree+0xb4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <vPortFree+0x42>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e7fe      	b.n	800481c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <vPortFree+0x5e>
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	e7fe      	b.n	8004838 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4b14      	ldr	r3, [pc, #80]	; (8004890 <vPortFree+0xb4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01e      	beq.n	8004886 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11a      	bne.n	8004886 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <vPortFree+0xb4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	43db      	mvns	r3, r3
 800485a:	401a      	ands	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004860:	f7fe fc18 	bl	8003094 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <vPortFree+0xb8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4413      	add	r3, r2
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <vPortFree+0xb8>)
 8004870:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f000 f874 	bl	8004960 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <vPortFree+0xbc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	4a06      	ldr	r2, [pc, #24]	; (8004898 <vPortFree+0xbc>)
 8004880:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004882:	f7fe fc15 	bl	80030b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004886:	bf00      	nop
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20019198 	.word	0x20019198
 8004894:	20019188 	.word	0x20019188
 8004898:	20019194 	.word	0x20019194

0800489c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048a2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80048a6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <prvHeapInit+0xac>)
 80048aa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3307      	adds	r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <prvHeapInit+0xac>)
 80048cc:	4413      	add	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <prvHeapInit+0xb0>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <prvHeapInit+0xb0>)
 80048dc:	2200      	movs	r2, #0
 80048de:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	4413      	add	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80048e8:	2208      	movs	r2, #8
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <prvHeapInit+0xb4>)
 80048fc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <prvHeapInit+0xb4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2200      	movs	r2, #0
 8004904:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <prvHeapInit+0xb4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <prvHeapInit+0xb4>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <prvHeapInit+0xb8>)
 800492a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <prvHeapInit+0xbc>)
 8004932:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <prvHeapInit+0xc0>)
 8004936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800493a:	601a      	str	r2, [r3, #0]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	2000017c 	.word	0x2000017c
 800494c:	2001917c 	.word	0x2001917c
 8004950:	20019184 	.word	0x20019184
 8004954:	2001918c 	.word	0x2001918c
 8004958:	20019188 	.word	0x20019188
 800495c:	20019198 	.word	0x20019198

08004960 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <prvInsertBlockIntoFreeList+0xac>)
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e002      	b.n	8004974 <prvInsertBlockIntoFreeList+0x14>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d8f7      	bhi.n	800496e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	4413      	add	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d108      	bne.n	80049a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	441a      	add	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	441a      	add	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d118      	bne.n	80049e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <prvInsertBlockIntoFreeList+0xb0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d00d      	beq.n	80049de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	441a      	add	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e008      	b.n	80049f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <prvInsertBlockIntoFreeList+0xb0>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e003      	b.n	80049f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d002      	beq.n	80049fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2001917c 	.word	0x2001917c
 8004a10:	20019184 	.word	0x20019184

08004a14 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <_cbSendSystemDesc+0x14>)
 8004a1a:	f001 f97d 	bl	8005d18 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a1e:	4803      	ldr	r0, [pc, #12]	; (8004a2c <_cbSendSystemDesc+0x18>)
 8004a20:	f001 f97a 	bl	8005d18 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	080064c0 	.word	0x080064c0
 8004a2c:	08006504 	.word	0x08006504

08004a30 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a3a:	6819      	ldr	r1, [r3, #0]
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a3e:	4a06      	ldr	r2, [pc, #24]	; (8004a58 <SEGGER_SYSVIEW_Conf+0x28>)
 8004a40:	f000 fce8 	bl	8005414 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a44:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a48:	f000 fd28 	bl	800549c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000008 	.word	0x20000008
 8004a54:	08004a15 	.word	0x08004a15
 8004a58:	080065a4 	.word	0x080065a4

08004a5c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	e034      	b.n	8004ad2 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a68:	491e      	ldr	r1, [pc, #120]	; (8004ae4 <_cbSendTaskList+0x88>)
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	491a      	ldr	r1, [pc, #104]	; (8004ae4 <_cbSendTaskList+0x88>)
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	3304      	adds	r3, #4
 8004a88:	681c      	ldr	r4, [r3, #0]
 8004a8a:	4916      	ldr	r1, [pc, #88]	; (8004ae4 <_cbSendTaskList+0x88>)
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	440b      	add	r3, r1
 8004a98:	3308      	adds	r3, #8
 8004a9a:	681d      	ldr	r5, [r3, #0]
 8004a9c:	4911      	ldr	r1, [pc, #68]	; (8004ae4 <_cbSendTaskList+0x88>)
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	330c      	adds	r3, #12
 8004aac:	681e      	ldr	r6, [r3, #0]
 8004aae:	490d      	ldr	r1, [pc, #52]	; (8004ae4 <_cbSendTaskList+0x88>)
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	3310      	adds	r3, #16
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4633      	mov	r3, r6
 8004ac4:	462a      	mov	r2, r5
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	f000 f8b4 	bl	8004c34 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <_cbSendTaskList+0x8c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d3c5      	bcc.n	8004a68 <_cbSendTaskList+0xc>
  }
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae4:	2001919c 	.word	0x2001919c
 8004ae8:	2001923c 	.word	0x2001923c

08004aec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004af2:	f7fe fb8d 	bl	8003210 <xTaskGetTickCountFromISR>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f04f 0400 	mov.w	r4, #0
 8004afc:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b00:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004b04:	462b      	mov	r3, r5
 8004b06:	4634      	mov	r4, r6
 8004b08:	f04f 0100 	mov.w	r1, #0
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	0162      	lsls	r2, r4, #5
 8004b12:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004b16:	0159      	lsls	r1, r3, #5
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4614      	mov	r4, r2
 8004b1c:	1b5b      	subs	r3, r3, r5
 8004b1e:	eb64 0406 	sbc.w	r4, r4, r6
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	00a2      	lsls	r2, r4, #2
 8004b2c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004b30:	0099      	lsls	r1, r3, #2
 8004b32:	460b      	mov	r3, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	195b      	adds	r3, r3, r5
 8004b38:	eb44 0406 	adc.w	r4, r4, r6
 8004b3c:	f04f 0100 	mov.w	r1, #0
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	00e2      	lsls	r2, r4, #3
 8004b46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b4a:	00d9      	lsls	r1, r3, #3
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4614      	mov	r4, r2
 8004b50:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004b54:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b72:	2205      	movs	r2, #5
 8004b74:	492b      	ldr	r1, [pc, #172]	; (8004c24 <SYSVIEW_AddTask+0xc0>)
 8004b76:	68b8      	ldr	r0, [r7, #8]
 8004b78:	f001 fc4a 	bl	8006410 <memcmp>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d04b      	beq.n	8004c1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <SYSVIEW_AddTask+0xc4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b07      	cmp	r3, #7
 8004b88:	d903      	bls.n	8004b92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b8a:	4828      	ldr	r0, [pc, #160]	; (8004c2c <SYSVIEW_AddTask+0xc8>)
 8004b8c:	f001 fbc0 	bl	8006310 <SEGGER_SYSVIEW_Warn>
    return;
 8004b90:	e044      	b.n	8004c1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b92:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <SYSVIEW_AddTask+0xc4>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4926      	ldr	r1, [pc, #152]	; (8004c30 <SYSVIEW_AddTask+0xcc>)
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <SYSVIEW_AddTask+0xc4>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4921      	ldr	r1, [pc, #132]	; (8004c30 <SYSVIEW_AddTask+0xcc>)
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <SYSVIEW_AddTask+0xc4>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	491b      	ldr	r1, [pc, #108]	; (8004c30 <SYSVIEW_AddTask+0xcc>)
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3308      	adds	r3, #8
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <SYSVIEW_AddTask+0xc4>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4916      	ldr	r1, [pc, #88]	; (8004c30 <SYSVIEW_AddTask+0xcc>)
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	330c      	adds	r3, #12
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <SYSVIEW_AddTask+0xc4>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4910      	ldr	r1, [pc, #64]	; (8004c30 <SYSVIEW_AddTask+0xcc>)
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3310      	adds	r3, #16
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <SYSVIEW_AddTask+0xc4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <SYSVIEW_AddTask+0xc4>)
 8004c06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f80e 	bl	8004c34 <SYSVIEW_SendTaskInfo>
 8004c18:	e000      	b.n	8004c1c <SYSVIEW_AddTask+0xb8>
    return;
 8004c1a:	bf00      	nop

}
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	08006514 	.word	0x08006514
 8004c28:	2001923c 	.word	0x2001923c
 8004c2c:	0800651c 	.word	0x0800651c
 8004c30:	2001919c 	.word	0x2001919c

08004c34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	; 0x28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c42:	f107 0314 	add.w	r3, r7, #20
 8004c46:	2214      	movs	r2, #20
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fbfa 	bl	8006444 <memset>
  TaskInfo.TaskID     = TaskID;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 ff5d 	bl	8005b28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c6e:	bf00      	nop
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <_DoInit>:
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <_DoInit+0x98>)
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	611a      	str	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	615a      	str	r2, [r3, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <_DoInit+0x9c>)
 8004c92:	619a      	str	r2, [r3, #24]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a20      	ldr	r2, [pc, #128]	; (8004d18 <_DoInit+0xa0>)
 8004c98:	61da      	str	r2, [r3, #28]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ca0:	621a      	str	r2, [r3, #32]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <_DoInit+0x9c>)
 8004cb8:	661a      	str	r2, [r3, #96]	; 0x60
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <_DoInit+0xa4>)
 8004cbe:	665a      	str	r2, [r3, #100]	; 0x64
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2210      	movs	r2, #16
 8004cc4:	669a      	str	r2, [r3, #104]	; 0x68
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	671a      	str	r2, [r3, #112]	; 0x70
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	66da      	str	r2, [r3, #108]	; 0x6c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	675a      	str	r2, [r3, #116]	; 0x74
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3307      	adds	r3, #7
 8004cdc:	4a10      	ldr	r2, [pc, #64]	; (8004d20 <_DoInit+0xa8>)
 8004cde:	6810      	ldr	r0, [r2, #0]
 8004ce0:	6018      	str	r0, [r3, #0]
 8004ce2:	f3bf 8f5f 	dmb	sy
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <_DoInit+0xac>)
 8004cea:	6810      	ldr	r0, [r2, #0]
 8004cec:	6018      	str	r0, [r3, #0]
 8004cee:	8891      	ldrh	r1, [r2, #4]
 8004cf0:	7992      	ldrb	r2, [r2, #6]
 8004cf2:	8099      	strh	r1, [r3, #4]
 8004cf4:	719a      	strb	r2, [r3, #6]
 8004cf6:	f3bf 8f5f 	dmb	sy
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	719a      	strb	r2, [r3, #6]
 8004d00:	f3bf 8f5f 	dmb	sy
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	2001a7f0 	.word	0x2001a7f0
 8004d14:	0800656c 	.word	0x0800656c
 8004d18:	20019240 	.word	0x20019240
 8004d1c:	20019640 	.word	0x20019640
 8004d20:	08006578 	.word	0x08006578
 8004d24:	0800657c 	.word	0x0800657c

08004d28 <SEGGER_RTT_ReadNoLock>:
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08c      	sub	sp, #48	; 0x30
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d36:	623b      	str	r3, [r7, #32]
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <SEGGER_RTT_ReadNoLock+0x1e>
 8004d42:	f7ff ff99 	bl	8004c78 <_DoInit>
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	3360      	adds	r3, #96	; 0x60
 8004d52:	4a37      	ldr	r2, [pc, #220]	; (8004e30 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d54:	4413      	add	r3, r2
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d92b      	bls.n	8004dcc <SEGGER_RTT_ReadNoLock+0xa4>
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4293      	cmp	r3, r2
 8004d84:	bf28      	it	cs
 8004d86:	4613      	movcs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	4413      	add	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	6939      	ldr	r1, [r7, #16]
 8004d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d9a:	f001 fb48 	bl	800642e <memcpy>
 8004d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4413      	add	r3, r2
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d101      	bne.n	8004dcc <SEGGER_RTT_ReadNoLock+0xa4>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bf28      	it	cs
 8004ddc:	4613      	movcs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d019      	beq.n	8004e1a <SEGGER_RTT_ReadNoLock+0xf2>
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	4413      	add	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	6939      	ldr	r1, [r7, #16]
 8004df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df6:	f001 fb1a 	bl	800642e <memcpy>
 8004dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	4413      	add	r3, r2
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4413      	add	r3, r2
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	607b      	str	r3, [r7, #4]
 8004e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <SEGGER_RTT_ReadNoLock+0xfe>
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e24:	611a      	str	r2, [r3, #16]
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3730      	adds	r7, #48	; 0x30
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	2001a7f0 	.word	0x2001a7f0

08004e34 <SEGGER_RTT_AllocUpBuffer>:
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	4b3d      	ldr	r3, [pc, #244]	; (8004f38 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004e50:	f7ff ff12 	bl	8004c78 <_DoInit>
 8004e54:	f3ef 8311 	mrs	r3, BASEPRI
 8004e58:	f04f 0120 	mov.w	r1, #32
 8004e5c:	f381 8811 	msr	BASEPRI, r1
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	4b35      	ldr	r3, [pc, #212]	; (8004f38 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	6939      	ldr	r1, [r7, #16]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	440b      	add	r3, r1
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <SEGGER_RTT_AllocUpBuffer+0x60>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	dbeb      	blt.n	8004e6a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004e92:	e000      	b.n	8004e96 <SEGGER_RTT_AllocUpBuffer+0x62>
 8004e94:	bf00      	nop
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	da3f      	bge.n	8004f20 <SEGGER_RTT_AllocUpBuffer+0xec>
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	440b      	add	r3, r1
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	6939      	ldr	r1, [r7, #16]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	4613      	mov	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	6939      	ldr	r1, [r7, #16]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3320      	adds	r3, #32
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	6939      	ldr	r1, [r7, #16]
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	440b      	add	r3, r1
 8004eec:	3328      	adds	r3, #40	; 0x28
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	6939      	ldr	r1, [r7, #16]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	4413      	add	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	440b      	add	r3, r1
 8004f00:	3324      	adds	r3, #36	; 0x24
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	4413      	add	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	440b      	add	r3, r1
 8004f14:	332c      	adds	r3, #44	; 0x2c
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	f3bf 8f5f 	dmb	sy
 8004f1e:	e002      	b.n	8004f26 <SEGGER_RTT_AllocUpBuffer+0xf2>
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	2001a7f0 	.word	0x2001a7f0

08004f3c <SEGGER_RTT_ConfigDownBuffer>:
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	4b21      	ldr	r3, [pc, #132]	; (8004fd0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f4c:	623b      	str	r3, [r7, #32]
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004f58:	f7ff fe8e 	bl	8004c78 <_DoInit>
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d82c      	bhi.n	8004fc0 <SEGGER_RTT_ConfigDownBuffer+0x84>
 8004f66:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6a:	f04f 0120 	mov.w	r1, #32
 8004f6e:	f381 8811 	msr	BASEPRI, r1
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	3360      	adds	r3, #96	; 0x60
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <SEGGER_RTT_ConfigDownBuffer+0x6e>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	605a      	str	r2, [r3, #4]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	611a      	str	r2, [r3, #16]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fae:	615a      	str	r2, [r3, #20]
 8004fb0:	f3bf 8f5f 	dmb	sy
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	2300      	movs	r3, #0
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbe:	e002      	b.n	8004fc6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
 8004fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	2001a7f0 	.word	0x2001a7f0

08004fd4 <_EncodeStr>:
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00f      	beq.n	800500a <_EncodeStr+0x36>
 8004fea:	e002      	b.n	8004ff2 <_EncodeStr+0x1e>
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f6      	bne.n	8004fec <_EncodeStr+0x18>
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	429a      	cmp	r2, r3
 8005004:	d901      	bls.n	800500a <_EncodeStr+0x36>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2bfe      	cmp	r3, #254	; 0xfe
 800500e:	d806      	bhi.n	800501e <_EncodeStr+0x4a>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	60fa      	str	r2, [r7, #12]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e011      	b.n	8005042 <_EncodeStr+0x6e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	60fa      	str	r2, [r7, #12]
 8005024:	22ff      	movs	r2, #255	; 0xff
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	60fa      	str	r2, [r7, #12]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	0a19      	lsrs	r1, r3, #8
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	60fa      	str	r2, [r7, #12]
 800503e:	b2ca      	uxtb	r2, r1
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e00a      	b.n	800505e <_EncodeStr+0x8a>
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	1c53      	adds	r3, r2, #1
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1c59      	adds	r1, r3, #1
 8005052:	60f9      	str	r1, [r7, #12]
 8005054:	7812      	ldrb	r2, [r2, #0]
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3301      	adds	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d3f0      	bcc.n	8005048 <_EncodeStr+0x74>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4618      	mov	r0, r3
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <_PreparePacket>:
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <_HandleIncomingPacket>:
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4b33      	ldr	r3, [pc, #204]	; (8005160 <_HandleIncomingPacket+0xd4>)
 8005094:	7e1b      	ldrb	r3, [r3, #24]
 8005096:	4618      	mov	r0, r3
 8005098:	1cfb      	adds	r3, r7, #3
 800509a:	2201      	movs	r2, #1
 800509c:	4619      	mov	r1, r3
 800509e:	f7ff fe43 	bl	8004d28 <SEGGER_RTT_ReadNoLock>
 80050a2:	4603      	mov	r3, r0
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dd4d      	ble.n	8005148 <_HandleIncomingPacket+0xbc>
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d022      	beq.n	80050f8 <_HandleIncomingPacket+0x6c>
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	dc0b      	bgt.n	80050ce <_HandleIncomingPacket+0x42>
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d015      	beq.n	80050e6 <_HandleIncomingPacket+0x5a>
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	dc02      	bgt.n	80050c4 <_HandleIncomingPacket+0x38>
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d00e      	beq.n	80050e0 <_HandleIncomingPacket+0x54>
 80050c2:	e034      	b.n	800512e <_HandleIncomingPacket+0xa2>
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d011      	beq.n	80050ec <_HandleIncomingPacket+0x60>
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d012      	beq.n	80050f2 <_HandleIncomingPacket+0x66>
 80050cc:	e02f      	b.n	800512e <_HandleIncomingPacket+0xa2>
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	d018      	beq.n	8005104 <_HandleIncomingPacket+0x78>
 80050d2:	2b07      	cmp	r3, #7
 80050d4:	db13      	blt.n	80050fe <_HandleIncomingPacket+0x72>
 80050d6:	2b7f      	cmp	r3, #127	; 0x7f
 80050d8:	d038      	beq.n	800514c <_HandleIncomingPacket+0xc0>
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d015      	beq.n	800510a <_HandleIncomingPacket+0x7e>
 80050de:	e026      	b.n	800512e <_HandleIncomingPacket+0xa2>
 80050e0:	f000 fba8 	bl	8005834 <SEGGER_SYSVIEW_Start>
 80050e4:	e037      	b.n	8005156 <_HandleIncomingPacket+0xca>
 80050e6:	f000 fc5f 	bl	80059a8 <SEGGER_SYSVIEW_Stop>
 80050ea:	e034      	b.n	8005156 <_HandleIncomingPacket+0xca>
 80050ec:	f000 fe38 	bl	8005d60 <SEGGER_SYSVIEW_RecordSystime>
 80050f0:	e031      	b.n	8005156 <_HandleIncomingPacket+0xca>
 80050f2:	f000 fdfd 	bl	8005cf0 <SEGGER_SYSVIEW_SendTaskList>
 80050f6:	e02e      	b.n	8005156 <_HandleIncomingPacket+0xca>
 80050f8:	f000 fc7c 	bl	80059f4 <SEGGER_SYSVIEW_GetSysDesc>
 80050fc:	e02b      	b.n	8005156 <_HandleIncomingPacket+0xca>
 80050fe:	f001 f8c9 	bl	8006294 <SEGGER_SYSVIEW_SendNumModules>
 8005102:	e028      	b.n	8005156 <_HandleIncomingPacket+0xca>
 8005104:	f001 f8a8 	bl	8006258 <SEGGER_SYSVIEW_SendModuleDescription>
 8005108:	e025      	b.n	8005156 <_HandleIncomingPacket+0xca>
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <_HandleIncomingPacket+0xd4>)
 800510c:	7e1b      	ldrb	r3, [r3, #24]
 800510e:	4618      	mov	r0, r3
 8005110:	1cfb      	adds	r3, r7, #3
 8005112:	2201      	movs	r2, #1
 8005114:	4619      	mov	r1, r3
 8005116:	f7ff fe07 	bl	8004d28 <SEGGER_RTT_ReadNoLock>
 800511a:	4603      	mov	r3, r0
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	dd15      	ble.n	8005150 <_HandleIncomingPacket+0xc4>
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f816 	bl	8006158 <SEGGER_SYSVIEW_SendModule>
 800512c:	e010      	b.n	8005150 <_HandleIncomingPacket+0xc4>
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	b25b      	sxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	da0e      	bge.n	8005154 <_HandleIncomingPacket+0xc8>
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <_HandleIncomingPacket+0xd4>)
 8005138:	7e1b      	ldrb	r3, [r3, #24]
 800513a:	4618      	mov	r0, r3
 800513c:	1cfb      	adds	r3, r7, #3
 800513e:	2201      	movs	r2, #1
 8005140:	4619      	mov	r1, r3
 8005142:	f7ff fdf1 	bl	8004d28 <SEGGER_RTT_ReadNoLock>
 8005146:	e005      	b.n	8005154 <_HandleIncomingPacket+0xc8>
 8005148:	bf00      	nop
 800514a:	e004      	b.n	8005156 <_HandleIncomingPacket+0xca>
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <_HandleIncomingPacket+0xca>
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <_HandleIncomingPacket+0xca>
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	2001a658 	.word	0x2001a658

08005164 <_TrySendOverflowPacket>:
 8005164:	b580      	push	{r7, lr}
 8005166:	b08c      	sub	sp, #48	; 0x30
 8005168:	af00      	add	r7, sp, #0
 800516a:	2301      	movs	r3, #1
 800516c:	713b      	strb	r3, [r7, #4]
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	3301      	adds	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005178:	4b31      	ldr	r3, [pc, #196]	; (8005240 <_TrySendOverflowPacket+0xdc>)
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
 800517e:	e00b      	b.n	8005198 <_TrySendOverflowPacket+0x34>
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	b2da      	uxtb	r2, r3
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	1c59      	adds	r1, r3, #1
 8005188:	62f9      	str	r1, [r7, #44]	; 0x2c
 800518a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	09db      	lsrs	r3, r3, #7
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	2b7f      	cmp	r3, #127	; 0x7f
 800519c:	d8f0      	bhi.n	8005180 <_TrySendOverflowPacket+0x1c>
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	4b25      	ldr	r3, [pc, #148]	; (8005244 <_TrySendOverflowPacket+0xe0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	4b22      	ldr	r3, [pc, #136]	; (8005240 <_TrySendOverflowPacket+0xdc>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	e00b      	b.n	80051e0 <_TrySendOverflowPacket+0x7c>
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	6279      	str	r1, [r7, #36]	; 0x24
 80051d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	09db      	lsrs	r3, r3, #7
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b7f      	cmp	r3, #127	; 0x7f
 80051e4:	d8f0      	bhi.n	80051c8 <_TrySendOverflowPacket+0x64>
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	627a      	str	r2, [r7, #36]	; 0x24
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <_TrySendOverflowPacket+0xdc>)
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	4618      	mov	r0, r3
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	461a      	mov	r2, r3
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	4619      	mov	r1, r3
 8005208:	f7fa ffe2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800520c:	4603      	mov	r3, r0
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <_TrySendOverflowPacket+0xc6>
 8005216:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <_TrySendOverflowPacket+0xdc>)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	60d3      	str	r3, [r2, #12]
 800521c:	4b08      	ldr	r3, [pc, #32]	; (8005240 <_TrySendOverflowPacket+0xdc>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	3b01      	subs	r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	4b06      	ldr	r3, [pc, #24]	; (8005240 <_TrySendOverflowPacket+0xdc>)
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	e004      	b.n	8005234 <_TrySendOverflowPacket+0xd0>
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <_TrySendOverflowPacket+0xdc>)
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	3301      	adds	r3, #1
 8005230:	4a03      	ldr	r2, [pc, #12]	; (8005240 <_TrySendOverflowPacket+0xdc>)
 8005232:	6153      	str	r3, [r2, #20]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4618      	mov	r0, r3
 8005238:	3730      	adds	r7, #48	; 0x30
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	2001a658 	.word	0x2001a658
 8005244:	e0001004 	.word	0xe0001004

08005248 <_SendPacket>:
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	; 0x28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <_SendPacket+0x1c0>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d010      	beq.n	800527e <_SendPacket+0x36>
 800525c:	4b6a      	ldr	r3, [pc, #424]	; (8005408 <_SendPacket+0x1c0>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80a3 	beq.w	80053ac <_SendPacket+0x164>
 8005266:	4b68      	ldr	r3, [pc, #416]	; (8005408 <_SendPacket+0x1c0>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d109      	bne.n	8005282 <_SendPacket+0x3a>
 800526e:	f7ff ff79 	bl	8005164 <_TrySendOverflowPacket>
 8005272:	4b65      	ldr	r3, [pc, #404]	; (8005408 <_SendPacket+0x1c0>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b01      	cmp	r3, #1
 8005278:	f040 809a 	bne.w	80053b0 <_SendPacket+0x168>
 800527c:	e001      	b.n	8005282 <_SendPacket+0x3a>
 800527e:	bf00      	nop
 8005280:	e000      	b.n	8005284 <_SendPacket+0x3c>
 8005282:	bf00      	nop
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b1f      	cmp	r3, #31
 8005288:	d809      	bhi.n	800529e <_SendPacket+0x56>
 800528a:	4b5f      	ldr	r3, [pc, #380]	; (8005408 <_SendPacket+0x1c0>)
 800528c:	69da      	ldr	r2, [r3, #28]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 808b 	bne.w	80053b4 <_SendPacket+0x16c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b17      	cmp	r3, #23
 80052a2:	d807      	bhi.n	80052b4 <_SendPacket+0x6c>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	e03d      	b.n	8005330 <_SendPacket+0xe8>
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b7f      	cmp	r3, #127	; 0x7f
 80052c0:	d912      	bls.n	80052e8 <_SendPacket+0xa0>
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	09da      	lsrs	r2, r3, #7
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	3a01      	subs	r2, #1
 80052da:	60fa      	str	r2, [r7, #12]
 80052dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	e006      	b.n	80052f6 <_SendPacket+0xae>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b7f      	cmp	r3, #127	; 0x7f
 80052fa:	d912      	bls.n	8005322 <_SendPacket+0xda>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	09da      	lsrs	r2, r3, #7
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3b01      	subs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	3a01      	subs	r2, #1
 8005314:	60fa      	str	r2, [r7, #12]
 8005316:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800531a:	b2da      	uxtb	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e006      	b.n	8005330 <_SendPacket+0xe8>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b01      	subs	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	4b36      	ldr	r3, [pc, #216]	; (800540c <_SendPacket+0x1c4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	4b34      	ldr	r3, [pc, #208]	; (8005408 <_SendPacket+0x1c0>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	e00b      	b.n	8005362 <_SendPacket+0x11a>
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	6279      	str	r1, [r7, #36]	; 0x24
 8005354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	09db      	lsrs	r3, r3, #7
 8005360:	623b      	str	r3, [r7, #32]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	2b7f      	cmp	r3, #127	; 0x7f
 8005366:	d8f0      	bhi.n	800534a <_SendPacket+0x102>
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	627a      	str	r2, [r7, #36]	; 0x24
 800536e:	6a3a      	ldr	r2, [r7, #32]
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	60bb      	str	r3, [r7, #8]
 8005378:	4b23      	ldr	r3, [pc, #140]	; (8005408 <_SendPacket+0x1c0>)
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	4618      	mov	r0, r3
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	461a      	mov	r2, r3
 8005386:	68f9      	ldr	r1, [r7, #12]
 8005388:	f7fa ff22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800538c:	4603      	mov	r3, r0
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <_SendPacket+0x156>
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <_SendPacket+0x1c0>)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	60d3      	str	r3, [r2, #12]
 800539c:	e00b      	b.n	80053b6 <_SendPacket+0x16e>
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <_SendPacket+0x1c0>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <_SendPacket+0x1c0>)
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e004      	b.n	80053b6 <_SendPacket+0x16e>
 80053ac:	bf00      	nop
 80053ae:	e002      	b.n	80053b6 <_SendPacket+0x16e>
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <_SendPacket+0x16e>
 80053b4:	bf00      	nop
 80053b6:	4b14      	ldr	r3, [pc, #80]	; (8005408 <_SendPacket+0x1c0>)
 80053b8:	7e1b      	ldrb	r3, [r3, #24]
 80053ba:	4619      	mov	r1, r3
 80053bc:	4a14      	ldr	r2, [pc, #80]	; (8005410 <_SendPacket+0x1c8>)
 80053be:	460b      	mov	r3, r1
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	440b      	add	r3, r1
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4413      	add	r3, r2
 80053c8:	336c      	adds	r3, #108	; 0x6c
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <_SendPacket+0x1c0>)
 80053ce:	7e1b      	ldrb	r3, [r3, #24]
 80053d0:	4618      	mov	r0, r3
 80053d2:	490f      	ldr	r1, [pc, #60]	; (8005410 <_SendPacket+0x1c8>)
 80053d4:	4603      	mov	r3, r0
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4403      	add	r3, r0
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	440b      	add	r3, r1
 80053de:	3370      	adds	r3, #112	; 0x70
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d00b      	beq.n	80053fe <_SendPacket+0x1b6>
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <_SendPacket+0x1c0>)
 80053e8:	789b      	ldrb	r3, [r3, #2]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d107      	bne.n	80053fe <_SendPacket+0x1b6>
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <_SendPacket+0x1c0>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	709a      	strb	r2, [r3, #2]
 80053f4:	f7ff fe4a 	bl	800508c <_HandleIncomingPacket>
 80053f8:	4b03      	ldr	r3, [pc, #12]	; (8005408 <_SendPacket+0x1c0>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	709a      	strb	r2, [r3, #2]
 80053fe:	bf00      	nop
 8005400:	3728      	adds	r7, #40	; 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	2001a658 	.word	0x2001a658
 800540c:	e0001004 	.word	0xe0001004
 8005410:	2001a7f0 	.word	0x2001a7f0

08005414 <SEGGER_SYSVIEW_Init>:
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005428:	4917      	ldr	r1, [pc, #92]	; (8005488 <SEGGER_SYSVIEW_Init+0x74>)
 800542a:	4818      	ldr	r0, [pc, #96]	; (800548c <SEGGER_SYSVIEW_Init+0x78>)
 800542c:	f7ff fd02 	bl	8004e34 <SEGGER_RTT_AllocUpBuffer>
 8005430:	4603      	mov	r3, r0
 8005432:	b2da      	uxtb	r2, r3
 8005434:	4b16      	ldr	r3, [pc, #88]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 8005436:	705a      	strb	r2, [r3, #1]
 8005438:	4b15      	ldr	r3, [pc, #84]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 800543a:	785a      	ldrb	r2, [r3, #1]
 800543c:	4b14      	ldr	r3, [pc, #80]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 800543e:	761a      	strb	r2, [r3, #24]
 8005440:	4b13      	ldr	r3, [pc, #76]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 8005442:	7e1b      	ldrb	r3, [r3, #24]
 8005444:	4618      	mov	r0, r3
 8005446:	2300      	movs	r3, #0
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2308      	movs	r3, #8
 800544c:	4a11      	ldr	r2, [pc, #68]	; (8005494 <SEGGER_SYSVIEW_Init+0x80>)
 800544e:	490f      	ldr	r1, [pc, #60]	; (800548c <SEGGER_SYSVIEW_Init+0x78>)
 8005450:	f7ff fd74 	bl	8004f3c <SEGGER_RTT_ConfigDownBuffer>
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 8005456:	2200      	movs	r2, #0
 8005458:	611a      	str	r2, [r3, #16]
 800545a:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <SEGGER_SYSVIEW_Init+0x84>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a0c      	ldr	r2, [pc, #48]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 8005460:	60d3      	str	r3, [r2, #12]
 8005462:	4a0b      	ldr	r2, [pc, #44]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6213      	str	r3, [r2, #32]
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6053      	str	r3, [r2, #4]
 800546e:	4a08      	ldr	r2, [pc, #32]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	6093      	str	r3, [r2, #8]
 8005474:	4a06      	ldr	r2, [pc, #24]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6253      	str	r3, [r2, #36]	; 0x24
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <SEGGER_SYSVIEW_Init+0x7c>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20019650 	.word	0x20019650
 800548c:	08006584 	.word	0x08006584
 8005490:	2001a658 	.word	0x2001a658
 8005494:	2001a650 	.word	0x2001a650
 8005498:	e0001004 	.word	0xe0001004

0800549c <SEGGER_SYSVIEW_SetRAMBase>:
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6113      	str	r3, [r2, #16]
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	2001a658 	.word	0x2001a658

080054bc <SEGGER_SYSVIEW_RecordVoid>:
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	f3ef 8311 	mrs	r3, BASEPRI
 80054c8:	f04f 0120 	mov.w	r1, #32
 80054cc:	f381 8811 	msr	BASEPRI, r1
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	4808      	ldr	r0, [pc, #32]	; (80054f4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80054d4:	f7ff fdce 	bl	8005074 <_PreparePacket>
 80054d8:	60b8      	str	r0, [r7, #8]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f7ff feb2 	bl	8005248 <_SendPacket>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	2001a688 	.word	0x2001a688

080054f8 <SEGGER_SYSVIEW_RecordU32>:
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	f3ef 8311 	mrs	r3, BASEPRI
 8005506:	f04f 0120 	mov.w	r1, #32
 800550a:	f381 8811 	msr	BASEPRI, r1
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	4816      	ldr	r0, [pc, #88]	; (800556c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005512:	f7ff fdaf 	bl	8005074 <_PreparePacket>
 8005516:	6138      	str	r0, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e00b      	b.n	800553e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	61f9      	str	r1, [r7, #28]
 8005530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	09db      	lsrs	r3, r3, #7
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	2b7f      	cmp	r3, #127	; 0x7f
 8005542:	d8f0      	bhi.n	8005526 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	61fa      	str	r2, [r7, #28]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	6938      	ldr	r0, [r7, #16]
 800555a:	f7ff fe75 	bl	8005248 <_SendPacket>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	bf00      	nop
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	2001a688 	.word	0x2001a688

08005570 <SEGGER_SYSVIEW_RecordU32x2>:
 8005570:	b580      	push	{r7, lr}
 8005572:	b08c      	sub	sp, #48	; 0x30
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	f3ef 8311 	mrs	r3, BASEPRI
 8005580:	f04f 0120 	mov.w	r1, #32
 8005584:	f381 8811 	msr	BASEPRI, r1
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	4825      	ldr	r0, [pc, #148]	; (8005620 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800558c:	f7ff fd72 	bl	8005074 <_PreparePacket>
 8005590:	61b8      	str	r0, [r7, #24]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	62bb      	str	r3, [r7, #40]	; 0x28
 800559e:	e00b      	b.n	80055b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	1c59      	adds	r1, r3, #1
 80055a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	09db      	lsrs	r3, r3, #7
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	2b7f      	cmp	r3, #127	; 0x7f
 80055bc:	d8f0      	bhi.n	80055a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	e00b      	b.n	80055f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	6279      	str	r1, [r7, #36]	; 0x24
 80055e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	09db      	lsrs	r3, r3, #7
 80055ee:	623b      	str	r3, [r7, #32]
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b7f      	cmp	r3, #127	; 0x7f
 80055f4:	d8f0      	bhi.n	80055d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	627a      	str	r2, [r7, #36]	; 0x24
 80055fc:	6a3a      	ldr	r2, [r7, #32]
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	6979      	ldr	r1, [r7, #20]
 800560a:	69b8      	ldr	r0, [r7, #24]
 800560c:	f7ff fe1c 	bl	8005248 <_SendPacket>
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	bf00      	nop
 8005618:	3730      	adds	r7, #48	; 0x30
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	2001a688 	.word	0x2001a688

08005624 <SEGGER_SYSVIEW_RecordU32x3>:
 8005624:	b580      	push	{r7, lr}
 8005626:	b08e      	sub	sp, #56	; 0x38
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	f3ef 8311 	mrs	r3, BASEPRI
 8005636:	f04f 0120 	mov.w	r1, #32
 800563a:	f381 8811 	msr	BASEPRI, r1
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	4832      	ldr	r0, [pc, #200]	; (800570c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005642:	f7ff fd17 	bl	8005074 <_PreparePacket>
 8005646:	61b8      	str	r0, [r7, #24]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	633b      	str	r3, [r7, #48]	; 0x30
 8005654:	e00b      	b.n	800566e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	b2da      	uxtb	r2, r3
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	1c59      	adds	r1, r3, #1
 800565e:	6379      	str	r1, [r7, #52]	; 0x34
 8005660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	09db      	lsrs	r3, r3, #7
 800566c:	633b      	str	r3, [r7, #48]	; 0x30
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	2b7f      	cmp	r3, #127	; 0x7f
 8005672:	d8f0      	bhi.n	8005656 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	637a      	str	r2, [r7, #52]	; 0x34
 800567a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
 800568c:	e00b      	b.n	80056a6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	b2da      	uxtb	r2, r3
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	1c59      	adds	r1, r3, #1
 8005696:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	09db      	lsrs	r3, r3, #7
 80056a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	2b7f      	cmp	r3, #127	; 0x7f
 80056aa:	d8f0      	bhi.n	800568e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	e00b      	b.n	80056de <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	1c59      	adds	r1, r3, #1
 80056ce:	6279      	str	r1, [r7, #36]	; 0x24
 80056d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	09db      	lsrs	r3, r3, #7
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2b7f      	cmp	r3, #127	; 0x7f
 80056e2:	d8f0      	bhi.n	80056c6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	627a      	str	r2, [r7, #36]	; 0x24
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	6979      	ldr	r1, [r7, #20]
 80056f8:	69b8      	ldr	r0, [r7, #24]
 80056fa:	f7ff fda5 	bl	8005248 <_SendPacket>
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	bf00      	nop
 8005706:	3738      	adds	r7, #56	; 0x38
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	2001a688 	.word	0x2001a688

08005710 <SEGGER_SYSVIEW_RecordU32x4>:
 8005710:	b580      	push	{r7, lr}
 8005712:	b090      	sub	sp, #64	; 0x40
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	f3ef 8311 	mrs	r3, BASEPRI
 8005722:	f04f 0120 	mov.w	r1, #32
 8005726:	f381 8811 	msr	BASEPRI, r1
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	4840      	ldr	r0, [pc, #256]	; (8005830 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800572e:	f7ff fca1 	bl	8005074 <_PreparePacket>
 8005732:	61b8      	str	r0, [r7, #24]
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005740:	e00b      	b.n	800575a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	b2da      	uxtb	r2, r3
 8005746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005748:	1c59      	adds	r1, r3, #1
 800574a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800574c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	09db      	lsrs	r3, r3, #7
 8005758:	63bb      	str	r3, [r7, #56]	; 0x38
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	2b7f      	cmp	r3, #127	; 0x7f
 800575e:	d8f0      	bhi.n	8005742 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	633b      	str	r3, [r7, #48]	; 0x30
 8005778:	e00b      	b.n	8005792 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	b2da      	uxtb	r2, r3
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	6379      	str	r1, [r7, #52]	; 0x34
 8005784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	09db      	lsrs	r3, r3, #7
 8005790:	633b      	str	r3, [r7, #48]	; 0x30
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	2b7f      	cmp	r3, #127	; 0x7f
 8005796:	d8f0      	bhi.n	800577a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	637a      	str	r2, [r7, #52]	; 0x34
 800579e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b0:	e00b      	b.n	80057ca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	1c59      	adds	r1, r3, #1
 80057ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	09db      	lsrs	r3, r3, #7
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	2b7f      	cmp	r3, #127	; 0x7f
 80057ce:	d8f0      	bhi.n	80057b2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e6:	623b      	str	r3, [r7, #32]
 80057e8:	e00b      	b.n	8005802 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	1c59      	adds	r1, r3, #1
 80057f2:	6279      	str	r1, [r7, #36]	; 0x24
 80057f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	09db      	lsrs	r3, r3, #7
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2b7f      	cmp	r3, #127	; 0x7f
 8005806:	d8f0      	bhi.n	80057ea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	627a      	str	r2, [r7, #36]	; 0x24
 800580e:	6a3a      	ldr	r2, [r7, #32]
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	6979      	ldr	r1, [r7, #20]
 800581c:	69b8      	ldr	r0, [r7, #24]
 800581e:	f7ff fd13 	bl	8005248 <_SendPacket>
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	bf00      	nop
 800582a:	3740      	adds	r7, #64	; 0x40
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	2001a688 	.word	0x2001a688

08005834 <SEGGER_SYSVIEW_Start>:
 8005834:	b580      	push	{r7, lr}
 8005836:	b08c      	sub	sp, #48	; 0x30
 8005838:	af00      	add	r7, sp, #0
 800583a:	4b58      	ldr	r3, [pc, #352]	; (800599c <SEGGER_SYSVIEW_Start+0x168>)
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	f3ef 8311 	mrs	r3, BASEPRI
 8005844:	f04f 0120 	mov.w	r1, #32
 8005848:	f381 8811 	msr	BASEPRI, r1
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	4b53      	ldr	r3, [pc, #332]	; (800599c <SEGGER_SYSVIEW_Start+0x168>)
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	220a      	movs	r2, #10
 8005854:	4952      	ldr	r1, [pc, #328]	; (80059a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005856:	4618      	mov	r0, r3
 8005858:	f7fa fcba 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	200a      	movs	r0, #10
 8005864:	f7ff fe2a 	bl	80054bc <SEGGER_SYSVIEW_RecordVoid>
 8005868:	f3ef 8311 	mrs	r3, BASEPRI
 800586c:	f04f 0120 	mov.w	r1, #32
 8005870:	f381 8811 	msr	BASEPRI, r1
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	484b      	ldr	r0, [pc, #300]	; (80059a4 <SEGGER_SYSVIEW_Start+0x170>)
 8005878:	f7ff fbfc 	bl	8005074 <_PreparePacket>
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005886:	4b45      	ldr	r3, [pc, #276]	; (800599c <SEGGER_SYSVIEW_Start+0x168>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
 800588c:	e00b      	b.n	80058a6 <SEGGER_SYSVIEW_Start+0x72>
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	b2da      	uxtb	r2, r3
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	1c59      	adds	r1, r3, #1
 8005896:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	09db      	lsrs	r3, r3, #7
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	2b7f      	cmp	r3, #127	; 0x7f
 80058aa:	d8f0      	bhi.n	800588e <SEGGER_SYSVIEW_Start+0x5a>
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
 80058c0:	4b36      	ldr	r3, [pc, #216]	; (800599c <SEGGER_SYSVIEW_Start+0x168>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	e00b      	b.n	80058e0 <SEGGER_SYSVIEW_Start+0xac>
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	1c59      	adds	r1, r3, #1
 80058d0:	6279      	str	r1, [r7, #36]	; 0x24
 80058d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	09db      	lsrs	r3, r3, #7
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	2b7f      	cmp	r3, #127	; 0x7f
 80058e4:	d8f0      	bhi.n	80058c8 <SEGGER_SYSVIEW_Start+0x94>
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	627a      	str	r2, [r7, #36]	; 0x24
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	603b      	str	r3, [r7, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	4b28      	ldr	r3, [pc, #160]	; (800599c <SEGGER_SYSVIEW_Start+0x168>)
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e00b      	b.n	800591a <SEGGER_SYSVIEW_Start+0xe6>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	1c59      	adds	r1, r3, #1
 800590a:	61f9      	str	r1, [r7, #28]
 800590c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	09db      	lsrs	r3, r3, #7
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b7f      	cmp	r3, #127	; 0x7f
 800591e:	d8f0      	bhi.n	8005902 <SEGGER_SYSVIEW_Start+0xce>
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	61fa      	str	r2, [r7, #28]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	e00b      	b.n	8005952 <SEGGER_SYSVIEW_Start+0x11e>
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	1c59      	adds	r1, r3, #1
 8005942:	6179      	str	r1, [r7, #20]
 8005944:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	09db      	lsrs	r3, r3, #7
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b7f      	cmp	r3, #127	; 0x7f
 8005956:	d8f0      	bhi.n	800593a <SEGGER_SYSVIEW_Start+0x106>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	617a      	str	r2, [r7, #20]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	2218      	movs	r2, #24
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff fc6b 	bl	8005248 <_SendPacket>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <SEGGER_SYSVIEW_Start+0x168>)
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <SEGGER_SYSVIEW_Start+0x152>
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <SEGGER_SYSVIEW_Start+0x168>)
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	4798      	blx	r3
 8005986:	f000 f9eb 	bl	8005d60 <SEGGER_SYSVIEW_RecordSystime>
 800598a:	f000 f9b1 	bl	8005cf0 <SEGGER_SYSVIEW_SendTaskList>
 800598e:	f000 fc81 	bl	8006294 <SEGGER_SYSVIEW_SendNumModules>
 8005992:	bf00      	nop
 8005994:	3730      	adds	r7, #48	; 0x30
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	2001a658 	.word	0x2001a658
 80059a0:	080065ac 	.word	0x080065ac
 80059a4:	2001a688 	.word	0x2001a688

080059a8 <SEGGER_SYSVIEW_Stop>:
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	f3ef 8311 	mrs	r3, BASEPRI
 80059b2:	f04f 0120 	mov.w	r1, #32
 80059b6:	f381 8811 	msr	BASEPRI, r1
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	480b      	ldr	r0, [pc, #44]	; (80059ec <SEGGER_SYSVIEW_Stop+0x44>)
 80059be:	f7ff fb59 	bl	8005074 <_PreparePacket>
 80059c2:	6038      	str	r0, [r7, #0]
 80059c4:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <SEGGER_SYSVIEW_Stop+0x34>
 80059cc:	220b      	movs	r2, #11
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6838      	ldr	r0, [r7, #0]
 80059d2:	f7ff fc39 	bl	8005248 <_SendPacket>
 80059d6:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	2001a688 	.word	0x2001a688
 80059f0:	2001a658 	.word	0x2001a658

080059f4 <SEGGER_SYSVIEW_GetSysDesc>:
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	f3ef 8311 	mrs	r3, BASEPRI
 80059fe:	f04f 0120 	mov.w	r1, #32
 8005a02:	f381 8811 	msr	BASEPRI, r1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	4845      	ldr	r0, [pc, #276]	; (8005b20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005a0a:	f7ff fb33 	bl	8005074 <_PreparePacket>
 8005a0e:	60b8      	str	r0, [r7, #8]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a18:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1e:	e00b      	b.n	8005a38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	1c59      	adds	r1, r3, #1
 8005a28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	09db      	lsrs	r3, r3, #7
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a3c:	d8f0      	bhi.n	8005a20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
 8005a52:	4b34      	ldr	r3, [pc, #208]	; (8005b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	623b      	str	r3, [r7, #32]
 8005a58:	e00b      	b.n	8005a72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	1c59      	adds	r1, r3, #1
 8005a62:	6279      	str	r1, [r7, #36]	; 0x24
 8005a64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	09db      	lsrs	r3, r3, #7
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	2b7f      	cmp	r3, #127	; 0x7f
 8005a76:	d8f0      	bhi.n	8005a5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a7e:	6a3a      	ldr	r2, [r7, #32]
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e00b      	b.n	8005aac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	61f9      	str	r1, [r7, #28]
 8005a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	09db      	lsrs	r3, r3, #7
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab0:	d8f0      	bhi.n	8005a94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	61fa      	str	r2, [r7, #28]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	e00b      	b.n	8005ae4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	1c59      	adds	r1, r3, #1
 8005ad4:	6179      	str	r1, [r7, #20]
 8005ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	09db      	lsrs	r3, r3, #7
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae8:	d8f0      	bhi.n	8005acc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	617a      	str	r2, [r7, #20]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	607b      	str	r3, [r7, #4]
 8005afa:	2218      	movs	r2, #24
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	68b8      	ldr	r0, [r7, #8]
 8005b00:	f7ff fba2 	bl	8005248 <_SendPacket>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
 8005b12:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	4798      	blx	r3
 8005b18:	bf00      	nop
 8005b1a:	3730      	adds	r7, #48	; 0x30
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	2001a688 	.word	0x2001a688
 8005b24:	2001a658 	.word	0x2001a658

08005b28 <SEGGER_SYSVIEW_SendTaskInfo>:
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b092      	sub	sp, #72	; 0x48
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	f3ef 8311 	mrs	r3, BASEPRI
 8005b34:	f04f 0120 	mov.w	r1, #32
 8005b38:	f381 8811 	msr	BASEPRI, r1
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	486a      	ldr	r0, [pc, #424]	; (8005ce8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005b40:	f7ff fa98 	bl	8005074 <_PreparePacket>
 8005b44:	6138      	str	r0, [r7, #16]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b66      	ldr	r3, [pc, #408]	; (8005cec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	643b      	str	r3, [r7, #64]	; 0x40
 8005b5a:	e00b      	b.n	8005b74 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	6479      	str	r1, [r7, #68]	; 0x44
 8005b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b70:	09db      	lsrs	r3, r3, #7
 8005b72:	643b      	str	r3, [r7, #64]	; 0x40
 8005b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b76:	2b7f      	cmp	r3, #127	; 0x7f
 8005b78:	d8f0      	bhi.n	8005b5c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b94:	e00b      	b.n	8005bae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9c:	1c59      	adds	r1, r3, #1
 8005b9e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	09db      	lsrs	r3, r3, #7
 8005bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb2:	d8f0      	bhi.n	8005b96 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff fa01 	bl	8004fd4 <_EncodeStr>
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	2209      	movs	r2, #9
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	6938      	ldr	r0, [r7, #16]
 8005bda:	f7ff fb35 	bl	8005248 <_SendPacket>
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	637b      	str	r3, [r7, #52]	; 0x34
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b40      	ldr	r3, [pc, #256]	; (8005cec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf2:	e00b      	b.n	8005c0c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	6379      	str	r1, [r7, #52]	; 0x34
 8005bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	09db      	lsrs	r3, r3, #7
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c10:	d8f0      	bhi.n	8005bf4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	637a      	str	r2, [r7, #52]	; 0x34
 8005c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2c:	e00b      	b.n	8005c46 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	1c59      	adds	r1, r3, #1
 8005c36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	09db      	lsrs	r3, r3, #7
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4a:	d8f0      	bhi.n	8005c2e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	623b      	str	r3, [r7, #32]
 8005c66:	e00b      	b.n	8005c80 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	6279      	str	r1, [r7, #36]	; 0x24
 8005c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	09db      	lsrs	r3, r3, #7
 8005c7e:	623b      	str	r3, [r7, #32]
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	2b7f      	cmp	r3, #127	; 0x7f
 8005c84:	d8f0      	bhi.n	8005c68 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c8c:	6a3a      	ldr	r2, [r7, #32]
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e00b      	b.n	8005cb8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	1c59      	adds	r1, r3, #1
 8005ca8:	61f9      	str	r1, [r7, #28]
 8005caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	09db      	lsrs	r3, r3, #7
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b7f      	cmp	r3, #127	; 0x7f
 8005cbc:	d8f0      	bhi.n	8005ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	61fa      	str	r2, [r7, #28]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	2215      	movs	r2, #21
 8005cd0:	68f9      	ldr	r1, [r7, #12]
 8005cd2:	6938      	ldr	r0, [r7, #16]
 8005cd4:	f7ff fab8 	bl	8005248 <_SendPacket>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	bf00      	nop
 8005ce0:	3748      	adds	r7, #72	; 0x48
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2001a688 	.word	0x2001a688
 8005cec:	2001a658 	.word	0x2001a658

08005cf0 <SEGGER_SYSVIEW_SendTaskList>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005d06:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4798      	blx	r3
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	2001a658 	.word	0x2001a658

08005d18 <SEGGER_SYSVIEW_SendSysDesc>:
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	f3ef 8311 	mrs	r3, BASEPRI
 8005d24:	f04f 0120 	mov.w	r1, #32
 8005d28:	f381 8811 	msr	BASEPRI, r1
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	480b      	ldr	r0, [pc, #44]	; (8005d5c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005d30:	f7ff f9a0 	bl	8005074 <_PreparePacket>
 8005d34:	6138      	str	r0, [r7, #16]
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	6938      	ldr	r0, [r7, #16]
 8005d3c:	f7ff f94a 	bl	8004fd4 <_EncodeStr>
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	220e      	movs	r2, #14
 8005d44:	68f9      	ldr	r1, [r7, #12]
 8005d46:	6938      	ldr	r0, [r7, #16]
 8005d48:	f7ff fa7e 	bl	8005248 <_SendPacket>
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	bf00      	nop
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	2001a688 	.word	0x2001a688

08005d60 <SEGGER_SYSVIEW_RecordSystime>:
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d019      	beq.n	8005da2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d014      	beq.n	8005da2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005d78:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4798      	blx	r3
 8005d80:	e9c7 0100 	strd	r0, r1, [r7]
 8005d84:	6838      	ldr	r0, [r7, #0]
 8005d86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	f04f 0400 	mov.w	r4, #0
 8005d92:	0013      	movs	r3, r2
 8005d94:	2400      	movs	r4, #0
 8005d96:	461a      	mov	r2, r3
 8005d98:	4601      	mov	r1, r0
 8005d9a:	200d      	movs	r0, #13
 8005d9c:	f7ff fbe8 	bl	8005570 <SEGGER_SYSVIEW_RecordU32x2>
 8005da0:	e005      	b.n	8005dae <SEGGER_SYSVIEW_RecordSystime+0x4e>
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	200c      	movs	r0, #12
 8005daa:	f7ff fba5 	bl	80054f8 <SEGGER_SYSVIEW_RecordU32>
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd90      	pop	{r4, r7, pc}
 8005db6:	bf00      	nop
 8005db8:	2001a658 	.word	0x2001a658
 8005dbc:	e0001004 	.word	0xe0001004

08005dc0 <SEGGER_SYSVIEW_RecordEnterISR>:
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dca:	f04f 0120 	mov.w	r1, #32
 8005dce:	f381 8811 	msr	BASEPRI, r1
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	4819      	ldr	r0, [pc, #100]	; (8005e3c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005dd6:	f7ff f94d 	bl	8005074 <_PreparePacket>
 8005dda:	60b8      	str	r0, [r7, #8]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	e00b      	b.n	8005e0c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	1c59      	adds	r1, r3, #1
 8005dfc:	6179      	str	r1, [r7, #20]
 8005dfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	09db      	lsrs	r3, r3, #7
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e10:	d8f0      	bhi.n	8005df4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	617a      	str	r2, [r7, #20]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	68b8      	ldr	r0, [r7, #8]
 8005e28:	f7ff fa0e 	bl	8005248 <_SendPacket>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	bf00      	nop
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	2001a688 	.word	0x2001a688
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <SEGGER_SYSVIEW_RecordExitISR>:
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4e:	f04f 0120 	mov.w	r1, #32
 8005e52:	f381 8811 	msr	BASEPRI, r1
 8005e56:	607b      	str	r3, [r7, #4]
 8005e58:	4807      	ldr	r0, [pc, #28]	; (8005e78 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e5a:	f7ff f90b 	bl	8005074 <_PreparePacket>
 8005e5e:	6038      	str	r0, [r7, #0]
 8005e60:	2203      	movs	r2, #3
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6838      	ldr	r0, [r7, #0]
 8005e66:	f7ff f9ef 	bl	8005248 <_SendPacket>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	2001a688 	.word	0x2001a688

08005e7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	f3ef 8311 	mrs	r3, BASEPRI
 8005e86:	f04f 0120 	mov.w	r1, #32
 8005e8a:	f381 8811 	msr	BASEPRI, r1
 8005e8e:	607b      	str	r3, [r7, #4]
 8005e90:	4807      	ldr	r0, [pc, #28]	; (8005eb0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e92:	f7ff f8ef 	bl	8005074 <_PreparePacket>
 8005e96:	6038      	str	r0, [r7, #0]
 8005e98:	2212      	movs	r2, #18
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6838      	ldr	r0, [r7, #0]
 8005e9e:	f7ff f9d3 	bl	8005248 <_SendPacket>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	2001a688 	.word	0x2001a688

08005eb4 <SEGGER_SYSVIEW_OnIdle>:
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebe:	f04f 0120 	mov.w	r1, #32
 8005ec2:	f381 8811 	msr	BASEPRI, r1
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	4807      	ldr	r0, [pc, #28]	; (8005ee8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005eca:	f7ff f8d3 	bl	8005074 <_PreparePacket>
 8005ece:	6038      	str	r0, [r7, #0]
 8005ed0:	2211      	movs	r2, #17
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6838      	ldr	r0, [r7, #0]
 8005ed6:	f7ff f9b7 	bl	8005248 <_SendPacket>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	2001a688 	.word	0x2001a688

08005eec <SEGGER_SYSVIEW_OnTaskCreate>:
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef8:	f04f 0120 	mov.w	r1, #32
 8005efc:	f381 8811 	msr	BASEPRI, r1
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	4819      	ldr	r0, [pc, #100]	; (8005f68 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005f04:	f7ff f8b6 	bl	8005074 <_PreparePacket>
 8005f08:	6138      	str	r0, [r7, #16]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e00b      	b.n	8005f3a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	1c59      	adds	r1, r3, #1
 8005f2a:	61f9      	str	r1, [r7, #28]
 8005f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	09db      	lsrs	r3, r3, #7
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3e:	d8f0      	bhi.n	8005f22 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	61fa      	str	r2, [r7, #28]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	2208      	movs	r2, #8
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	6938      	ldr	r0, [r7, #16]
 8005f56:	f7ff f977 	bl	8005248 <_SendPacket>
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	bf00      	nop
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	2001a688 	.word	0x2001a688
 8005f6c:	2001a658 	.word	0x2001a658

08005f70 <SEGGER_SYSVIEW_OnTaskStartExec>:
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	f3ef 8311 	mrs	r3, BASEPRI
 8005f7c:	f04f 0120 	mov.w	r1, #32
 8005f80:	f381 8811 	msr	BASEPRI, r1
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	4819      	ldr	r0, [pc, #100]	; (8005fec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f88:	f7ff f874 	bl	8005074 <_PreparePacket>
 8005f8c:	6138      	str	r0, [r7, #16]
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	e00b      	b.n	8005fbe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	1c59      	adds	r1, r3, #1
 8005fae:	61f9      	str	r1, [r7, #28]
 8005fb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	09db      	lsrs	r3, r3, #7
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc2:	d8f0      	bhi.n	8005fa6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	61fa      	str	r2, [r7, #28]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	6938      	ldr	r0, [r7, #16]
 8005fda:	f7ff f935 	bl	8005248 <_SendPacket>
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	bf00      	nop
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	2001a688 	.word	0x2001a688
 8005ff0:	2001a658 	.word	0x2001a658

08005ff4 <SEGGER_SYSVIEW_OnTaskStartReady>:
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8006000:	f04f 0120 	mov.w	r1, #32
 8006004:	f381 8811 	msr	BASEPRI, r1
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	4819      	ldr	r0, [pc, #100]	; (8006070 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800600c:	f7ff f832 	bl	8005074 <_PreparePacket>
 8006010:	6138      	str	r0, [r7, #16]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	4b17      	ldr	r3, [pc, #92]	; (8006074 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	607b      	str	r3, [r7, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	e00b      	b.n	8006042 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	1c59      	adds	r1, r3, #1
 8006032:	61f9      	str	r1, [r7, #28]
 8006034:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	09db      	lsrs	r3, r3, #7
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b7f      	cmp	r3, #127	; 0x7f
 8006046:	d8f0      	bhi.n	800602a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	61fa      	str	r2, [r7, #28]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	2206      	movs	r2, #6
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	6938      	ldr	r0, [r7, #16]
 800605e:	f7ff f8f3 	bl	8005248 <_SendPacket>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	bf00      	nop
 800606a:	3720      	adds	r7, #32
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	2001a688 	.word	0x2001a688
 8006074:	2001a658 	.word	0x2001a658

08006078 <SEGGER_SYSVIEW_OnTaskStopReady>:
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	f3ef 8311 	mrs	r3, BASEPRI
 8006086:	f04f 0120 	mov.w	r1, #32
 800608a:	f381 8811 	msr	BASEPRI, r1
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	4827      	ldr	r0, [pc, #156]	; (8006130 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006092:	f7fe ffef 	bl	8005074 <_PreparePacket>
 8006096:	6138      	str	r0, [r7, #16]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	4b25      	ldr	r3, [pc, #148]	; (8006134 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	623b      	str	r3, [r7, #32]
 80060ae:	e00b      	b.n	80060c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	1c59      	adds	r1, r3, #1
 80060b8:	6279      	str	r1, [r7, #36]	; 0x24
 80060ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	09db      	lsrs	r3, r3, #7
 80060c6:	623b      	str	r3, [r7, #32]
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	2b7f      	cmp	r3, #127	; 0x7f
 80060cc:	d8f0      	bhi.n	80060b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	627a      	str	r2, [r7, #36]	; 0x24
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e00b      	b.n	8006100 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	61f9      	str	r1, [r7, #28]
 80060f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	09db      	lsrs	r3, r3, #7
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b7f      	cmp	r3, #127	; 0x7f
 8006104:	d8f0      	bhi.n	80060e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	61fa      	str	r2, [r7, #28]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	2207      	movs	r2, #7
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	6938      	ldr	r0, [r7, #16]
 800611c:	f7ff f894 	bl	8005248 <_SendPacket>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	bf00      	nop
 8006128:	3728      	adds	r7, #40	; 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	2001a688 	.word	0x2001a688
 8006134:	2001a658 	.word	0x2001a658

08006138 <SEGGER_SYSVIEW_ShrinkId>:
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	4b04      	ldr	r3, [pc, #16]	; (8006154 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	2001a658 	.word	0x2001a658

08006158 <SEGGER_SYSVIEW_SendModule>:
 8006158:	b580      	push	{r7, lr}
 800615a:	b08c      	sub	sp, #48	; 0x30
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	71fb      	strb	r3, [r7, #7]
 8006162:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d06d      	beq.n	8006246 <SEGGER_SYSVIEW_SendModule+0xee>
 800616a:	4b39      	ldr	r3, [pc, #228]	; (8006250 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006170:	2300      	movs	r3, #0
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
 8006174:	e008      	b.n	8006188 <SEGGER_SYSVIEW_SendModule+0x30>
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <SEGGER_SYSVIEW_SendModule+0x3a>
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	3301      	adds	r3, #1
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800618c:	429a      	cmp	r2, r3
 800618e:	d3f2      	bcc.n	8006176 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006190:	e000      	b.n	8006194 <SEGGER_SYSVIEW_SendModule+0x3c>
 8006192:	bf00      	nop
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d055      	beq.n	8006246 <SEGGER_SYSVIEW_SendModule+0xee>
 800619a:	f3ef 8311 	mrs	r3, BASEPRI
 800619e:	f04f 0120 	mov.w	r1, #32
 80061a2:	f381 8811 	msr	BASEPRI, r1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	482a      	ldr	r0, [pc, #168]	; (8006254 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80061aa:	f7fe ff63 	bl	8005074 <_PreparePacket>
 80061ae:	6138      	str	r0, [r7, #16]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	623b      	str	r3, [r7, #32]
 80061bc:	e00b      	b.n	80061d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	1c59      	adds	r1, r3, #1
 80061c6:	6279      	str	r1, [r7, #36]	; 0x24
 80061c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	09db      	lsrs	r3, r3, #7
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	2b7f      	cmp	r3, #127	; 0x7f
 80061da:	d8f0      	bhi.n	80061be <SEGGER_SYSVIEW_SendModule+0x66>
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	627a      	str	r2, [r7, #36]	; 0x24
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	e00b      	b.n	8006210 <SEGGER_SYSVIEW_SendModule+0xb8>
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	61f9      	str	r1, [r7, #28]
 8006202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	09db      	lsrs	r3, r3, #7
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b7f      	cmp	r3, #127	; 0x7f
 8006214:	d8f0      	bhi.n	80061f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	61fa      	str	r2, [r7, #28]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2280      	movs	r2, #128	; 0x80
 800622c:	4619      	mov	r1, r3
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7fe fed0 	bl	8004fd4 <_EncodeStr>
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	2216      	movs	r2, #22
 8006238:	68f9      	ldr	r1, [r7, #12]
 800623a:	6938      	ldr	r0, [r7, #16]
 800623c:	f7ff f804 	bl	8005248 <_SendPacket>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	bf00      	nop
 8006248:	3730      	adds	r7, #48	; 0x30
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	2001a680 	.word	0x2001a680
 8006254:	2001a688 	.word	0x2001a688

08006258 <SEGGER_SYSVIEW_SendModuleDescription>:
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00f      	beq.n	8006286 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
 8006266:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	4798      	blx	r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f2      	bne.n	800626c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	2001a680 	.word	0x2001a680

08006294 <SEGGER_SYSVIEW_SendNumModules>:
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	f3ef 8311 	mrs	r3, BASEPRI
 800629e:	f04f 0120 	mov.w	r1, #32
 80062a2:	f381 8811 	msr	BASEPRI, r1
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	4817      	ldr	r0, [pc, #92]	; (8006308 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80062aa:	f7fe fee3 	bl	8005074 <_PreparePacket>
 80062ae:	60b8      	str	r0, [r7, #8]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	607b      	str	r3, [r7, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	4b14      	ldr	r3, [pc, #80]	; (800630c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	e00b      	b.n	80062d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	1c59      	adds	r1, r3, #1
 80062c8:	6179      	str	r1, [r7, #20]
 80062ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	09db      	lsrs	r3, r3, #7
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b7f      	cmp	r3, #127	; 0x7f
 80062dc:	d8f0      	bhi.n	80062c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	617a      	str	r2, [r7, #20]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	221b      	movs	r2, #27
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	68b8      	ldr	r0, [r7, #8]
 80062f4:	f7fe ffa8 	bl	8005248 <_SendPacket>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	bf00      	nop
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	2001a688 	.word	0x2001a688
 800630c:	2001a684 	.word	0x2001a684

08006310 <SEGGER_SYSVIEW_Warn>:
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	; 0x28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	f3ef 8311 	mrs	r3, BASEPRI
 800631c:	f04f 0120 	mov.w	r1, #32
 8006320:	f381 8811 	msr	BASEPRI, r1
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	4827      	ldr	r0, [pc, #156]	; (80063c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006328:	f7fe fea4 	bl	8005074 <_PreparePacket>
 800632c:	6138      	str	r0, [r7, #16]
 800632e:	2280      	movs	r2, #128	; 0x80
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	6938      	ldr	r0, [r7, #16]
 8006334:	f7fe fe4e 	bl	8004fd4 <_EncodeStr>
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
 800633e:	2301      	movs	r3, #1
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	e00b      	b.n	800635c <SEGGER_SYSVIEW_Warn+0x4c>
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	6279      	str	r1, [r7, #36]	; 0x24
 800634e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	09db      	lsrs	r3, r3, #7
 800635a:	623b      	str	r3, [r7, #32]
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	2b7f      	cmp	r3, #127	; 0x7f
 8006360:	d8f0      	bhi.n	8006344 <SEGGER_SYSVIEW_Warn+0x34>
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	627a      	str	r2, [r7, #36]	; 0x24
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	e00b      	b.n	8006394 <SEGGER_SYSVIEW_Warn+0x84>
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	61f9      	str	r1, [r7, #28]
 8006386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	09db      	lsrs	r3, r3, #7
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b7f      	cmp	r3, #127	; 0x7f
 8006398:	d8f0      	bhi.n	800637c <SEGGER_SYSVIEW_Warn+0x6c>
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	61fa      	str	r2, [r7, #28]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	221a      	movs	r2, #26
 80063ac:	68f9      	ldr	r1, [r7, #12]
 80063ae:	6938      	ldr	r0, [r7, #16]
 80063b0:	f7fe ff4a 	bl	8005248 <_SendPacket>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	bf00      	nop
 80063bc:	3728      	adds	r7, #40	; 0x28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	2001a688 	.word	0x2001a688

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4e0d      	ldr	r6, [pc, #52]	; (8006400 <__libc_init_array+0x38>)
 80063cc:	4c0d      	ldr	r4, [pc, #52]	; (8006404 <__libc_init_array+0x3c>)
 80063ce:	1ba4      	subs	r4, r4, r6
 80063d0:	10a4      	asrs	r4, r4, #2
 80063d2:	2500      	movs	r5, #0
 80063d4:	42a5      	cmp	r5, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	4e0b      	ldr	r6, [pc, #44]	; (8006408 <__libc_init_array+0x40>)
 80063da:	4c0c      	ldr	r4, [pc, #48]	; (800640c <__libc_init_array+0x44>)
 80063dc:	f000 f83a 	bl	8006454 <_init>
 80063e0:	1ba4      	subs	r4, r4, r6
 80063e2:	10a4      	asrs	r4, r4, #2
 80063e4:	2500      	movs	r5, #0
 80063e6:	42a5      	cmp	r5, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f0:	4798      	blx	r3
 80063f2:	3501      	adds	r5, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063fa:	4798      	blx	r3
 80063fc:	3501      	adds	r5, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	080065c0 	.word	0x080065c0
 8006404:	080065c0 	.word	0x080065c0
 8006408:	080065c0 	.word	0x080065c0
 800640c:	080065c4 	.word	0x080065c4

08006410 <memcmp>:
 8006410:	b530      	push	{r4, r5, lr}
 8006412:	2400      	movs	r4, #0
 8006414:	42a2      	cmp	r2, r4
 8006416:	d101      	bne.n	800641c <memcmp+0xc>
 8006418:	2000      	movs	r0, #0
 800641a:	e007      	b.n	800642c <memcmp+0x1c>
 800641c:	5d03      	ldrb	r3, [r0, r4]
 800641e:	3401      	adds	r4, #1
 8006420:	190d      	adds	r5, r1, r4
 8006422:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006426:	42ab      	cmp	r3, r5
 8006428:	d0f4      	beq.n	8006414 <memcmp+0x4>
 800642a:	1b58      	subs	r0, r3, r5
 800642c:	bd30      	pop	{r4, r5, pc}

0800642e <memcpy>:
 800642e:	b510      	push	{r4, lr}
 8006430:	1e43      	subs	r3, r0, #1
 8006432:	440a      	add	r2, r1
 8006434:	4291      	cmp	r1, r2
 8006436:	d100      	bne.n	800643a <memcpy+0xc>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800643e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006442:	e7f7      	b.n	8006434 <memcpy+0x6>

08006444 <memset>:
 8006444:	4402      	add	r2, r0
 8006446:	4603      	mov	r3, r0
 8006448:	4293      	cmp	r3, r2
 800644a:	d100      	bne.n	800644e <memset+0xa>
 800644c:	4770      	bx	lr
 800644e:	f803 1b01 	strb.w	r1, [r3], #1
 8006452:	e7f9      	b.n	8006448 <memset+0x4>

08006454 <_init>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr

08006460 <_fini>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr
