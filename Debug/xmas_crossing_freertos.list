
xmas_crossing_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c8  080073c8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d0  080073d0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080073d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a904  20000014  080073ec  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a918  080073ec  0002a918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b71  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032e0  00000000  00000000  00038bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003be98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001198  00000000  00000000  0003d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000243c4  00000000  00000000  0003e380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001416e  00000000  00000000  00062744  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d641b  00000000  00000000  000768b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f64  00000000  00000000  0014cd48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007254 	.word	0x08007254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007254 	.word	0x08007254

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a870 	.word	0x2001a870

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b972 	b.w	8000560 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14b      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	d967      	bls.n	8000378 <__udivmoddi4+0xe4>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0720 	rsb	r7, r2, #32
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ba:	4095      	lsls	r5, r2
 80002bc:	ea47 0803 	orr.w	r8, r7, r3
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002cc:	fa1f fc85 	uxth.w	ip, r5
 80002d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d8:	fb07 f10c 	mul.w	r1, r7, ip
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18eb      	adds	r3, r5, r3
 80002e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e6:	f080 811b 	bcs.w	8000520 <__udivmoddi4+0x28c>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8118 	bls.w	8000520 <__udivmoddi4+0x28c>
 80002f0:	3f02      	subs	r7, #2
 80002f2:	442b      	add	r3, r5
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fc0c 	mul.w	ip, r0, ip
 8000308:	45a4      	cmp	ip, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8107 	bcs.w	8000524 <__udivmoddi4+0x290>
 8000316:	45a4      	cmp	ip, r4
 8000318:	f240 8104 	bls.w	8000524 <__udivmoddi4+0x290>
 800031c:	3802      	subs	r0, #2
 800031e:	442c      	add	r4, r5
 8000320:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000324:	eba4 040c 	sub.w	r4, r4, ip
 8000328:	2700      	movs	r7, #0
 800032a:	b11e      	cbz	r6, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c6 4300 	strd	r4, r3, [r6]
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0xbe>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80eb 	beq.w	800051a <__udivmoddi4+0x286>
 8000344:	2700      	movs	r7, #0
 8000346:	e9c6 0100 	strd	r0, r1, [r6]
 800034a:	4638      	mov	r0, r7
 800034c:	4639      	mov	r1, r7
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f783 	clz	r7, r3
 8000356:	2f00      	cmp	r7, #0
 8000358:	d147      	bne.n	80003ea <__udivmoddi4+0x156>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xd0>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80fa 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0303 	sbc.w	r3, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	4698      	mov	r8, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0e0      	beq.n	8000334 <__udivmoddi4+0xa0>
 8000372:	e9c6 4800 	strd	r4, r8, [r6]
 8000376:	e7dd      	b.n	8000334 <__udivmoddi4+0xa0>
 8000378:	b902      	cbnz	r2, 800037c <__udivmoddi4+0xe8>
 800037a:	deff      	udf	#255	; 0xff
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	2a00      	cmp	r2, #0
 8000382:	f040 808f 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000386:	1b49      	subs	r1, r1, r5
 8000388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800038c:	fa1f f885 	uxth.w	r8, r5
 8000390:	2701      	movs	r7, #1
 8000392:	fbb1 fcfe 	udiv	ip, r1, lr
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fb0e 111c 	mls	r1, lr, ip, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb08 f10c 	mul.w	r1, r8, ip
 80003a4:	4299      	cmp	r1, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a8:	18eb      	adds	r3, r5, r3
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4299      	cmp	r1, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1a59      	subs	r1, r3, r1
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x14c>
 80003d0:	192c      	adds	r4, r5, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x14a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80b6 	bhi.w	800054a <__udivmoddi4+0x2b6>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e79f      	b.n	800032a <__udivmoddi4+0x96>
 80003ea:	f1c7 0c20 	rsb	ip, r7, #32
 80003ee:	40bb      	lsls	r3, r7
 80003f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f8:	fa01 f407 	lsl.w	r4, r1, r7
 80003fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000400:	fa21 f30c 	lsr.w	r3, r1, ip
 8000404:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000408:	4325      	orrs	r5, r4
 800040a:	fbb3 f9f8 	udiv	r9, r3, r8
 800040e:	0c2c      	lsrs	r4, r5, #16
 8000410:	fb08 3319 	mls	r3, r8, r9, r3
 8000414:	fa1f fa8e 	uxth.w	sl, lr
 8000418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800041c:	fb09 f40a 	mul.w	r4, r9, sl
 8000420:	429c      	cmp	r4, r3
 8000422:	fa02 f207 	lsl.w	r2, r2, r7
 8000426:	fa00 f107 	lsl.w	r1, r0, r7
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1e 0303 	adds.w	r3, lr, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	f080 8087 	bcs.w	8000546 <__udivmoddi4+0x2b2>
 8000438:	429c      	cmp	r4, r3
 800043a:	f240 8084 	bls.w	8000546 <__udivmoddi4+0x2b2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4473      	add	r3, lr
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	b2ad      	uxth	r5, r5
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000454:	fb00 fa0a 	mul.w	sl, r0, sl
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1e 0404 	adds.w	r4, lr, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	d26b      	bcs.n	800053e <__udivmoddi4+0x2aa>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d969      	bls.n	800053e <__udivmoddi4+0x2aa>
 800046a:	3802      	subs	r0, #2
 800046c:	4474      	add	r4, lr
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c2      	mov	sl, r8
 800047e:	464b      	mov	r3, r9
 8000480:	d354      	bcc.n	800052c <__udivmoddi4+0x298>
 8000482:	d051      	beq.n	8000528 <__udivmoddi4+0x294>
 8000484:	2e00      	cmp	r6, #0
 8000486:	d069      	beq.n	800055c <__udivmoddi4+0x2c8>
 8000488:	ebb1 050a 	subs.w	r5, r1, sl
 800048c:	eb64 0403 	sbc.w	r4, r4, r3
 8000490:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000494:	40fd      	lsrs	r5, r7
 8000496:	40fc      	lsrs	r4, r7
 8000498:	ea4c 0505 	orr.w	r5, ip, r5
 800049c:	e9c6 5400 	strd	r5, r4, [r6]
 80004a0:	2700      	movs	r7, #0
 80004a2:	e747      	b.n	8000334 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ac:	4095      	lsls	r5, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	fa21 f303 	lsr.w	r3, r1, r3
 80004b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ba:	4338      	orrs	r0, r7
 80004bc:	0c01      	lsrs	r1, r0, #16
 80004be:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c2:	fa1f f885 	uxth.w	r8, r5
 80004c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb07 f308 	mul.w	r3, r7, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x256>
 80004da:	1869      	adds	r1, r5, r1
 80004dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e0:	d22f      	bcs.n	8000542 <__udivmoddi4+0x2ae>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d92d      	bls.n	8000542 <__udivmoddi4+0x2ae>
 80004e6:	3f02      	subs	r7, #2
 80004e8:	4429      	add	r1, r5
 80004ea:	1acb      	subs	r3, r1, r3
 80004ec:	b281      	uxth	r1, r0
 80004ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb00 f308 	mul.w	r3, r0, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x27e>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f100 3cff 	add.w	ip, r0, #4294967295
 8000508:	d217      	bcs.n	800053a <__udivmoddi4+0x2a6>
 800050a:	428b      	cmp	r3, r1
 800050c:	d915      	bls.n	800053a <__udivmoddi4+0x2a6>
 800050e:	3802      	subs	r0, #2
 8000510:	4429      	add	r1, r5
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000518:	e73b      	b.n	8000392 <__udivmoddi4+0xfe>
 800051a:	4637      	mov	r7, r6
 800051c:	4630      	mov	r0, r6
 800051e:	e709      	b.n	8000334 <__udivmoddi4+0xa0>
 8000520:	4607      	mov	r7, r0
 8000522:	e6e7      	b.n	80002f4 <__udivmoddi4+0x60>
 8000524:	4618      	mov	r0, r3
 8000526:	e6fb      	b.n	8000320 <__udivmoddi4+0x8c>
 8000528:	4541      	cmp	r1, r8
 800052a:	d2ab      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 800052c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000530:	eb69 020e 	sbc.w	r2, r9, lr
 8000534:	3801      	subs	r0, #1
 8000536:	4613      	mov	r3, r2
 8000538:	e7a4      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053a:	4660      	mov	r0, ip
 800053c:	e7e9      	b.n	8000512 <__udivmoddi4+0x27e>
 800053e:	4618      	mov	r0, r3
 8000540:	e795      	b.n	800046e <__udivmoddi4+0x1da>
 8000542:	4667      	mov	r7, ip
 8000544:	e7d1      	b.n	80004ea <__udivmoddi4+0x256>
 8000546:	4681      	mov	r9, r0
 8000548:	e77c      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054a:	3802      	subs	r0, #2
 800054c:	442c      	add	r4, r5
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0x14c>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	442b      	add	r3, r5
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	4638      	mov	r0, r7
 800055a:	e708      	b.n	800036e <__udivmoddi4+0xda>
 800055c:	4637      	mov	r7, r6
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0xa0>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <vTask_GateCtrl>:
 */

extern TIM_HandleTypeDef htim3;

void vTask_GateCtrl(void* params)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	for( ; ; )
	{
		/* slowly lower gate */
		if ( state_machine_get_state() == CLC_train_crossing )
 800056c:	f000 f8d0 	bl	8000710 <state_machine_get_state>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d103      	bne.n	800057e <vTask_GateCtrl+0x1a>
		{
			gate_ctrl_update_servo_angle( GATE_CTRL_LOWER );
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f808 	bl	800058c <gate_ctrl_update_servo_angle>
 800057c:	e002      	b.n	8000584 <vTask_GateCtrl+0x20>
		}

		/* slowly raise gate */
		else /* train is not crossing */
		{
			gate_ctrl_update_servo_angle( GATE_CTRL_RAISE );
 800057e:	2001      	movs	r0, #1
 8000580:	f000 f804 	bl	800058c <gate_ctrl_update_servo_angle>
		 *
		 * Time from fully raised to fully lowered or vice versa is based on 4 seconds
		 * 4 seconds = 4000 ms / (GATE_CTRL_GATE_FULLY_RAISED_SERVO_VAL - GATE_CTRL_GATE_FULLY_LOWERED_SERVO_VAL)
		 * Therefore, 4ms task delay is required
		 */
		vTaskDelay(pdMS_TO_TICKS(4));
 8000584:	2004      	movs	r0, #4
 8000586:	f003 fbed 	bl	8003d64 <vTaskDelay>
		if ( state_machine_get_state() == CLC_train_crossing )
 800058a:	e7ef      	b.n	800056c <vTask_GateCtrl+0x8>

0800058c <gate_ctrl_update_servo_angle>:
	}
}

void gate_ctrl_update_servo_angle(uint8_t servoDir)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	if ( servoDir == GATE_CTRL_RAISE )
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d107      	bne.n	80005ac <gate_ctrl_update_servo_angle+0x20>
	{
		htim3.Instance->CCR1 = htim3.Instance->CCR1 + 1;	/* INCREASE capture compare reg to increase duty cycle */
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3201      	adds	r2, #1
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
 80005aa:	e009      	b.n	80005c0 <gate_ctrl_update_servo_angle+0x34>
	}
	else if ( servoDir == GATE_CTRL_LOWER )
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d106      	bne.n	80005c0 <gate_ctrl_update_servo_angle+0x34>
	{
		htim3.Instance->CCR1 = htim3.Instance->CCR1 - 1;	/* DECREASE capture compare reg to increase duty cycle */
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3a01      	subs	r2, #1
 80005be:	635a      	str	r2, [r3, #52]	; 0x34
	 *
	 * #define GATE_CTRL_GATE_FULLY_LOWERED_SERVO_VAL 	(min value)
	 * #define GATE_CTRL_GATE_FULLY_RAISED_SERVO_VAL	(max value)
	 *
	 * */
	htim3.Instance->CCR1 = gate_ctrl_servo_angle_check( htim3.Instance->CCR1 );
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80005ca:	d805      	bhi.n	80005d8 <gate_ctrl_update_servo_angle+0x4c>
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80005d6:	d30c      	bcc.n	80005f2 <gate_ctrl_update_servo_angle+0x66>
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005de:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80005e2:	d803      	bhi.n	80005ec <gate_ctrl_update_servo_angle+0x60>
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ea:	e004      	b.n	80005f6 <gate_ctrl_update_servo_angle+0x6a>
 80005ec:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80005f0:	e001      	b.n	80005f6 <gate_ctrl_update_servo_angle+0x6a>
 80005f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <gate_ctrl_update_servo_angle+0x7c>)
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	6353      	str	r3, [r2, #52]	; 0x34
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	2001a770 	.word	0x2001a770

0800060c <vTask_IntersectionCtrl>:
 */

extern TIM_HandleTypeDef htim3;

void vTask_IntersectionCtrl(void* params)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;         // will hold the timestamp at which the task was last unblocked

	// Initialize the xLastWakeTime variable with the current time;
	xLastWakeTime = xTaskGetTickCount();
 8000614:	f003 fcec 	bl	8003ff0 <xTaskGetTickCount>
 8000618:	4603      	mov	r3, r0
 800061a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		if ( state_machine_get_state() == CLC_train_crossing )
 800061c:	f000 f878 	bl	8000710 <state_machine_get_state>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d112      	bne.n	800064c <vTask_IntersectionCtrl+0x40>
		{
			/* Flash Red Led */
			HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	480f      	ldr	r0, [pc, #60]	; (8000668 <vTask_IntersectionCtrl+0x5c>)
 800062c:	f000 fb6b 	bl	8000d06 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <vTask_IntersectionCtrl+0x5c>)
 8000638:	f000 fb4c 	bl	8000cd4 <HAL_GPIO_WritePin>

			vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(750) );
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	f240 21ee 	movw	r1, #750	; 0x2ee
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fb0f 	bl	8003c68 <xTaskDelayUntil>
 800064a:	e7e7      	b.n	800061c <vTask_IntersectionCtrl+0x10>
		}
		else
		{
			/* Solid Green Led */
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <vTask_IntersectionCtrl+0x5c>)
 8000654:	f000 fb3e 	bl	8000cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065e:	4802      	ldr	r0, [pc, #8]	; (8000668 <vTask_IntersectionCtrl+0x5c>)
 8000660:	f000 fb38 	bl	8000cd4 <HAL_GPIO_WritePin>
		if ( state_machine_get_state() == CLC_train_crossing )
 8000664:	e7da      	b.n	800061c <vTask_IntersectionCtrl+0x10>
 8000666:	bf00      	nop
 8000668:	40020c00 	.word	0x40020c00

0800066c <vTask_SensorRead>:

static uint8_t sensor1_reading;
static uint8_t sensor2_reading;

void vTask_SensorRead(void* params)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
		 * LOW = train detected
		 *
		 * sensor1 and sensor2 are both IR sensors and are active low
		*/

		sensor1_reading = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 8000674:	2101      	movs	r1, #1
 8000676:	4808      	ldr	r0, [pc, #32]	; (8000698 <vTask_SensorRead+0x2c>)
 8000678:	f000 fb14 	bl	8000ca4 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <vTask_SensorRead+0x30>)
 8000682:	701a      	strb	r2, [r3, #0]
		sensor2_reading = HAL_GPIO_ReadPin(Sensor2_GPIO_Port, Sensor2_Pin);
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <vTask_SensorRead+0x34>)
 8000688:	f000 fb0c 	bl	8000ca4 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <vTask_SensorRead+0x38>)
 8000692:	701a      	strb	r2, [r3, #0]
		sensor1_reading = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 8000694:	e7ee      	b.n	8000674 <vTask_SensorRead+0x8>
 8000696:	bf00      	nop
 8000698:	40020c00 	.word	0x40020c00
 800069c:	20000030 	.word	0x20000030
 80006a0:	40021000 	.word	0x40021000
 80006a4:	20000031 	.word	0x20000031

080006a8 <sensor_read_get_sensor1_reading>:

	}
}

uint8_t sensor_read_get_sensor1_reading(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	return sensor1_reading;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <sensor_read_get_sensor1_reading+0x14>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000030 	.word	0x20000030

080006c0 <sensor_read_get_sensor2_reading>:

uint8_t sensor_read_get_sensor2_reading(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	return sensor2_reading;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <sensor_read_get_sensor2_reading+0x14>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000031 	.word	0x20000031

080006d8 <vTask_StateMachine>:
 */

static uint8_t CLC_current_state = CLC_train_not_present;

void vTask_StateMachine(void* params)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		uint8_t sens1 = sensor_read_get_sensor1_reading();
 80006e0:	f7ff ffe2 	bl	80006a8 <sensor_read_get_sensor1_reading>
 80006e4:	4603      	mov	r3, r0
 80006e6:	73fb      	strb	r3, [r7, #15]
		uint8_t sens2 = sensor_read_get_sensor2_reading();
 80006e8:	f7ff ffea 	bl	80006c0 <sensor_read_get_sensor2_reading>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73bb      	strb	r3, [r7, #14]

		if ( sens1 == LOW )
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <vTask_StateMachine+0x24>
		{
			CLC_current_state = CLC_train_crossing;
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <vTask_StateMachine+0x34>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
		}
		if ( sens2 == LOW )
 80006fc:	7bbb      	ldrb	r3, [r7, #14]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1ee      	bne.n	80006e0 <vTask_StateMachine+0x8>
		{
			CLC_current_state = CLC_train_exit;
 8000702:	4b02      	ldr	r3, [pc, #8]	; (800070c <vTask_StateMachine+0x34>)
 8000704:	2202      	movs	r2, #2
 8000706:	701a      	strb	r2, [r3, #0]
	{
 8000708:	e7ea      	b.n	80006e0 <vTask_StateMachine+0x8>
 800070a:	bf00      	nop
 800070c:	20000032 	.word	0x20000032

08000710 <state_machine_get_state>:
		}
	}
}

uint8_t state_machine_get_state(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	return CLC_current_state;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <state_machine_get_state+0x14>)
 8000716:	781b      	ldrb	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000032 	.word	0x20000032

08000728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_Init+0x40>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <HAL_Init+0x40>)
 8000732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_Init+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_Init+0x40>)
 800073e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_Init+0x40>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_Init+0x40>)
 800074a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f8d8 	bl	8000906 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000756:	2000      	movs	r0, #0
 8000758:	f002 fa60 	bl	8002c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f002 f9c4 	bl	8002ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023c00 	.word	0x40023c00

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000004 	.word	0x20000004
 8000790:	2001a76c 	.word	0x2001a76c

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2001a76c 	.word	0x2001a76c

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <__NVIC_EnableIRQ+0x38>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff4c 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800092e:	f7ff ff61 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000932:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	6978      	ldr	r0, [r7, #20]
 800093a:	f7ff ffb1 	bl	80008a0 <NVIC_EncodePriority>
 800093e:	4602      	mov	r2, r0
 8000940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff80 	bl	800084c <__NVIC_SetPriority>
}
 800094c:	bf00      	nop
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff54 	bl	8000810 <__NVIC_EnableIRQ>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	e16b      	b.n	8000c64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800098c:	2201      	movs	r2, #1
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	f040 815a 	bne.w	8000c5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d00b      	beq.n	80009ca <HAL_GPIO_Init+0x5a>
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009be:	2b11      	cmp	r3, #17
 80009c0:	d003      	beq.n	80009ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b12      	cmp	r3, #18
 80009c8:	d130      	bne.n	8000a2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a00:	2201      	movs	r2, #1
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	f003 0201 	and.w	r2, r3, #1
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4013      	ands	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0xfc>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b12      	cmp	r3, #18
 8000a6a:	d123      	bne.n	8000ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	08da      	lsrs	r2, r3, #3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3208      	adds	r2, #8
 8000a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	220f      	movs	r2, #15
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	691a      	ldr	r2, [r3, #16]
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	08da      	lsrs	r2, r3, #3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3208      	adds	r2, #8
 8000aae:	69b9      	ldr	r1, [r7, #24]
 8000ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 0203 	and.w	r2, r3, #3
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f000 80b4 	beq.w	8000c5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b5f      	ldr	r3, [pc, #380]	; (8000c78 <HAL_GPIO_Init+0x308>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a5e      	ldr	r2, [pc, #376]	; (8000c78 <HAL_GPIO_Init+0x308>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b5c      	ldr	r3, [pc, #368]	; (8000c78 <HAL_GPIO_Init+0x308>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b12:	4a5a      	ldr	r2, [pc, #360]	; (8000c7c <HAL_GPIO_Init+0x30c>)
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	220f      	movs	r2, #15
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4013      	ands	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a51      	ldr	r2, [pc, #324]	; (8000c80 <HAL_GPIO_Init+0x310>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d02b      	beq.n	8000b96 <HAL_GPIO_Init+0x226>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a50      	ldr	r2, [pc, #320]	; (8000c84 <HAL_GPIO_Init+0x314>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d025      	beq.n	8000b92 <HAL_GPIO_Init+0x222>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a4f      	ldr	r2, [pc, #316]	; (8000c88 <HAL_GPIO_Init+0x318>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d01f      	beq.n	8000b8e <HAL_GPIO_Init+0x21e>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4e      	ldr	r2, [pc, #312]	; (8000c8c <HAL_GPIO_Init+0x31c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d019      	beq.n	8000b8a <HAL_GPIO_Init+0x21a>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4d      	ldr	r2, [pc, #308]	; (8000c90 <HAL_GPIO_Init+0x320>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0x216>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4c      	ldr	r2, [pc, #304]	; (8000c94 <HAL_GPIO_Init+0x324>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00d      	beq.n	8000b82 <HAL_GPIO_Init+0x212>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4b      	ldr	r2, [pc, #300]	; (8000c98 <HAL_GPIO_Init+0x328>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x20e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <HAL_GPIO_Init+0x32c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_GPIO_Init+0x20a>
 8000b76:	2307      	movs	r3, #7
 8000b78:	e00e      	b.n	8000b98 <HAL_GPIO_Init+0x228>
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	e00c      	b.n	8000b98 <HAL_GPIO_Init+0x228>
 8000b7e:	2306      	movs	r3, #6
 8000b80:	e00a      	b.n	8000b98 <HAL_GPIO_Init+0x228>
 8000b82:	2305      	movs	r3, #5
 8000b84:	e008      	b.n	8000b98 <HAL_GPIO_Init+0x228>
 8000b86:	2304      	movs	r3, #4
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x228>
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e004      	b.n	8000b98 <HAL_GPIO_Init+0x228>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	e002      	b.n	8000b98 <HAL_GPIO_Init+0x228>
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <HAL_GPIO_Init+0x228>
 8000b96:	2300      	movs	r3, #0
 8000b98:	69fa      	ldr	r2, [r7, #28]
 8000b9a:	f002 0203 	and.w	r2, r2, #3
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	4093      	lsls	r3, r2
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba8:	4934      	ldr	r1, [pc, #208]	; (8000c7c <HAL_GPIO_Init+0x30c>)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <HAL_GPIO_Init+0x330>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <HAL_GPIO_Init+0x330>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <HAL_GPIO_Init+0x330>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c04:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <HAL_GPIO_Init+0x330>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <HAL_GPIO_Init+0x330>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <HAL_GPIO_Init+0x330>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_GPIO_Init+0x330>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c58:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <HAL_GPIO_Init+0x330>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	f67f ae90 	bls.w	800098c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3724      	adds	r7, #36	; 0x24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40013800 	.word	0x40013800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40021400 	.word	0x40021400
 8000c98:	40021800 	.word	0x40021800
 8000c9c:	40021c00 	.word	0x40021c00
 8000ca0:	40013c00 	.word	0x40013c00

08000ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e001      	b.n	8000cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce4:	787b      	ldrb	r3, [r7, #1]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000cf0:	e003      	b.n	8000cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	041a      	lsls	r2, r3, #16
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	619a      	str	r2, [r3, #24]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	401a      	ands	r2, r3
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d104      	bne.n	8000d2a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	041a      	lsls	r2, r3, #16
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000d28:	e002      	b.n	8000d30 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e25b      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d075      	beq.n	8000e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d5a:	4ba3      	ldr	r3, [pc, #652]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d00c      	beq.n	8000d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d66:	4ba0      	ldr	r3, [pc, #640]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d112      	bne.n	8000d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d72:	4b9d      	ldr	r3, [pc, #628]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d7e:	d10b      	bne.n	8000d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	4b99      	ldr	r3, [pc, #612]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d05b      	beq.n	8000e44 <HAL_RCC_OscConfig+0x108>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d157      	bne.n	8000e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e236      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da0:	d106      	bne.n	8000db0 <HAL_RCC_OscConfig+0x74>
 8000da2:	4b91      	ldr	r3, [pc, #580]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a90      	ldr	r2, [pc, #576]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e01d      	b.n	8000dec <HAL_RCC_OscConfig+0xb0>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db8:	d10c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x98>
 8000dba:	4b8b      	ldr	r3, [pc, #556]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a8a      	ldr	r2, [pc, #552]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b88      	ldr	r3, [pc, #544]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a87      	ldr	r2, [pc, #540]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e00b      	b.n	8000dec <HAL_RCC_OscConfig+0xb0>
 8000dd4:	4b84      	ldr	r3, [pc, #528]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a83      	ldr	r2, [pc, #524]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b81      	ldr	r3, [pc, #516]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a80      	ldr	r2, [pc, #512]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d013      	beq.n	8000e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fcce 	bl	8000794 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fcca 	bl	8000794 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b64      	cmp	r3, #100	; 0x64
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e1fb      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	4b76      	ldr	r3, [pc, #472]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0xc0>
 8000e1a:	e014      	b.n	8000e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fcba 	bl	8000794 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fcb6 	bl	8000794 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e1e7      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	4b6c      	ldr	r3, [pc, #432]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0xe8>
 8000e42:	e000      	b.n	8000e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d063      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e52:	4b65      	ldr	r3, [pc, #404]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e5e:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d11c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e6a:	4b5f      	ldr	r3, [pc, #380]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d116      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <HAL_RCC_OscConfig+0x152>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d001      	beq.n	8000e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e1bb      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8e:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4952      	ldr	r1, [pc, #328]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	e03a      	b.n	8000f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d020      	beq.n	8000eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eac:	4b4f      	ldr	r3, [pc, #316]	; (8000fec <HAL_RCC_OscConfig+0x2b0>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fc6f 	bl	8000794 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fc6b 	bl	8000794 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e19c      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed8:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4940      	ldr	r1, [pc, #256]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
 8000eec:	e015      	b.n	8000f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HAL_RCC_OscConfig+0x2b0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc4e 	bl	8000794 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000efc:	f7ff fc4a 	bl	8000794 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e17b      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d030      	beq.n	8000f88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d016      	beq.n	8000f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2e:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <HAL_RCC_OscConfig+0x2b4>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f34:	f7ff fc2e 	bl	8000794 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fc2a 	bl	8000794 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e15b      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x200>
 8000f5a:	e015      	b.n	8000f88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <HAL_RCC_OscConfig+0x2b4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fc17 	bl	8000794 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fc13 	bl	8000794 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e144      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f0      	bne.n	8000f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80a0 	beq.w	80010d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_RCC_OscConfig+0x2b8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d121      	bne.n	8001016 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_RCC_OscConfig+0x2b8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_RCC_OscConfig+0x2b8>)
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fbd9 	bl	8000794 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	e011      	b.n	800100a <HAL_RCC_OscConfig+0x2ce>
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	42470000 	.word	0x42470000
 8000ff0:	42470e80 	.word	0x42470e80
 8000ff4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff8:	f7ff fbcc 	bl	8000794 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e0fd      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100a:	4b81      	ldr	r3, [pc, #516]	; (8001210 <HAL_RCC_OscConfig+0x4d4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d106      	bne.n	800102c <HAL_RCC_OscConfig+0x2f0>
 800101e:	4b7d      	ldr	r3, [pc, #500]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001022:	4a7c      	ldr	r2, [pc, #496]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6713      	str	r3, [r2, #112]	; 0x70
 800102a:	e01c      	b.n	8001066 <HAL_RCC_OscConfig+0x32a>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d10c      	bne.n	800104e <HAL_RCC_OscConfig+0x312>
 8001034:	4b77      	ldr	r3, [pc, #476]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001038:	4a76      	ldr	r2, [pc, #472]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6713      	str	r3, [r2, #112]	; 0x70
 8001040:	4b74      	ldr	r3, [pc, #464]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001044:	4a73      	ldr	r2, [pc, #460]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6713      	str	r3, [r2, #112]	; 0x70
 800104c:	e00b      	b.n	8001066 <HAL_RCC_OscConfig+0x32a>
 800104e:	4b71      	ldr	r3, [pc, #452]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001052:	4a70      	ldr	r2, [pc, #448]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6713      	str	r3, [r2, #112]	; 0x70
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 800105c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800105e:	4a6d      	ldr	r2, [pc, #436]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d015      	beq.n	800109a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106e:	f7ff fb91 	bl	8000794 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fb8d 	bl	8000794 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f241 3288 	movw	r2, #5000	; 0x1388
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e0bc      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108c:	4b61      	ldr	r3, [pc, #388]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 800108e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ee      	beq.n	8001076 <HAL_RCC_OscConfig+0x33a>
 8001098:	e014      	b.n	80010c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fb7b 	bl	8000794 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	e00a      	b.n	80010b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fb77 	bl	8000794 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e0a6      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b8:	4b56      	ldr	r3, [pc, #344]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 80010ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ee      	bne.n	80010a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d105      	bne.n	80010d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ca:	4b52      	ldr	r3, [pc, #328]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a51      	ldr	r2, [pc, #324]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 80010d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8092 	beq.w	8001204 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010e0:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d05c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d141      	bne.n	8001178 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f4:	4b48      	ldr	r3, [pc, #288]	; (8001218 <HAL_RCC_OscConfig+0x4dc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fb4b 	bl	8000794 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001102:	f7ff fb47 	bl	8000794 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e078      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001114:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69da      	ldr	r2, [r3, #28]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	019b      	lsls	r3, r3, #6
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	3b01      	subs	r3, #1
 800113a:	041b      	lsls	r3, r3, #16
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	061b      	lsls	r3, r3, #24
 8001144:	4933      	ldr	r1, [pc, #204]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <HAL_RCC_OscConfig+0x4dc>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fb20 	bl	8000794 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff fb1c 	bl	8000794 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e04d      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x41c>
 8001176:	e045      	b.n	8001204 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_RCC_OscConfig+0x4dc>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fb09 	bl	8000794 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff fb05 	bl	8000794 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e036      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x44a>
 80011a4:	e02e      	b.n	8001204 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e029      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_RCC_OscConfig+0x4d8>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d115      	bne.n	8001200 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011da:	4013      	ands	r3, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d10d      	bne.n	8001200 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40007000 	.word	0x40007000
 8001214:	40023800 	.word	0x40023800
 8001218:	42470060 	.word	0x42470060

0800121c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0cc      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001230:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d90c      	bls.n	8001258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0b8      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800127a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001288:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4a52      	ldr	r2, [pc, #328]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001294:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	494d      	ldr	r1, [pc, #308]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d044      	beq.n	800133c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d119      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e07f      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d003      	beq.n	80012da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e06f      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e067      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f023 0203 	bic.w	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4934      	ldr	r1, [pc, #208]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	4313      	orrs	r3, r2
 800130a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800130c:	f7ff fa42 	bl	8000794 <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	e00a      	b.n	800132a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	f7ff fa3e 	bl	8000794 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e04f      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 020c 	and.w	r2, r3, #12
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d1eb      	bne.n	8001314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d20c      	bcs.n	8001364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e032      	b.n	80013ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4916      	ldr	r1, [pc, #88]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	4313      	orrs	r3, r2
 8001380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	490e      	ldr	r1, [pc, #56]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013a2:	f000 f821 	bl	80013e8 <HAL_RCC_GetSysClockFreq>
 80013a6:	4601      	mov	r1, r0
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	fa21 f303 	lsr.w	r3, r1, r3
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_ClockConfig+0x1c8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fc2a 	bl	8002c1c <HAL_InitTick>

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00
 80013d8:	40023800 	.word	0x40023800
 80013dc:	0800739c 	.word	0x0800739c
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d007      	beq.n	800141a <HAL_RCC_GetSysClockFreq+0x32>
 800140a:	2b08      	cmp	r3, #8
 800140c:	d008      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x38>
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 80b4 	bne.w	800157c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001414:	4b5e      	ldr	r3, [pc, #376]	; (8001590 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001416:	60bb      	str	r3, [r7, #8]
       break;
 8001418:	e0b3      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800141a:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800141c:	60bb      	str	r3, [r7, #8]
      break;
 800141e:	e0b0      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001420:	4b5a      	ldr	r3, [pc, #360]	; (800158c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001428:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142a:	4b58      	ldr	r3, [pc, #352]	; (800158c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d04a      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001436:	4b55      	ldr	r3, [pc, #340]	; (800158c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	099b      	lsrs	r3, r3, #6
 800143c:	f04f 0400 	mov.w	r4, #0
 8001440:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	ea03 0501 	and.w	r5, r3, r1
 800144c:	ea04 0602 	and.w	r6, r4, r2
 8001450:	4629      	mov	r1, r5
 8001452:	4632      	mov	r2, r6
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	f04f 0400 	mov.w	r4, #0
 800145c:	0154      	lsls	r4, r2, #5
 800145e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001462:	014b      	lsls	r3, r1, #5
 8001464:	4619      	mov	r1, r3
 8001466:	4622      	mov	r2, r4
 8001468:	1b49      	subs	r1, r1, r5
 800146a:	eb62 0206 	sbc.w	r2, r2, r6
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	f04f 0400 	mov.w	r4, #0
 8001476:	0194      	lsls	r4, r2, #6
 8001478:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800147c:	018b      	lsls	r3, r1, #6
 800147e:	1a5b      	subs	r3, r3, r1
 8001480:	eb64 0402 	sbc.w	r4, r4, r2
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	00e2      	lsls	r2, r4, #3
 800148e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001492:	00d9      	lsls	r1, r3, #3
 8001494:	460b      	mov	r3, r1
 8001496:	4614      	mov	r4, r2
 8001498:	195b      	adds	r3, r3, r5
 800149a:	eb44 0406 	adc.w	r4, r4, r6
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	0262      	lsls	r2, r4, #9
 80014a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014ac:	0259      	lsls	r1, r3, #9
 80014ae:	460b      	mov	r3, r1
 80014b0:	4614      	mov	r4, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	4621      	mov	r1, r4
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f04f 0400 	mov.w	r4, #0
 80014bc:	461a      	mov	r2, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	f7fe fed0 	bl	8000264 <__aeabi_uldivmod>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e049      	b.n	8001560 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	099b      	lsrs	r3, r3, #6
 80014d2:	f04f 0400 	mov.w	r4, #0
 80014d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	ea03 0501 	and.w	r5, r3, r1
 80014e2:	ea04 0602 	and.w	r6, r4, r2
 80014e6:	4629      	mov	r1, r5
 80014e8:	4632      	mov	r2, r6
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	f04f 0400 	mov.w	r4, #0
 80014f2:	0154      	lsls	r4, r2, #5
 80014f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014f8:	014b      	lsls	r3, r1, #5
 80014fa:	4619      	mov	r1, r3
 80014fc:	4622      	mov	r2, r4
 80014fe:	1b49      	subs	r1, r1, r5
 8001500:	eb62 0206 	sbc.w	r2, r2, r6
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	f04f 0400 	mov.w	r4, #0
 800150c:	0194      	lsls	r4, r2, #6
 800150e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001512:	018b      	lsls	r3, r1, #6
 8001514:	1a5b      	subs	r3, r3, r1
 8001516:	eb64 0402 	sbc.w	r4, r4, r2
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	00e2      	lsls	r2, r4, #3
 8001524:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001528:	00d9      	lsls	r1, r3, #3
 800152a:	460b      	mov	r3, r1
 800152c:	4614      	mov	r4, r2
 800152e:	195b      	adds	r3, r3, r5
 8001530:	eb44 0406 	adc.w	r4, r4, r6
 8001534:	f04f 0100 	mov.w	r1, #0
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	02a2      	lsls	r2, r4, #10
 800153e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001542:	0299      	lsls	r1, r3, #10
 8001544:	460b      	mov	r3, r1
 8001546:	4614      	mov	r4, r2
 8001548:	4618      	mov	r0, r3
 800154a:	4621      	mov	r1, r4
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f04f 0400 	mov.w	r4, #0
 8001552:	461a      	mov	r2, r3
 8001554:	4623      	mov	r3, r4
 8001556:	f7fe fe85 	bl	8000264 <__aeabi_uldivmod>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	0c1b      	lsrs	r3, r3, #16
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	3301      	adds	r3, #1
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	60bb      	str	r3, [r7, #8]
      break;
 800157a:	e002      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800157e:	60bb      	str	r3, [r7, #8]
      break;
 8001580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001582:	68bb      	ldr	r3, [r7, #8]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	00f42400 	.word	0x00f42400
 8001594:	007a1200 	.word	0x007a1200

08001598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_RCC_GetHCLKFreq+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000008 	.word	0x20000008

080015b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015b4:	f7ff fff0 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 80015b8:	4601      	mov	r1, r0
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	0a9b      	lsrs	r3, r3, #10
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	080073ac 	.word	0x080073ac

080015d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	220f      	movs	r2, #15
 80015e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_GetClockConfig+0x5c>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_RCC_GetClockConfig+0x5c>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_GetClockConfig+0x5c>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_GetClockConfig+0x5c>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_RCC_GetClockConfig+0x60>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 020f 	and.w	r2, r3, #15
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	601a      	str	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40023c00 	.word	0x40023c00

0800163c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e01d      	b.n	800168a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f001 fa68 	bl	8002b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3304      	adds	r3, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f000 fb4e 	bl	8001d1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001692:	b480      	push	{r7}
 8001694:	b085      	sub	sp, #20
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0201 	orr.w	r2, r2, #1
 80016a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b06      	cmp	r3, #6
 80016ba:	d007      	beq.n	80016cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e01d      	b.n	8001728 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d106      	bne.n	8001706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f815 	bl	8001730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3304      	adds	r3, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4610      	mov	r0, r2
 800171a:	f000 faff 	bl	8001d1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	6839      	ldr	r1, [r7, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fdca 	bl	80022f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_TIM_PWM_Start+0x74>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d004      	beq.n	8001770 <HAL_TIM_PWM_Start+0x2c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_TIM_PWM_Start+0x78>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_TIM_PWM_Start+0x30>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_TIM_PWM_Start+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001788:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b06      	cmp	r3, #6
 800179a:	d007      	beq.n	80017ac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d122      	bne.n	800181c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d11b      	bne.n	800181c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f06f 0202 	mvn.w	r2, #2
 80017ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fa6b 	bl	8001cde <HAL_TIM_IC_CaptureCallback>
 8001808:	e005      	b.n	8001816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fa5d 	bl	8001cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fa6e 	bl	8001cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b04      	cmp	r3, #4
 8001828:	d122      	bne.n	8001870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	d11b      	bne.n	8001870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0204 	mvn.w	r2, #4
 8001840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fa41 	bl	8001cde <HAL_TIM_IC_CaptureCallback>
 800185c:	e005      	b.n	800186a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fa33 	bl	8001cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fa44 	bl	8001cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b08      	cmp	r3, #8
 800187c:	d122      	bne.n	80018c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b08      	cmp	r3, #8
 800188a:	d11b      	bne.n	80018c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0208 	mvn.w	r2, #8
 8001894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2204      	movs	r2, #4
 800189a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fa17 	bl	8001cde <HAL_TIM_IC_CaptureCallback>
 80018b0:	e005      	b.n	80018be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fa09 	bl	8001cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fa1a 	bl	8001cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d122      	bne.n	8001918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d11b      	bne.n	8001918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0210 	mvn.w	r2, #16
 80018e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2208      	movs	r2, #8
 80018ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f9ed 	bl	8001cde <HAL_TIM_IC_CaptureCallback>
 8001904:	e005      	b.n	8001912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f9df 	bl	8001cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f9f0 	bl	8001cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d10e      	bne.n	8001944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0201 	mvn.w	r2, #1
 800193c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f001 f8b8 	bl	8002ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	2b80      	cmp	r3, #128	; 0x80
 8001950:	d10e      	bne.n	8001970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195c:	2b80      	cmp	r3, #128	; 0x80
 800195e:	d107      	bne.n	8001970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fd6c 	bl	8002448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d10e      	bne.n	800199c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	2b40      	cmp	r3, #64	; 0x40
 800198a:	d107      	bne.n	800199c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f9b5 	bl	8001d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d107      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0220 	mvn.w	r2, #32
 80019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fd36 	bl	8002434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0b4      	b.n	8001b54 <HAL_TIM_PWM_ConfigChannel+0x184>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2202      	movs	r2, #2
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	f200 809f 	bhi.w	8001b40 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a3d 	.word	0x08001a3d
 8001a0c:	08001b41 	.word	0x08001b41
 8001a10:	08001b41 	.word	0x08001b41
 8001a14:	08001b41 	.word	0x08001b41
 8001a18:	08001a7d 	.word	0x08001a7d
 8001a1c:	08001b41 	.word	0x08001b41
 8001a20:	08001b41 	.word	0x08001b41
 8001a24:	08001b41 	.word	0x08001b41
 8001a28:	08001abf 	.word	0x08001abf
 8001a2c:	08001b41 	.word	0x08001b41
 8001a30:	08001b41 	.word	0x08001b41
 8001a34:	08001b41 	.word	0x08001b41
 8001a38:	08001aff 	.word	0x08001aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fa0a 	bl	8001e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699a      	ldr	r2, [r3, #24]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0208 	orr.w	r2, r2, #8
 8001a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0204 	bic.w	r2, r2, #4
 8001a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6999      	ldr	r1, [r3, #24]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	619a      	str	r2, [r3, #24]
      break;
 8001a7a:	e062      	b.n	8001b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fa5a 	bl	8001f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6999      	ldr	r1, [r3, #24]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	021a      	lsls	r2, r3, #8
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	619a      	str	r2, [r3, #24]
      break;
 8001abc:	e041      	b.n	8001b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 faaf 	bl	8002028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	69da      	ldr	r2, [r3, #28]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0208 	orr.w	r2, r2, #8
 8001ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69da      	ldr	r2, [r3, #28]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0204 	bic.w	r2, r2, #4
 8001ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69d9      	ldr	r1, [r3, #28]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	61da      	str	r2, [r3, #28]
      break;
 8001afc:	e021      	b.n	8001b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fb03 	bl	8002110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69da      	ldr	r2, [r3, #28]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69d9      	ldr	r1, [r3, #28]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	021a      	lsls	r2, r3, #8
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	61da      	str	r2, [r3, #28]
      break;
 8001b3e:	e000      	b.n	8001b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001b40:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_TIM_ConfigClockSource+0x18>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0a6      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x166>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b40      	cmp	r3, #64	; 0x40
 8001baa:	d067      	beq.n	8001c7c <HAL_TIM_ConfigClockSource+0x120>
 8001bac:	2b40      	cmp	r3, #64	; 0x40
 8001bae:	d80b      	bhi.n	8001bc8 <HAL_TIM_ConfigClockSource+0x6c>
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d073      	beq.n	8001c9c <HAL_TIM_ConfigClockSource+0x140>
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d802      	bhi.n	8001bbe <HAL_TIM_ConfigClockSource+0x62>
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d06f      	beq.n	8001c9c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001bbc:	e078      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d06c      	beq.n	8001c9c <HAL_TIM_ConfigClockSource+0x140>
 8001bc2:	2b30      	cmp	r3, #48	; 0x30
 8001bc4:	d06a      	beq.n	8001c9c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001bc6:	e073      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bc8:	2b70      	cmp	r3, #112	; 0x70
 8001bca:	d00d      	beq.n	8001be8 <HAL_TIM_ConfigClockSource+0x8c>
 8001bcc:	2b70      	cmp	r3, #112	; 0x70
 8001bce:	d804      	bhi.n	8001bda <HAL_TIM_ConfigClockSource+0x7e>
 8001bd0:	2b50      	cmp	r3, #80	; 0x50
 8001bd2:	d033      	beq.n	8001c3c <HAL_TIM_ConfigClockSource+0xe0>
 8001bd4:	2b60      	cmp	r3, #96	; 0x60
 8001bd6:	d041      	beq.n	8001c5c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001bd8:	e06a      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bde:	d066      	beq.n	8001cae <HAL_TIM_ConfigClockSource+0x152>
 8001be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be4:	d017      	beq.n	8001c16 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001be6:	e063      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f000 fb5a 	bl	80022b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	609a      	str	r2, [r3, #8]
      break;
 8001c14:	e04c      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6899      	ldr	r1, [r3, #8]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f000 fb43 	bl	80022b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c38:	609a      	str	r2, [r3, #8]
      break;
 8001c3a:	e039      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f000 fab7 	bl	80021bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2150      	movs	r1, #80	; 0x50
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fb10 	bl	800227a <TIM_ITRx_SetConfig>
      break;
 8001c5a:	e029      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f000 fad6 	bl	800221a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2160      	movs	r1, #96	; 0x60
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fb00 	bl	800227a <TIM_ITRx_SetConfig>
      break;
 8001c7a:	e019      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f000 fa97 	bl	80021bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2140      	movs	r1, #64	; 0x40
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 faf0 	bl	800227a <TIM_ITRx_SetConfig>
      break;
 8001c9a:	e009      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f000 fae7 	bl	800227a <TIM_ITRx_SetConfig>
      break;
 8001cac:	e000      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a40      	ldr	r2, [pc, #256]	; (8001e30 <TIM_Base_SetConfig+0x114>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3a:	d00f      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3d      	ldr	r2, [pc, #244]	; (8001e34 <TIM_Base_SetConfig+0x118>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00b      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3c      	ldr	r2, [pc, #240]	; (8001e38 <TIM_Base_SetConfig+0x11c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <TIM_Base_SetConfig+0x120>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d003      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3a      	ldr	r2, [pc, #232]	; (8001e40 <TIM_Base_SetConfig+0x124>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <TIM_Base_SetConfig+0x114>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02b      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d027      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <TIM_Base_SetConfig+0x118>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d023      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <TIM_Base_SetConfig+0x11c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <TIM_Base_SetConfig+0x120>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01b      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <TIM_Base_SetConfig+0x124>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d017      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a28      	ldr	r2, [pc, #160]	; (8001e44 <TIM_Base_SetConfig+0x128>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <TIM_Base_SetConfig+0x12c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00f      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <TIM_Base_SetConfig+0x130>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00b      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a25      	ldr	r2, [pc, #148]	; (8001e50 <TIM_Base_SetConfig+0x134>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <TIM_Base_SetConfig+0x138>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d003      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <TIM_Base_SetConfig+0x13c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <TIM_Base_SetConfig+0x114>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <TIM_Base_SetConfig+0xf8>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <TIM_Base_SetConfig+0x124>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d103      	bne.n	8001e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	615a      	str	r2, [r3, #20]
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40000800 	.word	0x40000800
 8001e3c:	40000c00 	.word	0x40000c00
 8001e40:	40010400 	.word	0x40010400
 8001e44:	40014000 	.word	0x40014000
 8001e48:	40014400 	.word	0x40014400
 8001e4c:	40014800 	.word	0x40014800
 8001e50:	40001800 	.word	0x40001800
 8001e54:	40001c00 	.word	0x40001c00
 8001e58:	40002000 	.word	0x40002000

08001e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	f023 0201 	bic.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0303 	bic.w	r3, r3, #3
 8001e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f023 0302 	bic.w	r3, r3, #2
 8001ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <TIM_OC1_SetConfig+0xd8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <TIM_OC1_SetConfig+0x64>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <TIM_OC1_SetConfig+0xdc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d10c      	bne.n	8001eda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f023 0308 	bic.w	r3, r3, #8
 8001ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <TIM_OC1_SetConfig+0xd8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d003      	beq.n	8001eea <TIM_OC1_SetConfig+0x8e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <TIM_OC1_SetConfig+0xdc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d111      	bne.n	8001f0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	621a      	str	r2, [r3, #32]
}
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40010400 	.word	0x40010400

08001f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	f023 0210 	bic.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f023 0320 	bic.w	r3, r3, #32
 8001f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a22      	ldr	r2, [pc, #136]	; (8002020 <TIM_OC2_SetConfig+0xe4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d003      	beq.n	8001fa4 <TIM_OC2_SetConfig+0x68>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a21      	ldr	r2, [pc, #132]	; (8002024 <TIM_OC2_SetConfig+0xe8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d10d      	bne.n	8001fc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <TIM_OC2_SetConfig+0xe4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_OC2_SetConfig+0x94>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a16      	ldr	r2, [pc, #88]	; (8002024 <TIM_OC2_SetConfig+0xe8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d113      	bne.n	8001ff8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	621a      	str	r2, [r3, #32]
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40010000 	.word	0x40010000
 8002024:	40010400 	.word	0x40010400

08002028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <TIM_OC3_SetConfig+0xe0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_OC3_SetConfig+0x66>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a20      	ldr	r2, [pc, #128]	; (800210c <TIM_OC3_SetConfig+0xe4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a16      	ldr	r2, [pc, #88]	; (8002108 <TIM_OC3_SetConfig+0xe0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d003      	beq.n	80020ba <TIM_OC3_SetConfig+0x92>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a15      	ldr	r2, [pc, #84]	; (800210c <TIM_OC3_SetConfig+0xe4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	621a      	str	r2, [r3, #32]
}
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40010000 	.word	0x40010000
 800210c:	40010400 	.word	0x40010400

08002110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800215a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	031b      	lsls	r3, r3, #12
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <TIM_OC4_SetConfig+0xa4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_OC4_SetConfig+0x68>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <TIM_OC4_SetConfig+0xa8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d109      	bne.n	800218c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800217e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	621a      	str	r2, [r3, #32]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40010400 	.word	0x40010400

080021bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f023 0201 	bic.w	r2, r3, #1
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f023 030a 	bic.w	r3, r3, #10
 80021f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	621a      	str	r2, [r3, #32]
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800221a:	b480      	push	{r7}
 800221c:	b087      	sub	sp, #28
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f023 0210 	bic.w	r2, r3, #16
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	031b      	lsls	r3, r3, #12
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	621a      	str	r2, [r3, #32]
}
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	f043 0307 	orr.w	r3, r3, #7
 800229c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	021a      	lsls	r2, r3, #8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	2201      	movs	r2, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a1a      	ldr	r2, [r3, #32]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a1a      	ldr	r2, [r3, #32]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	431a      	orrs	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	621a      	str	r2, [r3, #32]
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002350:	2302      	movs	r3, #2
 8002352:	e05a      	b.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a21      	ldr	r2, [pc, #132]	; (8002418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d01d      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1d      	ldr	r2, [pc, #116]	; (800241c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d018      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10c      	bne.n	80023f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40010000 	.word	0x40010000
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800
 8002424:	40000c00 	.word	0x40000c00
 8002428:	40010400 	.word	0x40010400
 800242c:	40014000 	.word	0x40014000
 8002430:	40001800 	.word	0x40001800

08002434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002462:	f7fe f961 	bl	8000728 <HAL_Init>

  /* USER CODE BEGIN Init */

  // Enable the cycle counter
  DWT_CTRL |= (1<<0);
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <main+0xfc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <main+0xfc>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6013      	str	r3, [r2, #0]
  // start segger sys view
  SEGGER_SYSVIEW_Conf();
 8002472:	f003 f9dd 	bl	8005830 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8002476:	f004 f8dd 	bl	8006634 <SEGGER_SYSVIEW_Start>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247a:	f000 f881 	bl	8002580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247e:	f000 f9b1 	bl	80027e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002482:	f000 f8e7 	bl	8002654 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002486:	f000 f935 	bl	80026f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // start servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800248a:	2100      	movs	r1, #0
 800248c:	4833      	ldr	r0, [pc, #204]	; (800255c <main+0x100>)
 800248e:	f7ff f959 	bl	8001744 <HAL_TIM_PWM_Start>

  /* Create tasks - dynamically allocate memory to heap */
  status = xTaskCreate(vTask_IntersectionCtrl,"Task_IntersectionCtrl",200,NULL,2,NULL);
 8002492:	2300      	movs	r3, #0
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	2302      	movs	r3, #2
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2300      	movs	r3, #0
 800249c:	22c8      	movs	r2, #200	; 0xc8
 800249e:	4930      	ldr	r1, [pc, #192]	; (8002560 <main+0x104>)
 80024a0:	4830      	ldr	r0, [pc, #192]	; (8002564 <main+0x108>)
 80024a2:	f001 fa7f 	bl	80039a4 <xTaskCreate>
 80024a6:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d009      	beq.n	80024c2 <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	e7fe      	b.n	80024c0 <main+0x64>
  status = xTaskCreate(vTask_GateCtrl,"Task_GateCtrl",200,NULL,2,NULL);
 80024c2:	2300      	movs	r3, #0
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	2302      	movs	r3, #2
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2300      	movs	r3, #0
 80024cc:	22c8      	movs	r2, #200	; 0xc8
 80024ce:	4926      	ldr	r1, [pc, #152]	; (8002568 <main+0x10c>)
 80024d0:	4826      	ldr	r0, [pc, #152]	; (800256c <main+0x110>)
 80024d2:	f001 fa67 	bl	80039a4 <xTaskCreate>
 80024d6:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d009      	beq.n	80024f2 <main+0x96>
 80024de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e7fe      	b.n	80024f0 <main+0x94>
  status = xTaskCreate(vTask_SensorRead,"Task_SensorRead",200,NULL,2,NULL);
 80024f2:	2300      	movs	r3, #0
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2302      	movs	r3, #2
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	22c8      	movs	r2, #200	; 0xc8
 80024fe:	491c      	ldr	r1, [pc, #112]	; (8002570 <main+0x114>)
 8002500:	481c      	ldr	r0, [pc, #112]	; (8002574 <main+0x118>)
 8002502:	f001 fa4f 	bl	80039a4 <xTaskCreate>
 8002506:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d009      	beq.n	8002522 <main+0xc6>
 800250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	e7fe      	b.n	8002520 <main+0xc4>
  status = xTaskCreate(vTask_StateMachine,"Task_StateMachine",200,NULL,2,NULL);
 8002522:	2300      	movs	r3, #0
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	2302      	movs	r3, #2
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2300      	movs	r3, #0
 800252c:	22c8      	movs	r2, #200	; 0xc8
 800252e:	4912      	ldr	r1, [pc, #72]	; (8002578 <main+0x11c>)
 8002530:	4812      	ldr	r0, [pc, #72]	; (800257c <main+0x120>)
 8002532:	f001 fa37 	bl	80039a4 <xTaskCreate>
 8002536:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d009      	beq.n	8002552 <main+0xf6>
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	e7fe      	b.n	8002550 <main+0xf4>

  vTaskStartScheduler();
 8002552:	f001 fc3f 	bl	8003dd4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002556:	e7fe      	b.n	8002556 <main+0xfa>
 8002558:	e0001000 	.word	0xe0001000
 800255c:	2001a770 	.word	0x2001a770
 8002560:	0800726c 	.word	0x0800726c
 8002564:	0800060d 	.word	0x0800060d
 8002568:	08007284 	.word	0x08007284
 800256c:	08000565 	.word	0x08000565
 8002570:	08007294 	.word	0x08007294
 8002574:	0800066d 	.word	0x0800066d
 8002578:	080072a4 	.word	0x080072a4
 800257c:	080006d9 	.word	0x080006d9

08002580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b094      	sub	sp, #80	; 0x50
 8002584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002586:	f107 0320 	add.w	r3, r7, #32
 800258a:	2230      	movs	r2, #48	; 0x30
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f004 fe58 	bl	8007244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	4b28      	ldr	r3, [pc, #160]	; (800264c <SystemClock_Config+0xcc>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <SystemClock_Config+0xcc>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	; 0x40
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <SystemClock_Config+0xcc>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	4b22      	ldr	r3, [pc, #136]	; (8002650 <SystemClock_Config+0xd0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a21      	ldr	r2, [pc, #132]	; (8002650 <SystemClock_Config+0xd0>)
 80025ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <SystemClock_Config+0xd0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025dc:	2302      	movs	r3, #2
 80025de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e0:	2301      	movs	r3, #1
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025e4:	2310      	movs	r3, #16
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e8:	2302      	movs	r3, #2
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ec:	2300      	movs	r3, #0
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025f0:	2308      	movs	r3, #8
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80025f4:	2332      	movs	r3, #50	; 0x32
 80025f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025f8:	2304      	movs	r3, #4
 80025fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025fc:	2307      	movs	r3, #7
 80025fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fb99 	bl	8000d3c <HAL_RCC_OscConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002610:	f000 fa62 	bl	8002ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002614:	230f      	movs	r3, #15
 8002616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002618:	2302      	movs	r3, #2
 800261a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002620:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800262a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fdf2 	bl	800121c <HAL_RCC_ClockConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800263e:	f000 fa4b 	bl	8002ad8 <Error_Handler>
  }
}
 8002642:	bf00      	nop
 8002644:	3750      	adds	r7, #80	; 0x50
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000

08002654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265a:	f107 0308 	add.w	r3, r7, #8
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002668:	463b      	mov	r3, r7
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <MX_TIM1_Init+0x98>)
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <MX_TIM1_Init+0x9c>)
 8002674:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 62500-1;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <MX_TIM1_Init+0x98>)
 8002678:	f24f 4223 	movw	r2, #62499	; 0xf423
 800267c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_TIM1_Init+0x98>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <MX_TIM1_Init+0x98>)
 8002686:	2231      	movs	r2, #49	; 0x31
 8002688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_TIM1_Init+0x98>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <MX_TIM1_Init+0x98>)
 8002692:	2200      	movs	r2, #0
 8002694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_TIM1_Init+0x98>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800269c:	4813      	ldr	r0, [pc, #76]	; (80026ec <MX_TIM1_Init+0x98>)
 800269e:	f7fe ffcd 	bl	800163c <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80026a8:	f000 fa16 	bl	8002ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <MX_TIM1_Init+0x98>)
 80026ba:	f7ff fa4f 	bl	8001b5c <HAL_TIM_ConfigClockSource>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80026c4:	f000 fa08 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_TIM1_Init+0x98>)
 80026d6:	f7ff fe31 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026e0:	f000 f9fa 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2001a7b0 	.word	0x2001a7b0
 80026f0:	40010000 	.word	0x40010000

080026f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08e      	sub	sp, #56	; 0x38
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002708:	f107 0320 	add.w	r3, r7, #32
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
 8002720:	615a      	str	r2, [r3, #20]
 8002722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <MX_TIM3_Init+0xe8>)
 8002726:	4a2e      	ldr	r2, [pc, #184]	; (80027e0 <MX_TIM3_Init+0xec>)
 8002728:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6.250-1;
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <MX_TIM3_Init+0xe8>)
 800272c:	2205      	movs	r2, #5
 800272e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <MX_TIM3_Init+0xe8>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <MX_TIM3_Init+0xe8>)
 8002738:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800273c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273e:	4b27      	ldr	r3, [pc, #156]	; (80027dc <MX_TIM3_Init+0xe8>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <MX_TIM3_Init+0xe8>)
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800274a:	4824      	ldr	r0, [pc, #144]	; (80027dc <MX_TIM3_Init+0xe8>)
 800274c:	f7fe ff76 	bl	800163c <HAL_TIM_Base_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002756:	f000 f9bf 	bl	8002ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002764:	4619      	mov	r1, r3
 8002766:	481d      	ldr	r0, [pc, #116]	; (80027dc <MX_TIM3_Init+0xe8>)
 8002768:	f7ff f9f8 	bl	8001b5c <HAL_TIM_ConfigClockSource>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002772:	f000 f9b1 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002776:	4819      	ldr	r0, [pc, #100]	; (80027dc <MX_TIM3_Init+0xe8>)
 8002778:	f7fe ffaf 	bl	80016da <HAL_TIM_PWM_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002782:	f000 f9a9 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800278e:	f107 0320 	add.w	r3, r7, #32
 8002792:	4619      	mov	r1, r3
 8002794:	4811      	ldr	r0, [pc, #68]	; (80027dc <MX_TIM3_Init+0xe8>)
 8002796:	f7ff fdd1 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80027a0:	f000 f99a 	bl	8002ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027a4:	2360      	movs	r3, #96	; 0x60
 80027a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1300;
 80027a8:	f240 5314 	movw	r3, #1300	; 0x514
 80027ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	2200      	movs	r2, #0
 80027ba:	4619      	mov	r1, r3
 80027bc:	4807      	ldr	r0, [pc, #28]	; (80027dc <MX_TIM3_Init+0xe8>)
 80027be:	f7ff f907 	bl	80019d0 <HAL_TIM_PWM_ConfigChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80027c8:	f000 f986 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027cc:	4803      	ldr	r0, [pc, #12]	; (80027dc <MX_TIM3_Init+0xe8>)
 80027ce:	f000 f9eb 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 80027d2:	bf00      	nop
 80027d4:	3738      	adds	r7, #56	; 0x38
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2001a770 	.word	0x2001a770
 80027e0:	40000400 	.word	0x40000400

080027e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	; 0x30
 80027e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	4ba6      	ldr	r3, [pc, #664]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4aa5      	ldr	r2, [pc, #660]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4ba3      	ldr	r3, [pc, #652]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	4b9f      	ldr	r3, [pc, #636]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a9e      	ldr	r2, [pc, #632]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b9c      	ldr	r3, [pc, #624]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	4b98      	ldr	r3, [pc, #608]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a97      	ldr	r2, [pc, #604]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 800283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b95      	ldr	r3, [pc, #596]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b91      	ldr	r3, [pc, #580]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a90      	ldr	r2, [pc, #576]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b8e      	ldr	r3, [pc, #568]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	4b8a      	ldr	r3, [pc, #552]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a89      	ldr	r2, [pc, #548]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b87      	ldr	r3, [pc, #540]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b83      	ldr	r3, [pc, #524]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a82      	ldr	r2, [pc, #520]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b80      	ldr	r3, [pc, #512]	; (8002a98 <MX_GPIO_Init+0x2b4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2108      	movs	r1, #8
 80028a6:	487d      	ldr	r0, [pc, #500]	; (8002a9c <MX_GPIO_Init+0x2b8>)
 80028a8:	f7fe fa14 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	2101      	movs	r1, #1
 80028b0:	487b      	ldr	r0, [pc, #492]	; (8002aa0 <MX_GPIO_Init+0x2bc>)
 80028b2:	f7fe fa0f 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80028b6:	2200      	movs	r2, #0
 80028b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80028bc:	4879      	ldr	r0, [pc, #484]	; (8002aa4 <MX_GPIO_Init+0x2c0>)
 80028be:	f7fe fa09 	bl	8000cd4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80028c2:	2308      	movs	r3, #8
 80028c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	4870      	ldr	r0, [pc, #448]	; (8002a9c <MX_GPIO_Init+0x2b8>)
 80028da:	f7fe f849 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80028de:	2301      	movs	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	2301      	movs	r3, #1
 80028e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	486a      	ldr	r0, [pc, #424]	; (8002aa0 <MX_GPIO_Init+0x2bc>)
 80028f6:	f7fe f83b 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80028fa:	2308      	movs	r3, #8
 80028fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800290a:	2305      	movs	r3, #5
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	4619      	mov	r1, r3
 8002914:	4862      	ldr	r0, [pc, #392]	; (8002aa0 <MX_GPIO_Init+0x2bc>)
 8002916:	f7fe f82b 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800291a:	2301      	movs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800291e:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <MX_GPIO_Init+0x2c4>)
 8002920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002926:	f107 031c 	add.w	r3, r7, #28
 800292a:	4619      	mov	r1, r3
 800292c:	485f      	ldr	r0, [pc, #380]	; (8002aac <MX_GPIO_Init+0x2c8>)
 800292e:	f7fe f81f 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002932:	2310      	movs	r3, #16
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002942:	2306      	movs	r3, #6
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4619      	mov	r1, r3
 800294c:	4857      	ldr	r0, [pc, #348]	; (8002aac <MX_GPIO_Init+0x2c8>)
 800294e:	f7fe f80f 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002952:	23e0      	movs	r3, #224	; 0xe0
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002962:	2305      	movs	r3, #5
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	484f      	ldr	r0, [pc, #316]	; (8002aac <MX_GPIO_Init+0x2c8>)
 800296e:	f7fd ffff 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002972:	2304      	movs	r3, #4
 8002974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800297e:	f107 031c 	add.w	r3, r7, #28
 8002982:	4619      	mov	r1, r3
 8002984:	484a      	ldr	r0, [pc, #296]	; (8002ab0 <MX_GPIO_Init+0x2cc>)
 8002986:	f7fd fff3 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor2_Pin;
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor2_GPIO_Port, &GPIO_InitStruct);
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	4619      	mov	r1, r3
 800299c:	483f      	ldr	r0, [pc, #252]	; (8002a9c <MX_GPIO_Init+0x2b8>)
 800299e:	f7fd ffe7 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80029a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029b4:	2305      	movs	r3, #5
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	483c      	ldr	r0, [pc, #240]	; (8002ab0 <MX_GPIO_Init+0x2cc>)
 80029c0:	f7fd ffd6 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80029c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80029c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	4831      	ldr	r0, [pc, #196]	; (8002aa4 <MX_GPIO_Init+0x2c0>)
 80029de:	f7fd ffc7 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80029e2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80029e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029f4:	2306      	movs	r3, #6
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	4619      	mov	r1, r3
 80029fe:	4828      	ldr	r0, [pc, #160]	; (8002aa0 <MX_GPIO_Init+0x2bc>)
 8002a00:	f7fd ffb6 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002a04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a16:	230a      	movs	r3, #10
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	f107 031c 	add.w	r3, r7, #28
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4822      	ldr	r0, [pc, #136]	; (8002aac <MX_GPIO_Init+0x2c8>)
 8002a22:	f7fd ffa5 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor1_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor1_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	4619      	mov	r1, r3
 8002a38:	481a      	ldr	r0, [pc, #104]	; (8002aa4 <MX_GPIO_Init+0x2c0>)
 8002a3a:	f7fd ff99 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <MX_GPIO_Init+0x2c0>)
 8002a52:	f7fd ff8d 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002a56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a5c:	2312      	movs	r3, #18
 8002a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a60:	2301      	movs	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a68:	2304      	movs	r3, #4
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	480f      	ldr	r0, [pc, #60]	; (8002ab0 <MX_GPIO_Init+0x2cc>)
 8002a74:	f7fd ff7c 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <MX_GPIO_Init+0x2c4>)
 8002a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4804      	ldr	r0, [pc, #16]	; (8002a9c <MX_GPIO_Init+0x2b8>)
 8002a8c:	f7fd ff70 	bl	8000970 <HAL_GPIO_Init>

}
 8002a90:	bf00      	nop
 8002a92:	3730      	adds	r7, #48	; 0x30
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	10120000 	.word	0x10120000
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400

08002ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ac6:	f7fd fe51 	bl	800076c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40000c00 	.word	0x40000c00

08002ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_MspInit+0x4c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_MspInit+0x4c>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8002b26:	f002 fae3 	bl	80050f0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800

08002b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_TIM_Base_MspInit+0x64>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_TIM_Base_MspInit+0x68>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <HAL_TIM_Base_MspInit+0x68>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_TIM_Base_MspInit+0x68>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b66:	e012      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d10d      	bne.n	8002b8e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_TIM_Base_MspInit+0x68>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_TIM_Base_MspInit+0x68>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_TIM_Base_MspInit+0x68>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40000400 	.word	0x40000400

08002ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <HAL_TIM_MspPostInit+0x68>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d11d      	bne.n	8002c06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4805      	ldr	r0, [pc, #20]	; (8002c18 <HAL_TIM_MspPostInit+0x70>)
 8002c02:	f7fd feb5 	bl	8000970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c06:	bf00      	nop
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020800 	.word	0x40020800

08002c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	2032      	movs	r0, #50	; 0x32
 8002c32:	f7fd fe73 	bl	800091c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8002c36:	2032      	movs	r0, #50	; 0x32
 8002c38:	f7fd fe8c 	bl	8000954 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_InitTick+0xa4>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <HAL_InitTick+0xa4>)
 8002c46:	f043 0308 	orr.w	r3, r3, #8
 8002c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <HAL_InitTick+0xa4>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c58:	f107 0210 	add.w	r2, r7, #16
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fcb8 	bl	80015d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c68:	f7fe fca2 	bl	80015b0 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <HAL_InitTick+0xa8>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0c9b      	lsrs	r3, r3, #18
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_InitTick+0xac>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_InitTick+0xb0>)
 8002c84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_InitTick+0xac>)
 8002c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c8c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <HAL_InitTick+0xac>)
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_InitTick+0xac>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_InitTick+0xac>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002ca0:	4809      	ldr	r0, [pc, #36]	; (8002cc8 <HAL_InitTick+0xac>)
 8002ca2:	f7fe fccb 	bl	800163c <HAL_TIM_Base_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002cac:	4806      	ldr	r0, [pc, #24]	; (8002cc8 <HAL_InitTick+0xac>)
 8002cae:	f7fe fcf0 	bl	8001692 <HAL_TIM_Base_Start_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	e000      	b.n	8002cb8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3730      	adds	r7, #48	; 0x30
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	431bde83 	.word	0x431bde83
 8002cc8:	2001a7f0 	.word	0x2001a7f0
 8002ccc:	40000c00 	.word	0x40000c00

08002cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce2:	e7fe      	b.n	8002ce2 <HardFault_Handler+0x4>

08002ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <MemManage_Handler+0x4>

08002cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cee:	e7fe      	b.n	8002cee <BusFault_Handler+0x4>

08002cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <UsageFault_Handler+0x4>

08002cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <TIM5_IRQHandler+0x10>)
 8002d0a:	f7fe fd59 	bl	80017c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	2001a7f0 	.word	0x2001a7f0

08002d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <SystemInit+0x28>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <SystemInit+0x28>)
 8002d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <SystemInit+0x28>)
 8002d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d32:	609a      	str	r2, [r3, #8]
#endif
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d4a:	e003      	b.n	8002d54 <LoopCopyDataInit>

08002d4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d52:	3104      	adds	r1, #4

08002d54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d54:	480b      	ldr	r0, [pc, #44]	; (8002d84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d5c:	d3f6      	bcc.n	8002d4c <CopyDataInit>
  ldr  r2, =_sbss
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d60:	e002      	b.n	8002d68 <LoopFillZerobss>

08002d62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d64:	f842 3b04 	str.w	r3, [r2], #4

08002d68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d6c:	d3f9      	bcc.n	8002d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d6e:	f7ff ffd3 	bl	8002d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f004 fa29 	bl	80071c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7ff fb71 	bl	800245c <main>
  bx  lr    
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d80:	080073d8 	.word	0x080073d8
  ldr  r0, =_sdata
 8002d84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d88:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8002d8c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8002d90:	2001a918 	.word	0x2001a918

08002d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC_IRQHandler>

08002d96 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f103 0208 	add.w	r2, r3, #8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dae:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f103 0208 	add.w	r2, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f103 0208 	add.w	r2, r3, #8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	601a      	str	r2, [r3, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d103      	bne.n	8002e58 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e00c      	b.n	8002e72 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e002      	b.n	8002e66 <vListInsert+0x2e>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d2f6      	bcs.n	8002e60 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6852      	ldr	r2, [r2, #4]
 8002eca:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d103      	bne.n	8002ede <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <xQueueGenericReset+0x28>
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	e7fe      	b.n	8002f26 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002f28:	f002 f95c 	bl	80051e4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	68f9      	ldr	r1, [r7, #12]
 8002f36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	441a      	add	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	441a      	add	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	22ff      	movs	r2, #255	; 0xff
 8002f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	22ff      	movs	r2, #255	; 0xff
 8002f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d114      	bne.n	8002fa8 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01a      	beq.n	8002fbc <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3310      	adds	r3, #16
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 f9c8 	bl	8004320 <xTaskRemoveFromEventList>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <xQueueGenericReset+0xcc>)
 8002f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	e009      	b.n	8002fbc <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3310      	adds	r3, #16
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fef2 	bl	8002d96 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3324      	adds	r3, #36	; 0x24
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff feed 	bl	8002d96 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002fbc:	f002 f940 	bl	8005240 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002fc0:	2301      	movs	r3, #1
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000ed04 	.word	0xe000ed04

08002fd0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08c      	sub	sp, #48	; 0x30
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <xQueueGenericCreate+0x28>
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e7fe      	b.n	8002ff6 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <xQueueGenericCreate+0x46>
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	429a      	cmp	r2, r3
 8003014:	d101      	bne.n	800301a <xQueueGenericCreate+0x4a>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <xQueueGenericCreate+0x4c>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <xQueueGenericCreate+0x64>
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e7fe      	b.n	8003032 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800303a:	d909      	bls.n	8003050 <xQueueGenericCreate+0x80>
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	e7fe      	b.n	800304e <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	3350      	adds	r3, #80	; 0x50
 8003054:	4618      	mov	r0, r3
 8003056:	f002 f9e5 	bl	8005424 <pvPortMalloc>
 800305a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3350      	adds	r3, #80	; 0x50
 800306a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800306c:	79fa      	ldrb	r2, [r7, #7]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f805 	bl	8003088 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800307e:	6a3b      	ldr	r3, [r7, #32]
    }
 8003080:	4618      	mov	r0, r3
 8003082:	3728      	adds	r7, #40	; 0x28
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d103      	bne.n	80030a4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e002      	b.n	80030aa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030b6:	2101      	movs	r1, #1
 80030b8:	69b8      	ldr	r0, [r7, #24]
 80030ba:	f7ff ff21 	bl	8002f00 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	2073      	movs	r0, #115	; 0x73
 80030ce:	f003 f9a9 	bl	8006424 <SEGGER_SYSVIEW_RecordU32x3>
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b090      	sub	sp, #64	; 0x40
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <xQueueGenericSend+0x30>
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
 800310a:	e7fe      	b.n	800310a <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <xQueueGenericSend+0x3e>
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <xQueueGenericSend+0x42>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <xQueueGenericSend+0x44>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <xQueueGenericSend+0x5c>
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e7fe      	b.n	8003136 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d103      	bne.n	8003146 <xQueueGenericSend+0x6a>
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <xQueueGenericSend+0x6e>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <xQueueGenericSend+0x70>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <xQueueGenericSend+0x88>
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	e7fe      	b.n	8003162 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003164:	f001 fa78 	bl	8004658 <xTaskGetSchedulerState>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <xQueueGenericSend+0x98>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <xQueueGenericSend+0x9c>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <xQueueGenericSend+0x9e>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <xQueueGenericSend+0xb6>
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	e7fe      	b.n	8003190 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003192:	f002 f827 	bl	80051e4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <xQueueGenericSend+0xcc>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d136      	bne.n	8003216 <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fec4 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	460b      	mov	r3, r1
 80031ba:	4601      	mov	r1, r0
 80031bc:	205a      	movs	r0, #90	; 0x5a
 80031be:	f003 f9a7 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c8:	f000 fa78 	bl	80036bc <prvCopyDataToQueue>
 80031cc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	3324      	adds	r3, #36	; 0x24
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 f8a0 	bl	8004320 <xTaskRemoveFromEventList>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d013      	beq.n	800320e <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80031e6:	4b4d      	ldr	r3, [pc, #308]	; (800331c <xQueueGenericSend+0x240>)
 80031e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	e00a      	b.n	800320e <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <xQueueGenericSend+0x240>)
 8003200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800320e:	f002 f817 	bl	8005240 <vPortExitCritical>
                return pdPASS;
 8003212:	2301      	movs	r3, #1
 8003214:	e07d      	b.n	8003312 <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d110      	bne.n	800323e <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800321c:	f002 f810 	bl	8005240 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fe88 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	460b      	mov	r3, r1
 8003232:	4601      	mov	r1, r0
 8003234:	205a      	movs	r0, #90	; 0x5a
 8003236:	f003 f96b 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800323a:	2300      	movs	r3, #0
 800323c:	e069      	b.n	8003312 <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	2b00      	cmp	r3, #0
 8003242:	d106      	bne.n	8003252 <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	4618      	mov	r0, r3
 800324a:	f001 f8cf 	bl	80043ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800324e:	2301      	movs	r3, #1
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003252:	f001 fff5 	bl	8005240 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003256:	f000 fe1d 	bl	8003e94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800325a:	f001 ffc3 	bl	80051e4 <vPortEnterCritical>
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003264:	b25b      	sxtb	r3, r3
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d103      	bne.n	8003274 <xQueueGenericSend+0x198>
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327a:	b25b      	sxtb	r3, r3
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d103      	bne.n	800328a <xQueueGenericSend+0x1ae>
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800328a:	f001 ffd9 	bl	8005240 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800328e:	1d3a      	adds	r2, r7, #4
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f8be 	bl	8004418 <xTaskCheckForTimeOut>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d124      	bne.n	80032ec <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032a4:	f000 fb02 	bl	80038ac <prvIsQueueFull>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d018      	beq.n	80032e0 <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	3310      	adds	r3, #16
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 ffe0 	bl	800427c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80032bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032be:	f000 fa8d 	bl	80037dc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80032c2:	f000 fdf5 	bl	8003eb0 <xTaskResumeAll>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f af62 	bne.w	8003192 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <xQueueGenericSend+0x240>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	e758      	b.n	8003192 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80032e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032e2:	f000 fa7b 	bl	80037dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80032e6:	f000 fde3 	bl	8003eb0 <xTaskResumeAll>
 80032ea:	e752      	b.n	8003192 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80032ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ee:	f000 fa75 	bl	80037dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80032f2:	f000 fddd 	bl	8003eb0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fe1d 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	460b      	mov	r3, r1
 8003308:	4601      	mov	r1, r0
 800330a:	205a      	movs	r0, #90	; 0x5a
 800330c:	f003 f900 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003310:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003312:	4618      	mov	r0, r3
 8003314:	3738      	adds	r7, #56	; 0x38
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	e000ed04 	.word	0xe000ed04

08003320 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b090      	sub	sp, #64	; 0x40
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <xQueueGenericSendFromISR+0x2c>
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
 800334a:	e7fe      	b.n	800334a <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <xQueueGenericSendFromISR+0x3a>
 8003352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <xQueueGenericSendFromISR+0x3e>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <xQueueGenericSendFromISR+0x40>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <xQueueGenericSendFromISR+0x58>
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e7fe      	b.n	8003376 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d103      	bne.n	8003386 <xQueueGenericSendFromISR+0x66>
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <xQueueGenericSendFromISR+0x6a>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <xQueueGenericSendFromISR+0x6c>
 800338a:	2300      	movs	r3, #0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <xQueueGenericSendFromISR+0x84>
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	e7fe      	b.n	80033a2 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033a4:	f002 f800 	bl	80053a8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80033a8:	f3ef 8211 	mrs	r2, BASEPRI
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	61fa      	str	r2, [r7, #28]
 80033be:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80033c0:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <xQueueGenericSendFromISR+0xb6>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d147      	bne.n	8003466 <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fda5 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 80033ee:	4601      	mov	r1, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	461a      	mov	r2, r3
 80033f4:	2060      	movs	r0, #96	; 0x60
 80033f6:	f002 ffbb 	bl	8006370 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003400:	f000 f95c 	bl	80036bc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003404:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d112      	bne.n	8003434 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d024      	beq.n	8003460 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	3324      	adds	r3, #36	; 0x24
 800341a:	4618      	mov	r0, r3
 800341c:	f000 ff80 	bl	8004320 <xTaskRemoveFromEventList>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01c      	beq.n	8003460 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d019      	beq.n	8003460 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e015      	b.n	8003460 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003434:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003438:	2b7f      	cmp	r3, #127	; 0x7f
 800343a:	d109      	bne.n	8003450 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e7fe      	b.n	800344e <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003454:	3301      	adds	r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	b25a      	sxtb	r2, r3
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003460:	2301      	movs	r3, #1
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003464:	e00b      	b.n	800347e <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fd65 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 800346e:	4601      	mov	r1, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	461a      	mov	r2, r3
 8003474:	2060      	movs	r0, #96	; 0x60
 8003476:	f002 ff7b 	bl	8006370 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800347a:	2300      	movs	r3, #0
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003480:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800348a:	4618      	mov	r0, r3
 800348c:	3740      	adds	r7, #64	; 0x40
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b08f      	sub	sp, #60	; 0x3c
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <xQueueReceive+0x2e>
        __asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	e7fe      	b.n	80034c0 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <xQueueReceive+0x3c>
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <xQueueReceive+0x40>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <xQueueReceive+0x42>
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <xQueueReceive+0x5a>
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e7fe      	b.n	80034ec <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ee:	f001 f8b3 	bl	8004658 <xTaskGetSchedulerState>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <xQueueReceive+0x6a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <xQueueReceive+0x6e>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <xQueueReceive+0x70>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <xQueueReceive+0x88>
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	e7fe      	b.n	800351a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800351c:	f001 fe62 	bl	80051e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d031      	beq.n	8003590 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003530:	f000 f92e 	bl	8003790 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	4618      	mov	r0, r3
 8003538:	f003 fcfe 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 800353c:	4604      	mov	r4, r0
 800353e:	2000      	movs	r0, #0
 8003540:	f003 fcfa 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 8003544:	4601      	mov	r1, r0
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	2301      	movs	r3, #1
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	460a      	mov	r2, r1
 8003550:	4621      	mov	r1, r4
 8003552:	205c      	movs	r0, #92	; 0x5c
 8003554:	f002 ffdc 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	1e5a      	subs	r2, r3, #1
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00f      	beq.n	8003588 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	3310      	adds	r3, #16
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fed7 	bl	8004320 <xTaskRemoveFromEventList>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003578:	4b4f      	ldr	r3, [pc, #316]	; (80036b8 <xQueueReceive+0x224>)
 800357a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003588:	f001 fe5a 	bl	8005240 <vPortExitCritical>
                return pdPASS;
 800358c:	2301      	movs	r3, #1
 800358e:	e08e      	b.n	80036ae <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d115      	bne.n	80035c2 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003596:	f001 fe53 	bl	8005240 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	4618      	mov	r0, r3
 800359e:	f003 fccb 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 80035a2:	4604      	mov	r4, r0
 80035a4:	2000      	movs	r0, #0
 80035a6:	f003 fcc7 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 80035aa:	4601      	mov	r1, r0
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	2301      	movs	r3, #1
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	460a      	mov	r2, r1
 80035b6:	4621      	mov	r1, r4
 80035b8:	205c      	movs	r0, #92	; 0x5c
 80035ba:	f002 ffa9 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80035be:	2300      	movs	r3, #0
 80035c0:	e075      	b.n	80036ae <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 ff0d 	bl	80043ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80035d6:	f001 fe33 	bl	8005240 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80035da:	f000 fc5b 	bl	8003e94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80035de:	f001 fe01 	bl	80051e4 <vPortEnterCritical>
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d103      	bne.n	80035f8 <xQueueReceive+0x164>
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d103      	bne.n	800360e <xQueueReceive+0x17a>
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800360e:	f001 fe17 	bl	8005240 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003612:	1d3a      	adds	r2, r7, #4
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fefc 	bl	8004418 <xTaskCheckForTimeOut>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d124      	bne.n	8003670 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003628:	f000 f92a 	bl	8003880 <prvIsQueueEmpty>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d018      	beq.n	8003664 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	3324      	adds	r3, #36	; 0x24
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fe1e 	bl	800427c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003642:	f000 f8cb 	bl	80037dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003646:	f000 fc33 	bl	8003eb0 <xTaskResumeAll>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f47f af65 	bne.w	800351c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <xQueueReceive+0x224>)
 8003654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	e75b      	b.n	800351c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003666:	f000 f8b9 	bl	80037dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800366a:	f000 fc21 	bl	8003eb0 <xTaskResumeAll>
 800366e:	e755      	b.n	800351c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003672:	f000 f8b3 	bl	80037dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003676:	f000 fc1b 	bl	8003eb0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800367a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800367c:	f000 f900 	bl	8003880 <prvIsQueueEmpty>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	f43f af4a 	beq.w	800351c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fc54 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 8003690:	4604      	mov	r4, r0
 8003692:	2000      	movs	r0, #0
 8003694:	f003 fc50 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 8003698:	4601      	mov	r1, r0
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	2301      	movs	r3, #1
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	460a      	mov	r2, r1
 80036a4:	4621      	mov	r1, r4
 80036a6:	205c      	movs	r0, #92	; 0x5c
 80036a8:	f002 ff32 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80036ac:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3734      	adds	r7, #52	; 0x34
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd90      	pop	{r4, r7, pc}
 80036b6:	bf00      	nop
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d14d      	bne.n	800377e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 ffd4 	bl	8004694 <xTaskPriorityDisinherit>
 80036ec:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e043      	b.n	800377e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d119      	bne.n	8003730 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6858      	ldr	r0, [r3, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	461a      	mov	r2, r3
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	f003 fd91 	bl	800722e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	441a      	add	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d32b      	bcc.n	800377e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	e026      	b.n	800377e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68d8      	ldr	r0, [r3, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	461a      	mov	r2, r3
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	f003 fd77 	bl	800722e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	425b      	negs	r3, r3
 800374a:	441a      	add	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d207      	bcs.n	800376c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	425b      	negs	r3, r3
 8003766:	441a      	add	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d105      	bne.n	800377e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	3b01      	subs	r3, #1
 800377c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003786:	697b      	ldr	r3, [r7, #20]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d018      	beq.n	80037d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	441a      	add	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d303      	bcc.n	80037c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68d9      	ldr	r1, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	461a      	mov	r2, r3
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f003 fd2d 	bl	800722e <memcpy>
    }
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80037e4:	f001 fcfe 	bl	80051e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80037f0:	e011      	b.n	8003816 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3324      	adds	r3, #36	; 0x24
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fd8e 	bl	8004320 <xTaskRemoveFromEventList>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800380a:	f000 fe69 	bl	80044e0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	3b01      	subs	r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	dce9      	bgt.n	80037f2 <prvUnlockQueue+0x16>
 800381e:	e000      	b.n	8003822 <prvUnlockQueue+0x46>
                        break;
 8003820:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	22ff      	movs	r2, #255	; 0xff
 8003826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800382a:	f001 fd09 	bl	8005240 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800382e:	f001 fcd9 	bl	80051e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003838:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800383a:	e011      	b.n	8003860 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3310      	adds	r3, #16
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fd69 	bl	8004320 <xTaskRemoveFromEventList>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003854:	f000 fe44 	bl	80044e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003858:	7bbb      	ldrb	r3, [r7, #14]
 800385a:	3b01      	subs	r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003864:	2b00      	cmp	r3, #0
 8003866:	dce9      	bgt.n	800383c <prvUnlockQueue+0x60>
 8003868:	e000      	b.n	800386c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800386a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	22ff      	movs	r2, #255	; 0xff
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003874:	f001 fce4 	bl	8005240 <vPortExitCritical>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003888:	f001 fcac 	bl	80051e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003894:	2301      	movs	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e001      	b.n	800389e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800389e:	f001 fccf 	bl	8005240 <vPortExitCritical>

    return xReturn;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80038b4:	f001 fc96 	bl	80051e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d102      	bne.n	80038ca <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e001      	b.n	80038ce <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80038ce:	f001 fcb7 	bl	8005240 <vPortExitCritical>

    return xReturn;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e01e      	b.n	800392a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038ec:	4a12      	ldr	r2, [pc, #72]	; (8003938 <vQueueAddToRegistry+0x5c>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d115      	bne.n	8003924 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038f8:	490f      	ldr	r1, [pc, #60]	; (8003938 <vQueueAddToRegistry+0x5c>)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003902:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <vQueueAddToRegistry+0x5c>)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f003 fb11 	bl	8006f38 <SEGGER_SYSVIEW_ShrinkId>
 8003916:	4601      	mov	r1, r0
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	2071      	movs	r0, #113	; 0x71
 800391e:	f002 fd27 	bl	8006370 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003922:	e005      	b.n	8003930 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b07      	cmp	r3, #7
 800392e:	d9dd      	bls.n	80038ec <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2001a830 	.word	0x2001a830

0800393c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800394c:	f001 fc4a 	bl	80051e4 <vPortEnterCritical>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003956:	b25b      	sxtb	r3, r3
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d103      	bne.n	8003966 <vQueueWaitForMessageRestricted+0x2a>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800396c:	b25b      	sxtb	r3, r3
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d103      	bne.n	800397c <vQueueWaitForMessageRestricted+0x40>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800397c:	f001 fc60 	bl	8005240 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3324      	adds	r3, #36	; 0x24
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fc97 	bl	80042c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f7ff ff20 	bl	80037dc <prvUnlockQueue>
    }
 800399c:	bf00      	nop
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	; 0x30
 80039a8:	af04      	add	r7, sp, #16
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fd33 	bl	8005424 <pvPortMalloc>
 80039be:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039c6:	2058      	movs	r0, #88	; 0x58
 80039c8:	f001 fd2c 	bl	8005424 <pvPortMalloc>
 80039cc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
 80039da:	e005      	b.n	80039e8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80039dc:	6978      	ldr	r0, [r7, #20]
 80039de:	f001 fdfd 	bl	80055dc <vPortFree>
 80039e2:	e001      	b.n	80039e8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d013      	beq.n	8003a16 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ee:	88fa      	ldrh	r2, [r7, #6]
 80039f0:	2300      	movs	r3, #0
 80039f2:	9303      	str	r3, [sp, #12]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	9302      	str	r3, [sp, #8]
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f80e 	bl	8003a26 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003a0a:	69f8      	ldr	r0, [r7, #28]
 8003a0c:	f000 f8a0 	bl	8003b50 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003a10:	2301      	movs	r3, #1
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	e002      	b.n	8003a1c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003a1c:	69bb      	ldr	r3, [r7, #24]
    }
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b088      	sub	sp, #32
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	21a5      	movs	r1, #165	; 0xa5
 8003a40:	f003 fc00 	bl	8007244 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	f023 0307 	bic.w	r3, r3, #7
 8003a5c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <prvInitialiseNewTask+0x56>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e7fe      	b.n	8003a7a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01f      	beq.n	8003ac2 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e012      	b.n	8003aae <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	7819      	ldrb	r1, [r3, #0]
 8003a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	3334      	adds	r3, #52	; 0x34
 8003a98:	460a      	mov	r2, r1
 8003a9a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2b09      	cmp	r3, #9
 8003ab2:	d9e9      	bls.n	8003a88 <prvInitialiseNewTask+0x62>
 8003ab4:	e000      	b.n	8003ab8 <prvInitialiseNewTask+0x92>
            {
                break;
 8003ab6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ac0:	e003      	b.n	8003aca <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d901      	bls.n	8003ad4 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ade:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f973 	bl	8002dd6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	3318      	adds	r3, #24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f96e 	bl	8002dd6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	f1c3 0205 	rsb	r2, r3, #5
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	3350      	adds	r3, #80	; 0x50
 8003b14:	2204      	movs	r2, #4
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fb93 	bl	8007244 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	3354      	adds	r3, #84	; 0x54
 8003b22:	2201      	movs	r2, #1
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 fb8c 	bl	8007244 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	69b8      	ldr	r0, [r7, #24]
 8003b32:	f001 f9b3 	bl	8004e9c <pxPortInitialiseStack>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b46:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b48:	bf00      	nop
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003b50:	b5b0      	push	{r4, r5, r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003b58:	f001 fb44 	bl	80051e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <prvAddNewTaskToReadyList+0xfc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	4a3a      	ldr	r2, [pc, #232]	; (8003c4c <prvAddNewTaskToReadyList+0xfc>)
 8003b64:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003b66:	4b3a      	ldr	r3, [pc, #232]	; (8003c50 <prvAddNewTaskToReadyList+0x100>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003b6e:	4a38      	ldr	r2, [pc, #224]	; (8003c50 <prvAddNewTaskToReadyList+0x100>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <prvAddNewTaskToReadyList+0xfc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d110      	bne.n	8003b9e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003b7c:	f000 fcd4 	bl	8004528 <prvInitialiseTaskLists>
 8003b80:	e00d      	b.n	8003b9e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003b82:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <prvAddNewTaskToReadyList+0x104>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <prvAddNewTaskToReadyList+0x100>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d802      	bhi.n	8003b9e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <prvAddNewTaskToReadyList+0x100>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <prvAddNewTaskToReadyList+0x108>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <prvAddNewTaskToReadyList+0x108>)
 8003ba6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <prvAddNewTaskToReadyList+0x108>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <prvAddNewTaskToReadyList+0x94>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 f897 	bl	8006cec <SEGGER_SYSVIEW_OnTaskCreate>
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	461d      	mov	r5, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	1ae3      	subs	r3, r4, r3
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	462b      	mov	r3, r5
 8003be0:	f001 fec0 	bl	8005964 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 f904 	bl	8006df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <prvAddNewTaskToReadyList+0x10c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <prvAddNewTaskToReadyList+0x10c>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <prvAddNewTaskToReadyList+0x110>)
 8003c0c:	441a      	add	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7ff f8eb 	bl	8002df0 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003c1a:	f001 fb11 	bl	8005240 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <prvAddNewTaskToReadyList+0x104>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <prvAddNewTaskToReadyList+0x100>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d207      	bcs.n	8003c44 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <prvAddNewTaskToReadyList+0x114>)
 8003c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4c:	2000010c 	.word	0x2000010c
 8003c50:	20000034 	.word	0x20000034
 8003c54:	20000118 	.word	0x20000118
 8003c58:	20000128 	.word	0x20000128
 8003c5c:	20000114 	.word	0x20000114
 8003c60:	20000038 	.word	0x20000038
 8003c64:	e000ed04 	.word	0xe000ed04

08003c68 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <xTaskDelayUntil+0x28>
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e7fe      	b.n	8003c8e <xTaskDelayUntil+0x26>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <xTaskDelayUntil+0x42>
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	e7fe      	b.n	8003ca8 <xTaskDelayUntil+0x40>
        configASSERT( uxSchedulerSuspended == 0 );
 8003caa:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <xTaskDelayUntil+0xf0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <xTaskDelayUntil+0x5e>
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e7fe      	b.n	8003cc4 <xTaskDelayUntil+0x5c>

        vTaskSuspendAll();
 8003cc6:	f000 f8e5 	bl	8003e94 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <xTaskDelayUntil+0xf4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a3a      	ldr	r2, [r7, #32]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d20b      	bcs.n	8003cfc <xTaskDelayUntil+0x94>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d211      	bcs.n	8003d12 <xTaskDelayUntil+0xaa>
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d90d      	bls.n	8003d12 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	e00a      	b.n	8003d12 <xTaskDelayUntil+0xaa>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d303      	bcc.n	8003d0e <xTaskDelayUntil+0xa6>
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d901      	bls.n	8003d12 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003d1e:	2024      	movs	r0, #36	; 0x24
 8003d20:	f002 facc 	bl	80062bc <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fd2f 	bl	8004790 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003d32:	f000 f8bd 	bl	8003eb0 <xTaskResumeAll>
 8003d36:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <xTaskDelayUntil+0xf8>)
 8003d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d50:	4618      	mov	r0, r3
 8003d52:	3728      	adds	r7, #40	; 0x28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000134 	.word	0x20000134
 8003d5c:	20000110 	.word	0x20000110
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01a      	beq.n	8003dac <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <vTaskDelay+0x68>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <vTaskDelay+0x2e>
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	e7fe      	b.n	8003d90 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8003d92:	f000 f87f 	bl	8003e94 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	2023      	movs	r0, #35	; 0x23
 8003d9a:	f002 faad 	bl	80062f8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d9e:	2100      	movs	r1, #0
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fcf5 	bl	8004790 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003da6:	f000 f883 	bl	8003eb0 <xTaskResumeAll>
 8003daa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <vTaskDelay+0x6c>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000134 	.word	0x20000134
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003dda:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <vTaskStartScheduler+0xa0>)
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	2282      	movs	r2, #130	; 0x82
 8003de6:	4924      	ldr	r1, [pc, #144]	; (8003e78 <vTaskStartScheduler+0xa4>)
 8003de8:	4824      	ldr	r0, [pc, #144]	; (8003e7c <vTaskStartScheduler+0xa8>)
 8003dea:	f7ff fddb 	bl	80039a4 <xTaskCreate>
 8003dee:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d102      	bne.n	8003dfc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003df6:	f000 fd43 	bl	8004880 <xTimerCreateTimerTask>
 8003dfa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d123      	bne.n	8003e4a <vTaskStartScheduler+0x76>
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003e14:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <vTaskStartScheduler+0xac>)
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <vTaskStartScheduler+0xb0>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e22:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <vTaskStartScheduler+0xb4>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003e28:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <vTaskStartScheduler+0xb8>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <vTaskStartScheduler+0xa0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d102      	bne.n	8003e3a <vTaskStartScheduler+0x66>
 8003e34:	f002 ff3e 	bl	8006cb4 <SEGGER_SYSVIEW_OnIdle>
 8003e38:	e004      	b.n	8003e44 <vTaskStartScheduler+0x70>
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <vTaskStartScheduler+0xb8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f002 ff96 	bl	8006d70 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003e44:	f001 f8b6 	bl	8004fb4 <xPortStartScheduler>
 8003e48:	e00d      	b.n	8003e66 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d109      	bne.n	8003e66 <vTaskStartScheduler+0x92>
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	e7fe      	b.n	8003e64 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <vTaskStartScheduler+0xbc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000130 	.word	0x20000130
 8003e78:	080072b8 	.word	0x080072b8
 8003e7c:	080044f9 	.word	0x080044f9
 8003e80:	2000012c 	.word	0x2000012c
 8003e84:	20000118 	.word	0x20000118
 8003e88:	20000110 	.word	0x20000110
 8003e8c:	20000034 	.word	0x20000034
 8003e90:	2000000c 	.word	0x2000000c

08003e94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <vTaskSuspendAll+0x18>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	4a03      	ldr	r2, [pc, #12]	; (8003eac <vTaskSuspendAll+0x18>)
 8003ea0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003ea2:	bf00      	nop
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20000134 	.word	0x20000134

08003eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003ebe:	4b43      	ldr	r3, [pc, #268]	; (8003fcc <xTaskResumeAll+0x11c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <xTaskResumeAll+0x2a>
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	e7fe      	b.n	8003ed8 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003eda:	f001 f983 	bl	80051e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ede:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <xTaskResumeAll+0x11c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	4a39      	ldr	r2, [pc, #228]	; (8003fcc <xTaskResumeAll+0x11c>)
 8003ee6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee8:	4b38      	ldr	r3, [pc, #224]	; (8003fcc <xTaskResumeAll+0x11c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d165      	bne.n	8003fbc <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ef0:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <xTaskResumeAll+0x120>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d061      	beq.n	8003fbc <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ef8:	e032      	b.n	8003f60 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <xTaskResumeAll+0x124>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3318      	adds	r3, #24
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe ffcf 	bl	8002eaa <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe ffca 	bl	8002eaa <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f002 ff6b 	bl	8006df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	2201      	movs	r2, #1
 8003f24:	409a      	lsls	r2, r3
 8003f26:	4b2c      	ldr	r3, [pc, #176]	; (8003fd8 <xTaskResumeAll+0x128>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <xTaskResumeAll+0x128>)
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <xTaskResumeAll+0x12c>)
 8003f3e:	441a      	add	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7fe ff52 	bl	8002df0 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <xTaskResumeAll+0x130>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d302      	bcc.n	8003f60 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <xTaskResumeAll+0x134>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f60:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <xTaskResumeAll+0x124>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1c8      	bne.n	8003efa <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f6e:	f000 fb57 	bl	8004620 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <xTaskResumeAll+0x138>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d010      	beq.n	8003fa0 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f7e:	f000 f859 	bl	8004034 <xTaskIncrementTick>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8003f88:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <xTaskResumeAll+0x134>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f1      	bne.n	8003f7e <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8003f9a:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <xTaskResumeAll+0x138>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003fa0:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <xTaskResumeAll+0x134>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <xTaskResumeAll+0x13c>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003fbc:	f001 f940 	bl	8005240 <vPortExitCritical>

    return xAlreadyYielded;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000134 	.word	0x20000134
 8003fd0:	2000010c 	.word	0x2000010c
 8003fd4:	200000cc 	.word	0x200000cc
 8003fd8:	20000114 	.word	0x20000114
 8003fdc:	20000038 	.word	0x20000038
 8003fe0:	20000034 	.word	0x20000034
 8003fe4:	20000120 	.word	0x20000120
 8003fe8:	2000011c 	.word	0x2000011c
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <xTaskGetTickCount+0x1c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003ffc:	687b      	ldr	r3, [r7, #4]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000110 	.word	0x20000110

08004010 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004016:	f001 f9c7 	bl	80053a8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <xTaskGetTickCountFromISR+0x20>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004024:	683b      	ldr	r3, [r7, #0]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000110 	.word	0x20000110

08004034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800403e:	4b50      	ldr	r3, [pc, #320]	; (8004180 <xTaskIncrementTick+0x14c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f040 8091 	bne.w	800416a <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004048:	4b4e      	ldr	r3, [pc, #312]	; (8004184 <xTaskIncrementTick+0x150>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3301      	adds	r3, #1
 800404e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004050:	4a4c      	ldr	r2, [pc, #304]	; (8004184 <xTaskIncrementTick+0x150>)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d11f      	bne.n	800409c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800405c:	4b4a      	ldr	r3, [pc, #296]	; (8004188 <xTaskIncrementTick+0x154>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <xTaskIncrementTick+0x46>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	e7fe      	b.n	8004078 <xTaskIncrementTick+0x44>
 800407a:	4b43      	ldr	r3, [pc, #268]	; (8004188 <xTaskIncrementTick+0x154>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	4b42      	ldr	r3, [pc, #264]	; (800418c <xTaskIncrementTick+0x158>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a40      	ldr	r2, [pc, #256]	; (8004188 <xTaskIncrementTick+0x154>)
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4a40      	ldr	r2, [pc, #256]	; (800418c <xTaskIncrementTick+0x158>)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	4b40      	ldr	r3, [pc, #256]	; (8004190 <xTaskIncrementTick+0x15c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	4a3e      	ldr	r2, [pc, #248]	; (8004190 <xTaskIncrementTick+0x15c>)
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	f000 fac2 	bl	8004620 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800409c:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <xTaskIncrementTick+0x160>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d34c      	bcc.n	8004140 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a6:	4b38      	ldr	r3, [pc, #224]	; (8004188 <xTaskIncrementTick+0x154>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b0:	4b38      	ldr	r3, [pc, #224]	; (8004194 <xTaskIncrementTick+0x160>)
 80040b2:	f04f 32ff 	mov.w	r2, #4294967295
 80040b6:	601a      	str	r2, [r3, #0]
                    break;
 80040b8:	e042      	b.n	8004140 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ba:	4b33      	ldr	r3, [pc, #204]	; (8004188 <xTaskIncrementTick+0x154>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d203      	bcs.n	80040da <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80040d2:	4a30      	ldr	r2, [pc, #192]	; (8004194 <xTaskIncrementTick+0x160>)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040d8:	e032      	b.n	8004140 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3304      	adds	r3, #4
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fee3 	bl	8002eaa <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	3318      	adds	r3, #24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe feda 	bl	8002eaa <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f002 fe7b 	bl	8006df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	2201      	movs	r2, #1
 8004104:	409a      	lsls	r2, r3
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <xTaskIncrementTick+0x164>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	4a22      	ldr	r2, [pc, #136]	; (8004198 <xTaskIncrementTick+0x164>)
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <xTaskIncrementTick+0x168>)
 800411e:	441a      	add	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f7fe fe62 	bl	8002df0 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <xTaskIncrementTick+0x16c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	429a      	cmp	r2, r3
 8004138:	d3b5      	bcc.n	80040a6 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800413a:	2301      	movs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413e:	e7b2      	b.n	80040a6 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004140:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <xTaskIncrementTick+0x16c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	4915      	ldr	r1, [pc, #84]	; (800419c <xTaskIncrementTick+0x168>)
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d901      	bls.n	800415c <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <xTaskIncrementTick+0x170>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e004      	b.n	8004174 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <xTaskIncrementTick+0x174>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <xTaskIncrementTick+0x174>)
 8004172:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004174:	697b      	ldr	r3, [r7, #20]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000134 	.word	0x20000134
 8004184:	20000110 	.word	0x20000110
 8004188:	200000c4 	.word	0x200000c4
 800418c:	200000c8 	.word	0x200000c8
 8004190:	20000124 	.word	0x20000124
 8004194:	2000012c 	.word	0x2000012c
 8004198:	20000114 	.word	0x20000114
 800419c:	20000038 	.word	0x20000038
 80041a0:	20000034 	.word	0x20000034
 80041a4:	20000120 	.word	0x20000120
 80041a8:	2000011c 	.word	0x2000011c

080041ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041b2:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <vTaskSwitchContext+0xb8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80041ba:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <vTaskSwitchContext+0xbc>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80041c0:	e04c      	b.n	800425c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80041c2:	4b29      	ldr	r3, [pc, #164]	; (8004268 <vTaskSwitchContext+0xbc>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c8:	4b28      	ldr	r3, [pc, #160]	; (800426c <vTaskSwitchContext+0xc0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	fab3 f383 	clz	r3, r3
 80041d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	f1c3 031f 	rsb	r3, r3, #31
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	4924      	ldr	r1, [pc, #144]	; (8004270 <vTaskSwitchContext+0xc4>)
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <vTaskSwitchContext+0x5a>
        __asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	e7fe      	b.n	8004204 <vTaskSwitchContext+0x58>
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4a17      	ldr	r2, [pc, #92]	; (8004270 <vTaskSwitchContext+0xc4>)
 8004212:	4413      	add	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	3308      	adds	r3, #8
 8004228:	429a      	cmp	r2, r3
 800422a:	d104      	bne.n	8004236 <vTaskSwitchContext+0x8a>
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <vTaskSwitchContext+0xc8>)
 800423e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <vTaskSwitchContext+0xc8>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <vTaskSwitchContext+0xcc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d102      	bne.n	8004252 <vTaskSwitchContext+0xa6>
 800424c:	f002 fd32 	bl	8006cb4 <SEGGER_SYSVIEW_OnIdle>
}
 8004250:	e004      	b.n	800425c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <vTaskSwitchContext+0xc8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f002 fd8a 	bl	8006d70 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800425c:	bf00      	nop
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000134 	.word	0x20000134
 8004268:	20000120 	.word	0x20000120
 800426c:	20000114 	.word	0x20000114
 8004270:	20000038 	.word	0x20000038
 8004274:	20000034 	.word	0x20000034
 8004278:	20000130 	.word	0x20000130

0800427c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <vTaskPlaceOnEventList+0x24>
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e7fe      	b.n	800429e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <vTaskPlaceOnEventList+0x44>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3318      	adds	r3, #24
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fe fdc5 	bl	8002e38 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ae:	2101      	movs	r1, #1
 80042b0:	6838      	ldr	r0, [r7, #0]
 80042b2:	f000 fa6d 	bl	8004790 <prvAddCurrentTaskToDelayedList>
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000034 	.word	0x20000034

080042c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <vTaskPlaceOnEventListRestricted+0x26>
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e7fe      	b.n	80042e8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <vTaskPlaceOnEventListRestricted+0x58>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3318      	adds	r3, #24
 80042f0:	4619      	mov	r1, r3
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7fe fd7c 	bl	8002df0 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004304:	2024      	movs	r0, #36	; 0x24
 8004306:	f001 ffd9 	bl	80062bc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	68b8      	ldr	r0, [r7, #8]
 800430e:	f000 fa3f 	bl	8004790 <prvAddCurrentTaskToDelayedList>
    }
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000034 	.word	0x20000034

08004320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <xTaskRemoveFromEventList+0x2a>
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e7fe      	b.n	8004348 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3318      	adds	r3, #24
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe fdab 	bl	8002eaa <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004354:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <xTaskRemoveFromEventList+0xb4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d120      	bne.n	800439e <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	3304      	adds	r3, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fda2 	bl	8002eaa <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4618      	mov	r0, r3
 800436a:	f002 fd43 	bl	8006df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	2201      	movs	r2, #1
 8004374:	409a      	lsls	r2, r3
 8004376:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <xTaskRemoveFromEventList+0xb8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <xTaskRemoveFromEventList+0xb8>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <xTaskRemoveFromEventList+0xbc>)
 800438e:	441a      	add	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7fe fd2a 	bl	8002df0 <vListInsertEnd>
 800439c:	e005      	b.n	80043aa <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	3318      	adds	r3, #24
 80043a2:	4619      	mov	r1, r3
 80043a4:	480e      	ldr	r0, [pc, #56]	; (80043e0 <xTaskRemoveFromEventList+0xc0>)
 80043a6:	f7fe fd23 	bl	8002df0 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <xTaskRemoveFromEventList+0xc4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d905      	bls.n	80043c4 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <xTaskRemoveFromEventList+0xc8>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e001      	b.n	80043c8 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80043c8:	697b      	ldr	r3, [r7, #20]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000134 	.word	0x20000134
 80043d8:	20000114 	.word	0x20000114
 80043dc:	20000038 	.word	0x20000038
 80043e0:	200000cc 	.word	0x200000cc
 80043e4:	20000034 	.word	0x20000034
 80043e8:	20000120 	.word	0x20000120

080043ec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <vTaskInternalSetTimeOutState+0x24>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <vTaskInternalSetTimeOutState+0x28>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	605a      	str	r2, [r3, #4]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	20000124 	.word	0x20000124
 8004414:	20000110 	.word	0x20000110

08004418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <xTaskCheckForTimeOut+0x24>
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e7fe      	b.n	800443a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <xTaskCheckForTimeOut+0x3e>
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e7fe      	b.n	8004454 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8004456:	f000 fec5 	bl	80051e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800445a:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <xTaskCheckForTimeOut+0xc0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d102      	bne.n	800447a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e026      	b.n	80044c8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <xTaskCheckForTimeOut+0xc4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d00a      	beq.n	800449c <xTaskCheckForTimeOut+0x84>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	429a      	cmp	r2, r3
 800448e:	d305      	bcc.n	800449c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e015      	b.n	80044c8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d20b      	bcs.n	80044be <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	1ad2      	subs	r2, r2, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff ff9a 	bl	80043ec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	e004      	b.n	80044c8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80044c8:	f000 feba 	bl	8005240 <vPortExitCritical>

    return xReturn;
 80044cc:	69fb      	ldr	r3, [r7, #28]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000110 	.word	0x20000110
 80044dc:	20000124 	.word	0x20000124

080044e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <vTaskMissedYield+0x14>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
}
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000120 	.word	0x20000120

080044f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004500:	f000 f852 	bl	80045a8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <prvIdleTask+0x28>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d9f9      	bls.n	8004500 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <prvIdleTask+0x2c>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800451c:	e7f0      	b.n	8004500 <prvIdleTask+0x8>
 800451e:	bf00      	nop
 8004520:	20000038 	.word	0x20000038
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	e00c      	b.n	800454e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <prvInitialiseTaskLists+0x60>)
 8004540:	4413      	add	r3, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fc27 	bl	8002d96 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3301      	adds	r3, #1
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d9ef      	bls.n	8004534 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004554:	480d      	ldr	r0, [pc, #52]	; (800458c <prvInitialiseTaskLists+0x64>)
 8004556:	f7fe fc1e 	bl	8002d96 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800455a:	480d      	ldr	r0, [pc, #52]	; (8004590 <prvInitialiseTaskLists+0x68>)
 800455c:	f7fe fc1b 	bl	8002d96 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004560:	480c      	ldr	r0, [pc, #48]	; (8004594 <prvInitialiseTaskLists+0x6c>)
 8004562:	f7fe fc18 	bl	8002d96 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004566:	480c      	ldr	r0, [pc, #48]	; (8004598 <prvInitialiseTaskLists+0x70>)
 8004568:	f7fe fc15 	bl	8002d96 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800456c:	480b      	ldr	r0, [pc, #44]	; (800459c <prvInitialiseTaskLists+0x74>)
 800456e:	f7fe fc12 	bl	8002d96 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <prvInitialiseTaskLists+0x78>)
 8004574:	4a05      	ldr	r2, [pc, #20]	; (800458c <prvInitialiseTaskLists+0x64>)
 8004576:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <prvInitialiseTaskLists+0x7c>)
 800457a:	4a05      	ldr	r2, [pc, #20]	; (8004590 <prvInitialiseTaskLists+0x68>)
 800457c:	601a      	str	r2, [r3, #0]
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000038 	.word	0x20000038
 800458c:	2000009c 	.word	0x2000009c
 8004590:	200000b0 	.word	0x200000b0
 8004594:	200000cc 	.word	0x200000cc
 8004598:	200000e0 	.word	0x200000e0
 800459c:	200000f8 	.word	0x200000f8
 80045a0:	200000c4 	.word	0x200000c4
 80045a4:	200000c8 	.word	0x200000c8

080045a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ae:	e019      	b.n	80045e4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80045b0:	f000 fe18 	bl	80051e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <prvCheckTasksWaitingTermination+0x4c>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fc72 	bl	8002eaa <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <prvCheckTasksWaitingTermination+0x50>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <prvCheckTasksWaitingTermination+0x50>)
 80045ce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <prvCheckTasksWaitingTermination+0x54>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <prvCheckTasksWaitingTermination+0x54>)
 80045d8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80045da:	f000 fe31 	bl	8005240 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f80e 	bl	8004600 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <prvCheckTasksWaitingTermination+0x54>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e1      	bne.n	80045b0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	200000e0 	.word	0x200000e0
 80045f8:	2000010c 	.word	0x2000010c
 80045fc:	200000f4 	.word	0x200000f4

08004600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	4618      	mov	r0, r3
 800460e:	f000 ffe5 	bl	80055dc <vPortFree>
                vPortFree( pxTCB );
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 ffe2 	bl	80055dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <prvResetNextTaskUnblockTime+0x30>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <prvResetNextTaskUnblockTime+0x34>)
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004636:	e005      	b.n	8004644 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <prvResetNextTaskUnblockTime+0x30>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a04      	ldr	r2, [pc, #16]	; (8004654 <prvResetNextTaskUnblockTime+0x34>)
 8004642:	6013      	str	r3, [r2, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	200000c4 	.word	0x200000c4
 8004654:	2000012c 	.word	0x2000012c

08004658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <xTaskGetSchedulerState+0x34>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004666:	2301      	movs	r3, #1
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	e008      	b.n	800467e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <xTaskGetSchedulerState+0x38>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004674:	2302      	movs	r3, #2
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e001      	b.n	800467e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800467e:	687b      	ldr	r3, [r7, #4]
    }
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	20000118 	.word	0x20000118
 8004690:	20000134 	.word	0x20000134

08004694 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d066      	beq.n	8004778 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80046aa:	4b36      	ldr	r3, [pc, #216]	; (8004784 <xTaskPriorityDisinherit+0xf0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d009      	beq.n	80046c8 <xTaskPriorityDisinherit+0x34>
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e7fe      	b.n	80046c6 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d109      	bne.n	80046e4 <xTaskPriorityDisinherit+0x50>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	e7fe      	b.n	80046e2 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d03e      	beq.n	8004778 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d13a      	bne.n	8004778 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fbcf 	bl	8002eaa <uxListRemove>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	2201      	movs	r2, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43da      	mvns	r2, r3
 800471e:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <xTaskPriorityDisinherit+0xf4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4013      	ands	r3, r2
 8004724:	4a18      	ldr	r2, [pc, #96]	; (8004788 <xTaskPriorityDisinherit+0xf4>)
 8004726:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4619      	mov	r1, r3
 800472c:	204a      	movs	r0, #74	; 0x4a
 800472e:	f001 fde3 	bl	80062f8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f1c3 0205 	rsb	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	2201      	movs	r2, #1
 800474c:	409a      	lsls	r2, r3
 800474e:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <xTaskPriorityDisinherit+0xf4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <xTaskPriorityDisinherit+0xf4>)
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4a09      	ldr	r2, [pc, #36]	; (800478c <xTaskPriorityDisinherit+0xf8>)
 8004766:	441a      	add	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7fe fb3e 	bl	8002df0 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004778:	697b      	ldr	r3, [r7, #20]
    }
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000034 	.word	0x20000034
 8004788:	20000114 	.word	0x20000114
 800478c:	20000038 	.word	0x20000038

08004790 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800479a:	4b32      	ldr	r3, [pc, #200]	; (8004864 <prvAddCurrentTaskToDelayedList+0xd4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a0:	4b31      	ldr	r3, [pc, #196]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe fb7f 	bl	8002eaa <uxListRemove>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047b2:	4b2d      	ldr	r3, [pc, #180]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	2201      	movs	r2, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43da      	mvns	r2, r3
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <prvAddCurrentTaskToDelayedList+0xdc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4013      	ands	r3, r2
 80047c6:	4a29      	ldr	r2, [pc, #164]	; (800486c <prvAddCurrentTaskToDelayedList+0xdc>)
 80047c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d110      	bne.n	80047f4 <prvAddCurrentTaskToDelayedList+0x64>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00d      	beq.n	80047f4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80047d8:	4b23      	ldr	r3, [pc, #140]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	211b      	movs	r1, #27
 80047de:	4618      	mov	r0, r3
 80047e0:	f002 fb4a 	bl	8006e78 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e4:	4b20      	ldr	r3, [pc, #128]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4820      	ldr	r0, [pc, #128]	; (8004870 <prvAddCurrentTaskToDelayedList+0xe0>)
 80047ee:	f7fe faff 	bl	8002df0 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80047f2:	e032      	b.n	800485a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4413      	add	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047fc:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	429a      	cmp	r2, r3
 800480a:	d20f      	bcs.n	800482c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800480c:	4b16      	ldr	r3, [pc, #88]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2104      	movs	r1, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f002 fb30 	bl	8006e78 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004818:	4b16      	ldr	r3, [pc, #88]	; (8004874 <prvAddCurrentTaskToDelayedList+0xe4>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b12      	ldr	r3, [pc, #72]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3304      	adds	r3, #4
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f7fe fb07 	bl	8002e38 <vListInsert>
}
 800482a:	e016      	b.n	800485a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2104      	movs	r1, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f002 fb20 	bl	8006e78 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <prvAddCurrentTaskToDelayedList+0xe8>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <prvAddCurrentTaskToDelayedList+0xd8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fe faf7 	bl	8002e38 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <prvAddCurrentTaskToDelayedList+0xec>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d202      	bcs.n	800485a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004854:	4a09      	ldr	r2, [pc, #36]	; (800487c <prvAddCurrentTaskToDelayedList+0xec>)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6013      	str	r3, [r2, #0]
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000110 	.word	0x20000110
 8004868:	20000034 	.word	0x20000034
 800486c:	20000114 	.word	0x20000114
 8004870:	200000f8 	.word	0x200000f8
 8004874:	200000c8 	.word	0x200000c8
 8004878:	200000c4 	.word	0x200000c4
 800487c:	2000012c 	.word	0x2000012c

08004880 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800488a:	f000 fad1 	bl	8004e30 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <xTimerCreateTimerTask+0x54>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <xTimerCreateTimerTask+0x58>)
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	2302      	movs	r3, #2
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2300      	movs	r3, #0
 80048a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048a4:	490d      	ldr	r1, [pc, #52]	; (80048dc <xTimerCreateTimerTask+0x5c>)
 80048a6:	480e      	ldr	r0, [pc, #56]	; (80048e0 <xTimerCreateTimerTask+0x60>)
 80048a8:	f7ff f87c 	bl	80039a4 <xTaskCreate>
 80048ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <xTimerCreateTimerTask+0x48>
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	e7fe      	b.n	80048c6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 80048c8:	687b      	ldr	r3, [r7, #4]
    }
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000168 	.word	0x20000168
 80048d8:	2000016c 	.word	0x2000016c
 80048dc:	080072c0 	.word	0x080072c0
 80048e0:	08004a15 	.word	0x08004a15

080048e4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <xTimerGenericCommand+0x2c>
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	e7fe      	b.n	800490e <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <xTimerGenericCommand+0x94>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d02a      	beq.n	800496e <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b05      	cmp	r3, #5
 8004928:	dc18      	bgt.n	800495c <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800492a:	f7ff fe95 	bl	8004658 <xTaskGetSchedulerState>
 800492e:	4603      	mov	r3, r0
 8004930:	2b02      	cmp	r3, #2
 8004932:	d109      	bne.n	8004948 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004934:	4b10      	ldr	r3, [pc, #64]	; (8004978 <xTimerGenericCommand+0x94>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	f107 0114 	add.w	r1, r7, #20
 800493c:	2300      	movs	r3, #0
 800493e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004940:	f7fe fbcc 	bl	80030dc <xQueueGenericSend>
 8004944:	6278      	str	r0, [r7, #36]	; 0x24
 8004946:	e012      	b.n	800496e <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <xTimerGenericCommand+0x94>)
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	f107 0114 	add.w	r1, r7, #20
 8004950:	2300      	movs	r3, #0
 8004952:	2200      	movs	r2, #0
 8004954:	f7fe fbc2 	bl	80030dc <xQueueGenericSend>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24
 800495a:	e008      	b.n	800496e <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <xTimerGenericCommand+0x94>)
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	f107 0114 	add.w	r1, r7, #20
 8004964:	2300      	movs	r3, #0
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	f7fe fcda 	bl	8003320 <xQueueGenericSendFromISR>
 800496c:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004970:	4618      	mov	r0, r3
 8004972:	3728      	adds	r7, #40	; 0x28
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000168 	.word	0x20000168

0800497c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <prvProcessExpiredTimer+0x94>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe fa88 	bl	8002eaa <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d021      	beq.n	80049ec <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	699a      	ldr	r2, [r3, #24]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	18d1      	adds	r1, r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	6978      	ldr	r0, [r7, #20]
 80049b6:	f000 f8d1 	bl	8004b5c <prvInsertTimerInActiveList>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01e      	beq.n	80049fe <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	2100      	movs	r1, #0
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f7ff ff8a 	bl	80048e4 <xTimerGenericCommand>
 80049d0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d112      	bne.n	80049fe <prvProcessExpiredTimer+0x82>
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	e7fe      	b.n	80049ea <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	4798      	blx	r3
    }
 8004a06:	bf00      	nop
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000160 	.word	0x20000160

08004a14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f857 	bl	8004ad4 <prvGetNextExpireTime>
 8004a26:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f803 	bl	8004a38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004a32:	f000 f8d5 	bl	8004be0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a36:	e7f1      	b.n	8004a1c <prvTimerTask+0x8>

08004a38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004a42:	f7ff fa27 	bl	8003e94 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f866 	bl	8004b1c <prvSampleTimeNow>
 8004a50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d130      	bne.n	8004aba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <prvProcessTimerOrBlockTask+0x3c>
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d806      	bhi.n	8004a74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004a66:	f7ff fa23 	bl	8003eb0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff85 	bl	800497c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004a72:	e024      	b.n	8004abe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <prvProcessTimerOrBlockTask+0x90>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <prvProcessTimerOrBlockTask+0x50>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <prvProcessTimerOrBlockTask+0x52>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <prvProcessTimerOrBlockTask+0x94>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f7fe ff4f 	bl	800393c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004a9e:	f7ff fa07 	bl	8003eb0 <xTaskResumeAll>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <prvProcessTimerOrBlockTask+0x98>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
    }
 8004ab8:	e001      	b.n	8004abe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004aba:	f7ff f9f9 	bl	8003eb0 <xTaskResumeAll>
    }
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000164 	.word	0x20000164
 8004acc:	20000168 	.word	0x20000168
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004adc:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <prvGetNextExpireTime+0x44>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <prvGetNextExpireTime+0x16>
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	e000      	b.n	8004aec <prvGetNextExpireTime+0x18>
 8004aea:	2200      	movs	r2, #0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af8:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <prvGetNextExpireTime+0x44>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e001      	b.n	8004b08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004b08:	68fb      	ldr	r3, [r7, #12]
    }
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000160 	.word	0x20000160

08004b1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004b24:	f7ff fa64 	bl	8003ff0 <xTaskGetTickCount>
 8004b28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <prvSampleTimeNow+0x3c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d205      	bcs.n	8004b40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004b34:	f000 f918 	bl	8004d68 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004b46:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <prvSampleTimeNow+0x3c>)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
    }
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000170 	.word	0x20000170

08004b5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d812      	bhi.n	8004ba8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e01b      	b.n	8004bce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <prvInsertTimerInActiveList+0x7c>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe f949 	bl	8002e38 <vListInsert>
 8004ba6:	e012      	b.n	8004bce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d206      	bcs.n	8004bbe <prvInsertTimerInActiveList+0x62>
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e007      	b.n	8004bce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <prvInsertTimerInActiveList+0x80>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f7fe f935 	bl	8002e38 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004bce:	697b      	ldr	r3, [r7, #20]
    }
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000164 	.word	0x20000164
 8004bdc:	20000160 	.word	0x20000160

08004be0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08c      	sub	sp, #48	; 0x30
 8004be4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004be6:	e0ac      	b.n	8004d42 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f2c0 80a8 	blt.w	8004d40 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fe f952 	bl	8002eaa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff ff87 	bl	8004b1c <prvSampleTimeNow>
 8004c0e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b09      	cmp	r3, #9
 8004c14:	f200 8095 	bhi.w	8004d42 <prvProcessReceivedCommands+0x162>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <prvProcessReceivedCommands+0x40>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c49 	.word	0x08004c49
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c49 	.word	0x08004c49
 8004c2c:	08004cbb 	.word	0x08004cbb
 8004c30:	08004ccf 	.word	0x08004ccf
 8004c34:	08004d17 	.word	0x08004d17
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c49 	.word	0x08004c49
 8004c40:	08004cbb 	.word	0x08004cbb
 8004c44:	08004ccf 	.word	0x08004ccf
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	18d1      	adds	r1, r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c68:	f7ff ff78 	bl	8004b5c <prvInsertTimerInActiveList>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d067      	beq.n	8004d42 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c78:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	441a      	add	r2, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	2100      	movs	r1, #0
 8004c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c9a:	f7ff fe23 	bl	80048e4 <xTimerGenericCommand>
 8004c9e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d14d      	bne.n	8004d42 <prvProcessReceivedCommands+0x162>
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	e7fe      	b.n	8004cb8 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004ccc:	e039      	b.n	8004d42 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <prvProcessReceivedCommands+0x122>
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e7fe      	b.n	8004d00 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	18d1      	adds	r1, r2, r3
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d10:	f7ff ff24 	bl	8004b5c <prvInsertTimerInActiveList>
                        break;
 8004d14:	e015      	b.n	8004d42 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d103      	bne.n	8004d2c <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8004d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d26:	f000 fc59 	bl	80055dc <vPortFree>
 8004d2a:	e00a      	b.n	8004d42 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004d3e:	e000      	b.n	8004d42 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004d40:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <prvProcessReceivedCommands+0x184>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f107 0108 	add.w	r1, r7, #8
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fba1 	bl	8003494 <xQueueReceive>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f af47 	bne.w	8004be8 <prvProcessReceivedCommands+0x8>
        }
    }
 8004d5a:	bf00      	nop
 8004d5c:	3728      	adds	r7, #40	; 0x28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000168 	.word	0x20000168

08004d68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d6e:	e047      	b.n	8004e00 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d70:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <prvSwitchTimerLists+0xc0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7a:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <prvSwitchTimerLists+0xc0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe f88e 	bl	8002eaa <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02d      	beq.n	8004e00 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d90e      	bls.n	8004dd4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dc2:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <prvSwitchTimerLists+0xc0>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f7fe f833 	bl	8002e38 <vListInsert>
 8004dd2:	e015      	b.n	8004e00 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	2100      	movs	r1, #0
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff fd80 	bl	80048e4 <xTimerGenericCommand>
 8004de4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <prvSwitchTimerLists+0x98>
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	e7fe      	b.n	8004dfe <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <prvSwitchTimerLists+0xc0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1b2      	bne.n	8004d70 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <prvSwitchTimerLists+0xc0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <prvSwitchTimerLists+0xc4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <prvSwitchTimerLists+0xc0>)
 8004e16:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <prvSwitchTimerLists+0xc4>)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6013      	str	r3, [r2, #0]
    }
 8004e1e:	bf00      	nop
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000160 	.word	0x20000160
 8004e2c:	20000164 	.word	0x20000164

08004e30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004e34:	f000 f9d6 	bl	80051e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004e38:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <prvCheckForValidListAndQueue+0x54>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11d      	bne.n	8004e7c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e40:	4811      	ldr	r0, [pc, #68]	; (8004e88 <prvCheckForValidListAndQueue+0x58>)
 8004e42:	f7fd ffa8 	bl	8002d96 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e46:	4811      	ldr	r0, [pc, #68]	; (8004e8c <prvCheckForValidListAndQueue+0x5c>)
 8004e48:	f7fd ffa5 	bl	8002d96 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <prvCheckForValidListAndQueue+0x60>)
 8004e4e:	4a0e      	ldr	r2, [pc, #56]	; (8004e88 <prvCheckForValidListAndQueue+0x58>)
 8004e50:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004e52:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <prvCheckForValidListAndQueue+0x64>)
 8004e54:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <prvCheckForValidListAndQueue+0x5c>)
 8004e56:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004e58:	2200      	movs	r2, #0
 8004e5a:	210c      	movs	r1, #12
 8004e5c:	200a      	movs	r0, #10
 8004e5e:	f7fe f8b7 	bl	8002fd0 <xQueueGenericCreate>
 8004e62:	4602      	mov	r2, r0
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <prvCheckForValidListAndQueue+0x54>)
 8004e66:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <prvCheckForValidListAndQueue+0x54>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <prvCheckForValidListAndQueue+0x54>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4908      	ldr	r1, [pc, #32]	; (8004e98 <prvCheckForValidListAndQueue+0x68>)
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fd30 	bl	80038dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e7c:	f000 f9e0 	bl	8005240 <vPortExitCritical>
    }
 8004e80:	bf00      	nop
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000168 	.word	0x20000168
 8004e88:	20000138 	.word	0x20000138
 8004e8c:	2000014c 	.word	0x2000014c
 8004e90:	20000160 	.word	0x20000160
 8004e94:	20000164 	.word	0x20000164
 8004e98:	080072c8 	.word	0x080072c8

08004e9c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b04      	subs	r3, #4
 8004eac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004eb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3b04      	subs	r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004ecc:	4a0c      	ldr	r2, [pc, #48]	; (8004f00 <pxPortInitialiseStack+0x64>)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b14      	subs	r3, #20
 8004ed6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b04      	subs	r3, #4
 8004ee2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f06f 0202 	mvn.w	r2, #2
 8004eea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3b20      	subs	r3, #32
 8004ef0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	08004f05 	.word	0x08004f05

08004f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <prvTaskExitError+0x50>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d009      	beq.n	8004f2c <prvTaskExitError+0x28>
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e7fe      	b.n	8004f2a <prvTaskExitError+0x26>
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004f3e:	bf00      	nop
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0fc      	beq.n	8004f40 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000010 	.word	0x20000010
	...

08004f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <pxCurrentTCBConst2>)
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	6808      	ldr	r0, [r1, #0]
 8004f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6a:	f380 8809 	msr	PSP, r0
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8811 	msr	BASEPRI, r0
 8004f7a:	4770      	bx	lr
 8004f7c:	f3af 8000 	nop.w

08004f80 <pxCurrentTCBConst2>:
 8004f80:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004f88:	4808      	ldr	r0, [pc, #32]	; (8004fac <prvPortStartFirstTask+0x24>)
 8004f8a:	6800      	ldr	r0, [r0, #0]
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	f380 8808 	msr	MSP, r0
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f380 8814 	msr	CONTROL, r0
 8004f9a:	b662      	cpsie	i
 8004f9c:	b661      	cpsie	f
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	df00      	svc	0
 8004fa8:	bf00      	nop
 8004faa:	0000      	.short	0x0000
 8004fac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop

08004fb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fba:	4b44      	ldr	r3, [pc, #272]	; (80050cc <xPortStartScheduler+0x118>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a44      	ldr	r2, [pc, #272]	; (80050d0 <xPortStartScheduler+0x11c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d109      	bne.n	8004fd8 <xPortStartScheduler+0x24>
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	e7fe      	b.n	8004fd6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fd8:	4b3c      	ldr	r3, [pc, #240]	; (80050cc <xPortStartScheduler+0x118>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <xPortStartScheduler+0x120>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d109      	bne.n	8004ff6 <xPortStartScheduler+0x42>
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e7fe      	b.n	8004ff4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ff6:	4b38      	ldr	r3, [pc, #224]	; (80050d8 <xPortStartScheduler+0x124>)
 8004ff8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	22ff      	movs	r2, #255	; 0xff
 8005006:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005018:	b2da      	uxtb	r2, r3
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <xPortStartScheduler+0x128>)
 800501c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800501e:	4b30      	ldr	r3, [pc, #192]	; (80050e0 <xPortStartScheduler+0x12c>)
 8005020:	2207      	movs	r2, #7
 8005022:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005024:	e009      	b.n	800503a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <xPortStartScheduler+0x12c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3b01      	subs	r3, #1
 800502c:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <xPortStartScheduler+0x12c>)
 800502e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	b2db      	uxtb	r3, r3
 8005038:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d0ef      	beq.n	8005026 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005046:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <xPortStartScheduler+0x12c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1c3 0307 	rsb	r3, r3, #7
 800504e:	2b04      	cmp	r3, #4
 8005050:	d009      	beq.n	8005066 <xPortStartScheduler+0xb2>
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	e7fe      	b.n	8005064 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005066:	4b1e      	ldr	r3, [pc, #120]	; (80050e0 <xPortStartScheduler+0x12c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <xPortStartScheduler+0x12c>)
 800506e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005070:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <xPortStartScheduler+0x12c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <xPortStartScheduler+0x12c>)
 800507a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	b2da      	uxtb	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005084:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <xPortStartScheduler+0x130>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <xPortStartScheduler+0x130>)
 800508a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800508e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005090:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <xPortStartScheduler+0x130>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <xPortStartScheduler+0x130>)
 8005096:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800509a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800509c:	f000 f954 	bl	8005348 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <xPortStartScheduler+0x134>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80050a6:	f000 f973 	bl	8005390 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <xPortStartScheduler+0x138>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a0f      	ldr	r2, [pc, #60]	; (80050ec <xPortStartScheduler+0x138>)
 80050b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050b4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80050b6:	f7ff ff67 	bl	8004f88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80050ba:	f7ff f877 	bl	80041ac <vTaskSwitchContext>
    prvTaskExitError();
 80050be:	f7ff ff21 	bl	8004f04 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	e000ed00 	.word	0xe000ed00
 80050d0:	410fc271 	.word	0x410fc271
 80050d4:	410fc270 	.word	0x410fc270
 80050d8:	e000e400 	.word	0xe000e400
 80050dc:	20000174 	.word	0x20000174
 80050e0:	20000178 	.word	0x20000178
 80050e4:	e000ed20 	.word	0xe000ed20
 80050e8:	20000010 	.word	0x20000010
 80050ec:	e000ef34 	.word	0xe000ef34

080050f0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050f6:	4b35      	ldr	r3, [pc, #212]	; (80051cc <vInitPrioGroupValue+0xdc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a35      	ldr	r2, [pc, #212]	; (80051d0 <vInitPrioGroupValue+0xe0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d109      	bne.n	8005114 <vInitPrioGroupValue+0x24>
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e7fe      	b.n	8005112 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005114:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <vInitPrioGroupValue+0xdc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2e      	ldr	r2, [pc, #184]	; (80051d4 <vInitPrioGroupValue+0xe4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d109      	bne.n	8005132 <vInitPrioGroupValue+0x42>
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e7fe      	b.n	8005130 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005132:	4b29      	ldr	r3, [pc, #164]	; (80051d8 <vInitPrioGroupValue+0xe8>)
 8005134:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	22ff      	movs	r2, #255	; 0xff
 8005142:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005154:	b2da      	uxtb	r2, r3
 8005156:	4b21      	ldr	r3, [pc, #132]	; (80051dc <vInitPrioGroupValue+0xec>)
 8005158:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800515a:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <vInitPrioGroupValue+0xf0>)
 800515c:	2207      	movs	r2, #7
 800515e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005160:	e009      	b.n	8005176 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <vInitPrioGroupValue+0xf0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3b01      	subs	r3, #1
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <vInitPrioGroupValue+0xf0>)
 800516a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	b2db      	uxtb	r3, r3
 8005174:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d0ef      	beq.n	8005162 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005182:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <vInitPrioGroupValue+0xf0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1c3 0307 	rsb	r3, r3, #7
 800518a:	2b04      	cmp	r3, #4
 800518c:	d009      	beq.n	80051a2 <vInitPrioGroupValue+0xb2>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	e7fe      	b.n	80051a0 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <vInitPrioGroupValue+0xf0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <vInitPrioGroupValue+0xf0>)
 80051aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <vInitPrioGroupValue+0xf0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051b4:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <vInitPrioGroupValue+0xf0>)
 80051b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80051c0:	bf00      	nop
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	e000ed00 	.word	0xe000ed00
 80051d0:	410fc271 	.word	0x410fc271
 80051d4:	410fc270 	.word	0x410fc270
 80051d8:	e000e400 	.word	0xe000e400
 80051dc:	20000174 	.word	0x20000174
 80051e0:	20000178 	.word	0x20000178

080051e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <vPortEnterCritical+0x54>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <vPortEnterCritical+0x54>)
 8005204:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <vPortEnterCritical+0x54>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d10e      	bne.n	800522c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <vPortEnterCritical+0x58>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d009      	beq.n	800522c <vPortEnterCritical+0x48>
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	e7fe      	b.n	800522a <vPortEnterCritical+0x46>
    }
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	20000010 	.word	0x20000010
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <vPortExitCritical+0x4c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <vPortExitCritical+0x22>
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	e7fe      	b.n	8005260 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <vPortExitCritical+0x4c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	4a08      	ldr	r2, [pc, #32]	; (800528c <vPortExitCritical+0x4c>)
 800526a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800526c:	4b07      	ldr	r3, [pc, #28]	; (800528c <vPortExitCritical+0x4c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <vPortExitCritical+0x3e>
 8005274:	2300      	movs	r3, #0
 8005276:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000010 	.word	0x20000010

08005290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005290:	f3ef 8009 	mrs	r0, PSP
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <pxCurrentTCBConst>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f01e 0f10 	tst.w	lr, #16
 80052a0:	bf08      	it	eq
 80052a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	6010      	str	r0, [r2, #0]
 80052ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052b4:	f380 8811 	msr	BASEPRI, r0
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f7fe ff74 	bl	80041ac <vTaskSwitchContext>
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f380 8811 	msr	BASEPRI, r0
 80052cc:	bc09      	pop	{r0, r3}
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	6808      	ldr	r0, [r1, #0]
 80052d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d6:	f01e 0f10 	tst.w	lr, #16
 80052da:	bf08      	it	eq
 80052dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052e0:	f380 8809 	msr	PSP, r0
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	f3af 8000 	nop.w

080052f0 <pxCurrentTCBConst>:
 80052f0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop

080052f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
        __asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005310:	f001 fc56 	bl	8006bc0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005314:	f7fe fe8e 	bl	8004034 <xTaskIncrementTick>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d006      	beq.n	800532c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800531e:	f001 fcad 	bl	8006c7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <SysTick_Handler+0x4c>)
 8005324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e001      	b.n	8005330 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800532c:	f001 fc8a 	bl	8006c44 <SEGGER_SYSVIEW_RecordExitISR>
 8005330:	2300      	movs	r3, #0
 8005332:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <vPortSetupTimerInterrupt+0x34>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <vPortSetupTimerInterrupt+0x38>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <vPortSetupTimerInterrupt+0x3c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <vPortSetupTimerInterrupt+0x40>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	4a09      	ldr	r2, [pc, #36]	; (800538c <vPortSetupTimerInterrupt+0x44>)
 8005366:	3b01      	subs	r3, #1
 8005368:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800536a:	4b04      	ldr	r3, [pc, #16]	; (800537c <vPortSetupTimerInterrupt+0x34>)
 800536c:	2207      	movs	r2, #7
 800536e:	601a      	str	r2, [r3, #0]
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	e000e010 	.word	0xe000e010
 8005380:	e000e018 	.word	0xe000e018
 8005384:	20000008 	.word	0x20000008
 8005388:	10624dd3 	.word	0x10624dd3
 800538c:	e000e014 	.word	0xe000e014

08005390 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005390:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053a0 <vPortEnableVFP+0x10>
 8005394:	6801      	ldr	r1, [r0, #0]
 8005396:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800539a:	6001      	str	r1, [r0, #0]
 800539c:	4770      	bx	lr
 800539e:	0000      	.short	0x0000
 80053a0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80053ae:	f3ef 8305 	mrs	r3, IPSR
 80053b2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d913      	bls.n	80053e2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ba:	4a16      	ldr	r2, [pc, #88]	; (8005414 <vPortValidateInterruptPriority+0x6c>)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053c4:	4b14      	ldr	r3, [pc, #80]	; (8005418 <vPortValidateInterruptPriority+0x70>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	7afa      	ldrb	r2, [r7, #11]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d209      	bcs.n	80053e2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	e7fe      	b.n	80053e0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053e2:	4b0e      	ldr	r3, [pc, #56]	; (800541c <vPortValidateInterruptPriority+0x74>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053ea:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <vPortValidateInterruptPriority+0x78>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d909      	bls.n	8005406 <vPortValidateInterruptPriority+0x5e>
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	e7fe      	b.n	8005404 <vPortValidateInterruptPriority+0x5c>
    }
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e3f0 	.word	0xe000e3f0
 8005418:	20000174 	.word	0x20000174
 800541c:	e000ed0c 	.word	0xe000ed0c
 8005420:	20000178 	.word	0x20000178

08005424 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005430:	f7fe fd30 	bl	8003e94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005434:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <pvPortMalloc+0x1a0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800543c:	f000 f92e 	bl	800569c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005440:	4b61      	ldr	r3, [pc, #388]	; (80055c8 <pvPortMalloc+0x1a4>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	f040 80a5 	bne.w	8005598 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02c      	beq.n	80054ae <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005454:	2208      	movs	r2, #8
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	429a      	cmp	r2, r3
 800545e:	d226      	bcs.n	80054ae <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8005460:	2208      	movs	r2, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4413      	add	r3, r2
 8005466:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	2b00      	cmp	r3, #0
 8005470:	d020      	beq.n	80054b4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f023 0307 	bic.w	r3, r3, #7
 8005478:	3308      	adds	r3, #8
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d213      	bcs.n	80054a8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f023 0307 	bic.w	r3, r3, #7
 8005486:	3308      	adds	r3, #8
 8005488:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00f      	beq.n	80054b4 <pvPortMalloc+0x90>
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e7fe      	b.n	80054a6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054ac:	e002      	b.n	80054b4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	e000      	b.n	80054b6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054b4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d06d      	beq.n	8005598 <pvPortMalloc+0x174>
 80054bc:	4b43      	ldr	r3, [pc, #268]	; (80055cc <pvPortMalloc+0x1a8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d868      	bhi.n	8005598 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80054c6:	4b42      	ldr	r3, [pc, #264]	; (80055d0 <pvPortMalloc+0x1ac>)
 80054c8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <pvPortMalloc+0x1ac>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054d0:	e004      	b.n	80054dc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d903      	bls.n	80054ee <pvPortMalloc+0xca>
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f1      	bne.n	80054d2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80054ee:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <pvPortMalloc+0x1a0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d04f      	beq.n	8005598 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2208      	movs	r2, #8
 80054fe:	4413      	add	r3, r2
 8005500:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	1ad2      	subs	r2, r2, r3
 8005512:	2308      	movs	r3, #8
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	429a      	cmp	r2, r3
 8005518:	d91e      	bls.n	8005558 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800551a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4413      	add	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	2b00      	cmp	r3, #0
 800552a:	d009      	beq.n	8005540 <pvPortMalloc+0x11c>
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	e7fe      	b.n	800553e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	1ad2      	subs	r2, r2, r3
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005552:	69b8      	ldr	r0, [r7, #24]
 8005554:	f000 f904 	bl	8005760 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005558:	4b1c      	ldr	r3, [pc, #112]	; (80055cc <pvPortMalloc+0x1a8>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	4a1a      	ldr	r2, [pc, #104]	; (80055cc <pvPortMalloc+0x1a8>)
 8005564:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005566:	4b19      	ldr	r3, [pc, #100]	; (80055cc <pvPortMalloc+0x1a8>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <pvPortMalloc+0x1b0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d203      	bcs.n	800557a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <pvPortMalloc+0x1a8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <pvPortMalloc+0x1b0>)
 8005578:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <pvPortMalloc+0x1a4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	431a      	orrs	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <pvPortMalloc+0x1b4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <pvPortMalloc+0x1b4>)
 8005596:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005598:	f7fe fc8a 	bl	8003eb0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <pvPortMalloc+0x196>
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e7fe      	b.n	80055b8 <pvPortMalloc+0x194>
    return pvReturn;
 80055ba:	69fb      	ldr	r3, [r7, #28]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3728      	adds	r7, #40	; 0x28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20019184 	.word	0x20019184
 80055c8:	20019198 	.word	0x20019198
 80055cc:	20019188 	.word	0x20019188
 80055d0:	2001917c 	.word	0x2001917c
 80055d4:	2001918c 	.word	0x2001918c
 80055d8:	20019190 	.word	0x20019190

080055dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d04b      	beq.n	8005686 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80055ee:	2308      	movs	r3, #8
 80055f0:	425b      	negs	r3, r3
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4413      	add	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	4b23      	ldr	r3, [pc, #140]	; (8005690 <vPortFree+0xb4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4013      	ands	r3, r2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <vPortFree+0x42>
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e7fe      	b.n	800561c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <vPortFree+0x5e>
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	e7fe      	b.n	8005638 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	4b14      	ldr	r3, [pc, #80]	; (8005690 <vPortFree+0xb4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01e      	beq.n	8005686 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d11a      	bne.n	8005686 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <vPortFree+0xb4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	43db      	mvns	r3, r3
 800565a:	401a      	ands	r2, r3
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005660:	f7fe fc18 	bl	8003e94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <vPortFree+0xb8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4413      	add	r3, r2
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <vPortFree+0xb8>)
 8005670:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005672:	6938      	ldr	r0, [r7, #16]
 8005674:	f000 f874 	bl	8005760 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005678:	4b07      	ldr	r3, [pc, #28]	; (8005698 <vPortFree+0xbc>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	4a06      	ldr	r2, [pc, #24]	; (8005698 <vPortFree+0xbc>)
 8005680:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005682:	f7fe fc15 	bl	8003eb0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005686:	bf00      	nop
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20019198 	.word	0x20019198
 8005694:	20019188 	.word	0x20019188
 8005698:	20019194 	.word	0x20019194

0800569c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056a2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80056a6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <prvHeapInit+0xac>)
 80056aa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3307      	adds	r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	4a1f      	ldr	r2, [pc, #124]	; (8005748 <prvHeapInit+0xac>)
 80056cc:	4413      	add	r3, r2
 80056ce:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056d4:	4a1d      	ldr	r2, [pc, #116]	; (800574c <prvHeapInit+0xb0>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <prvHeapInit+0xb0>)
 80056dc:	2200      	movs	r2, #0
 80056de:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80056e8:	2208      	movs	r2, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0307 	bic.w	r3, r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a15      	ldr	r2, [pc, #84]	; (8005750 <prvHeapInit+0xb4>)
 80056fc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80056fe:	4b14      	ldr	r3, [pc, #80]	; (8005750 <prvHeapInit+0xb4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <prvHeapInit+0xb4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <prvHeapInit+0xb4>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a0a      	ldr	r2, [pc, #40]	; (8005754 <prvHeapInit+0xb8>)
 800572a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	4a09      	ldr	r2, [pc, #36]	; (8005758 <prvHeapInit+0xbc>)
 8005732:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <prvHeapInit+0xc0>)
 8005736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800573a:	601a      	str	r2, [r3, #0]
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	2000017c 	.word	0x2000017c
 800574c:	2001917c 	.word	0x2001917c
 8005750:	20019184 	.word	0x20019184
 8005754:	2001918c 	.word	0x2001918c
 8005758:	20019188 	.word	0x20019188
 800575c:	20019198 	.word	0x20019198

08005760 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005768:	4b28      	ldr	r3, [pc, #160]	; (800580c <prvInsertBlockIntoFreeList+0xac>)
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e002      	b.n	8005774 <prvInsertBlockIntoFreeList+0x14>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	429a      	cmp	r2, r3
 800577c:	d8f7      	bhi.n	800576e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4413      	add	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d108      	bne.n	80057a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d118      	bne.n	80057e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <prvInsertBlockIntoFreeList+0xb0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d00d      	beq.n	80057de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	441a      	add	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e008      	b.n	80057f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <prvInsertBlockIntoFreeList+0xb0>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e003      	b.n	80057f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d002      	beq.n	80057fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	2001917c 	.word	0x2001917c
 8005810:	20019184 	.word	0x20019184

08005814 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005818:	4803      	ldr	r0, [pc, #12]	; (8005828 <_cbSendSystemDesc+0x14>)
 800581a:	f001 f97d 	bl	8006b18 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800581e:	4803      	ldr	r0, [pc, #12]	; (800582c <_cbSendSystemDesc+0x18>)
 8005820:	f001 f97a 	bl	8006b18 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005824:	bf00      	nop
 8005826:	bd80      	pop	{r7, pc}
 8005828:	080072d0 	.word	0x080072d0
 800582c:	08007314 	.word	0x08007314

08005830 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <SEGGER_SYSVIEW_Conf+0x20>)
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <SEGGER_SYSVIEW_Conf+0x20>)
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <SEGGER_SYSVIEW_Conf+0x24>)
 800583e:	4a06      	ldr	r2, [pc, #24]	; (8005858 <SEGGER_SYSVIEW_Conf+0x28>)
 8005840:	f000 fce8 	bl	8006214 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005844:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005848:	f000 fd28 	bl	800629c <SEGGER_SYSVIEW_SetRAMBase>
}
 800584c:	bf00      	nop
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000008 	.word	0x20000008
 8005854:	08005815 	.word	0x08005815
 8005858:	080073b4 	.word	0x080073b4

0800585c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800585c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800585e:	b085      	sub	sp, #20
 8005860:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	e034      	b.n	80058d2 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005868:	491e      	ldr	r1, [pc, #120]	; (80058e4 <_cbSendTaskList+0x88>)
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	491a      	ldr	r1, [pc, #104]	; (80058e4 <_cbSendTaskList+0x88>)
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	3304      	adds	r3, #4
 8005888:	681c      	ldr	r4, [r3, #0]
 800588a:	4916      	ldr	r1, [pc, #88]	; (80058e4 <_cbSendTaskList+0x88>)
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	3308      	adds	r3, #8
 800589a:	681d      	ldr	r5, [r3, #0]
 800589c:	4911      	ldr	r1, [pc, #68]	; (80058e4 <_cbSendTaskList+0x88>)
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	330c      	adds	r3, #12
 80058ac:	681e      	ldr	r6, [r3, #0]
 80058ae:	490d      	ldr	r1, [pc, #52]	; (80058e4 <_cbSendTaskList+0x88>)
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	3310      	adds	r3, #16
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	4633      	mov	r3, r6
 80058c4:	462a      	mov	r2, r5
 80058c6:	4621      	mov	r1, r4
 80058c8:	f000 f8b4 	bl	8005a34 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3301      	adds	r3, #1
 80058d0:	607b      	str	r3, [r7, #4]
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <_cbSendTaskList+0x8c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3c5      	bcc.n	8005868 <_cbSendTaskList+0xc>
  }
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e4:	2001919c 	.word	0x2001919c
 80058e8:	2001923c 	.word	0x2001923c

080058ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80058ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80058f2:	f7fe fb8d 	bl	8004010 <xTaskGetTickCountFromISR>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f04f 0400 	mov.w	r4, #0
 80058fc:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005900:	e9d7 5600 	ldrd	r5, r6, [r7]
 8005904:	462b      	mov	r3, r5
 8005906:	4634      	mov	r4, r6
 8005908:	f04f 0100 	mov.w	r1, #0
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	0162      	lsls	r2, r4, #5
 8005912:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005916:	0159      	lsls	r1, r3, #5
 8005918:	460b      	mov	r3, r1
 800591a:	4614      	mov	r4, r2
 800591c:	1b5b      	subs	r3, r3, r5
 800591e:	eb64 0406 	sbc.w	r4, r4, r6
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	00a2      	lsls	r2, r4, #2
 800592c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005930:	0099      	lsls	r1, r3, #2
 8005932:	460b      	mov	r3, r1
 8005934:	4614      	mov	r4, r2
 8005936:	195b      	adds	r3, r3, r5
 8005938:	eb44 0406 	adc.w	r4, r4, r6
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	00e2      	lsls	r2, r4, #3
 8005946:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800594a:	00d9      	lsls	r1, r3, #3
 800594c:	460b      	mov	r3, r1
 800594e:	4614      	mov	r4, r2
 8005950:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8005954:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8005958:	4618      	mov	r0, r3
 800595a:	4621      	mov	r1, r4
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005964 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005972:	2205      	movs	r2, #5
 8005974:	492b      	ldr	r1, [pc, #172]	; (8005a24 <SYSVIEW_AddTask+0xc0>)
 8005976:	68b8      	ldr	r0, [r7, #8]
 8005978:	f001 fc4a 	bl	8007210 <memcmp>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d04b      	beq.n	8005a1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005982:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b07      	cmp	r3, #7
 8005988:	d903      	bls.n	8005992 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800598a:	4828      	ldr	r0, [pc, #160]	; (8005a2c <SYSVIEW_AddTask+0xc8>)
 800598c:	f001 fbc0 	bl	8007110 <SEGGER_SYSVIEW_Warn>
    return;
 8005990:	e044      	b.n	8005a1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005992:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4926      	ldr	r1, [pc, #152]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4921      	ldr	r1, [pc, #132]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	3304      	adds	r3, #4
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80059bc:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	491b      	ldr	r1, [pc, #108]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	3308      	adds	r3, #8
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80059d2:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4916      	ldr	r1, [pc, #88]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	330c      	adds	r3, #12
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80059e8:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4910      	ldr	r1, [pc, #64]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	3310      	adds	r3, #16
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a08      	ldr	r2, [pc, #32]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 8005a06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f80e 	bl	8005a34 <SYSVIEW_SendTaskInfo>
 8005a18:	e000      	b.n	8005a1c <SYSVIEW_AddTask+0xb8>
    return;
 8005a1a:	bf00      	nop

}
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	08007324 	.word	0x08007324
 8005a28:	2001923c 	.word	0x2001923c
 8005a2c:	0800732c 	.word	0x0800732c
 8005a30:	2001919c 	.word	0x2001919c

08005a34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005a42:	f107 0314 	add.w	r3, r7, #20
 8005a46:	2214      	movs	r2, #20
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 fbfa 	bl	8007244 <memset>
  TaskInfo.TaskID     = TaskID;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 ff5d 	bl	8006928 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005a6e:	bf00      	nop
 8005a70:	3728      	adds	r7, #40	; 0x28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <_DoInit+0x98>)
 8005a80:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2203      	movs	r2, #3
 8005a86:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <_DoInit+0x9c>)
 8005a92:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <_DoInit+0xa0>)
 8005a98:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aa0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <_DoInit+0x9c>)
 8005ab8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <_DoInit+0xa4>)
 8005abe:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2210      	movs	r2, #16
 8005ac4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3307      	adds	r3, #7
 8005adc:	4a10      	ldr	r2, [pc, #64]	; (8005b20 <_DoInit+0xa8>)
 8005ade:	6810      	ldr	r0, [r2, #0]
 8005ae0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ae2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a0e      	ldr	r2, [pc, #56]	; (8005b24 <_DoInit+0xac>)
 8005aea:	6810      	ldr	r0, [r2, #0]
 8005aec:	6018      	str	r0, [r3, #0]
 8005aee:	8891      	ldrh	r1, [r2, #4]
 8005af0:	7992      	ldrb	r2, [r2, #6]
 8005af2:	8099      	strh	r1, [r3, #4]
 8005af4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005af6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005b00:	f3bf 8f5f 	dmb	sy
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	2001a870 	.word	0x2001a870
 8005b14:	0800737c 	.word	0x0800737c
 8005b18:	20019240 	.word	0x20019240
 8005b1c:	20019640 	.word	0x20019640
 8005b20:	08007388 	.word	0x08007388
 8005b24:	0800738c 	.word	0x0800738c

08005b28 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08c      	sub	sp, #48	; 0x30
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005b34:	4b3e      	ldr	r3, [pc, #248]	; (8005c30 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b36:	623b      	str	r3, [r7, #32]
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <SEGGER_RTT_ReadNoLock+0x1e>
 8005b42:	f7ff ff99 	bl	8005a78 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	3360      	adds	r3, #96	; 0x60
 8005b52:	4a37      	ldr	r2, [pc, #220]	; (8005c30 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b54:	4413      	add	r3, r2
 8005b56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d92b      	bls.n	8005bcc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4293      	cmp	r3, r2
 8005b84:	bf28      	it	cs
 8005b86:	4613      	movcs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	4413      	add	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	6939      	ldr	r1, [r7, #16]
 8005b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b9a:	f001 fb48 	bl	800722e <memcpy>
    NumBytesRead += NumBytesRem;
 8005b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d101      	bne.n	8005bcc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bf28      	it	cs
 8005bdc:	4613      	movcs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d019      	beq.n	8005c1a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	4413      	add	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	6939      	ldr	r1, [r7, #16]
 8005bf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bf6:	f001 fb1a 	bl	800722e <memcpy>
    NumBytesRead += NumBytesRem;
 8005bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4413      	add	r3, r2
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	4413      	add	r3, r2
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c24:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3730      	adds	r7, #48	; 0x30
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	2001a870 	.word	0x2001a870

08005c34 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005c42:	4b3d      	ldr	r3, [pc, #244]	; (8005d38 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005c50:	f7ff ff12 	bl	8005a78 <_DoInit>
  SEGGER_RTT_LOCK();
 8005c54:	f3ef 8311 	mrs	r3, BASEPRI
 8005c58:	f04f 0120 	mov.w	r1, #32
 8005c5c:	f381 8811 	msr	BASEPRI, r1
 8005c60:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c62:	4b35      	ldr	r3, [pc, #212]	; (8005d38 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c64:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005c6a:	6939      	ldr	r1, [r7, #16]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	4613      	mov	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4413      	add	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	440b      	add	r3, r1
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3301      	adds	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	dbeb      	blt.n	8005c6a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005c92:	e000      	b.n	8005c96 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005c94:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	da3f      	bge.n	8005d20 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005ca0:	6939      	ldr	r1, [r7, #16]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	4413      	add	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	440b      	add	r3, r1
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005cb4:	6939      	ldr	r1, [r7, #16]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	4613      	mov	r3, r2
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005cca:	6939      	ldr	r1, [r7, #16]
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3320      	adds	r3, #32
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005cde:	6939      	ldr	r1, [r7, #16]
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	4413      	add	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	440b      	add	r3, r1
 8005cec:	3328      	adds	r3, #40	; 0x28
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005cf2:	6939      	ldr	r1, [r7, #16]
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4413      	add	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	440b      	add	r3, r1
 8005d00:	3324      	adds	r3, #36	; 0x24
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005d06:	6939      	ldr	r1, [r7, #16]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	4413      	add	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	440b      	add	r3, r1
 8005d14:	332c      	adds	r3, #44	; 0x2c
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d1a:	f3bf 8f5f 	dmb	sy
 8005d1e:	e002      	b.n	8005d26 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005d20:	f04f 33ff 	mov.w	r3, #4294967295
 8005d24:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	2001a870 	.word	0x2001a870

08005d3c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	; 0x28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005d4a:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005d58:	f7ff fe8e 	bl	8005a78 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005d5e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d82c      	bhi.n	8005dc0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005d66:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6a:	f04f 0120 	mov.w	r1, #32
 8005d6e:	f381 8811 	msr	BASEPRI, r1
 8005d72:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4613      	mov	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	3360      	adds	r3, #96	; 0x60
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00e      	beq.n	8005daa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2200      	movs	r2, #0
 8005da2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2200      	movs	r2, #0
 8005da8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005db0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dbe:	e002      	b.n	8005dc6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	; 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	2001a870 	.word	0x2001a870

08005dd4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00f      	beq.n	8005e0a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005dea:	e002      	b.n	8005df2 <_EncodeStr+0x1e>
      Len++;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	3301      	adds	r3, #1
 8005df0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f6      	bne.n	8005dec <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d901      	bls.n	8005e0a <_EncodeStr+0x36>
      Len = Limit;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2bfe      	cmp	r3, #254	; 0xfe
 8005e0e:	d806      	bhi.n	8005e1e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	60fa      	str	r2, [r7, #12]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e011      	b.n	8005e42 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	60fa      	str	r2, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	60fa      	str	r2, [r7, #12]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	0a19      	lsrs	r1, r3, #8
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	60fa      	str	r2, [r7, #12]
 8005e3e:	b2ca      	uxtb	r2, r1
 8005e40:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005e46:	e00a      	b.n	8005e5e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	1c53      	adds	r3, r2, #1
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1c59      	adds	r1, r3, #1
 8005e52:	60f9      	str	r1, [r7, #12]
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	701a      	strb	r2, [r3, #0]
    n++;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d3f0      	bcc.n	8005e48 <_EncodeStr+0x74>
  }
  return pPayload;
 8005e66:	68fb      	ldr	r3, [r7, #12]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3304      	adds	r3, #4
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e92:	4b33      	ldr	r3, [pc, #204]	; (8005f60 <_HandleIncomingPacket+0xd4>)
 8005e94:	7e1b      	ldrb	r3, [r3, #24]
 8005e96:	4618      	mov	r0, r3
 8005e98:	1cfb      	adds	r3, r7, #3
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f7ff fe43 	bl	8005b28 <SEGGER_RTT_ReadNoLock>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dd4d      	ble.n	8005f48 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d022      	beq.n	8005ef8 <_HandleIncomingPacket+0x6c>
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	dc0b      	bgt.n	8005ece <_HandleIncomingPacket+0x42>
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d015      	beq.n	8005ee6 <_HandleIncomingPacket+0x5a>
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	dc02      	bgt.n	8005ec4 <_HandleIncomingPacket+0x38>
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d00e      	beq.n	8005ee0 <_HandleIncomingPacket+0x54>
 8005ec2:	e034      	b.n	8005f2e <_HandleIncomingPacket+0xa2>
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d011      	beq.n	8005eec <_HandleIncomingPacket+0x60>
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d012      	beq.n	8005ef2 <_HandleIncomingPacket+0x66>
 8005ecc:	e02f      	b.n	8005f2e <_HandleIncomingPacket+0xa2>
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	d018      	beq.n	8005f04 <_HandleIncomingPacket+0x78>
 8005ed2:	2b07      	cmp	r3, #7
 8005ed4:	db13      	blt.n	8005efe <_HandleIncomingPacket+0x72>
 8005ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed8:	d038      	beq.n	8005f4c <_HandleIncomingPacket+0xc0>
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d015      	beq.n	8005f0a <_HandleIncomingPacket+0x7e>
 8005ede:	e026      	b.n	8005f2e <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005ee0:	f000 fba8 	bl	8006634 <SEGGER_SYSVIEW_Start>
      break;
 8005ee4:	e037      	b.n	8005f56 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ee6:	f000 fc5f 	bl	80067a8 <SEGGER_SYSVIEW_Stop>
      break;
 8005eea:	e034      	b.n	8005f56 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005eec:	f000 fe38 	bl	8006b60 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005ef0:	e031      	b.n	8005f56 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ef2:	f000 fdfd 	bl	8006af0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005ef6:	e02e      	b.n	8005f56 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005ef8:	f000 fc7c 	bl	80067f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005efc:	e02b      	b.n	8005f56 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005efe:	f001 f8c9 	bl	8007094 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005f02:	e028      	b.n	8005f56 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005f04:	f001 f8a8 	bl	8007058 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005f08:	e025      	b.n	8005f56 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f0a:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <_HandleIncomingPacket+0xd4>)
 8005f0c:	7e1b      	ldrb	r3, [r3, #24]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	1cfb      	adds	r3, r7, #3
 8005f12:	2201      	movs	r2, #1
 8005f14:	4619      	mov	r1, r3
 8005f16:	f7ff fe07 	bl	8005b28 <SEGGER_RTT_ReadNoLock>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dd15      	ble.n	8005f50 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 f816 	bl	8006f58 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005f2c:	e010      	b.n	8005f50 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	b25b      	sxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da0e      	bge.n	8005f54 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <_HandleIncomingPacket+0xd4>)
 8005f38:	7e1b      	ldrb	r3, [r3, #24]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	1cfb      	adds	r3, r7, #3
 8005f3e:	2201      	movs	r2, #1
 8005f40:	4619      	mov	r1, r3
 8005f42:	f7ff fdf1 	bl	8005b28 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005f46:	e005      	b.n	8005f54 <_HandleIncomingPacket+0xc8>
    }
  }
 8005f48:	bf00      	nop
 8005f4a:	e004      	b.n	8005f56 <_HandleIncomingPacket+0xca>
      break;
 8005f4c:	bf00      	nop
 8005f4e:	e002      	b.n	8005f56 <_HandleIncomingPacket+0xca>
      break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <_HandleIncomingPacket+0xca>
      break;
 8005f54:	bf00      	nop
}
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	2001a658 	.word	0x2001a658

08005f64 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08c      	sub	sp, #48	; 0x30
 8005f68:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	3301      	adds	r3, #1
 8005f72:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f78:	4b31      	ldr	r3, [pc, #196]	; (8006040 <_TrySendOverflowPacket+0xdc>)
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7e:	e00b      	b.n	8005f98 <_TrySendOverflowPacket+0x34>
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	1c59      	adds	r1, r3, #1
 8005f88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	09db      	lsrs	r3, r3, #7
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f9c:	d8f0      	bhi.n	8005f80 <_TrySendOverflowPacket+0x1c>
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fae:	4b25      	ldr	r3, [pc, #148]	; (8006044 <_TrySendOverflowPacket+0xe0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005fb4:	4b22      	ldr	r3, [pc, #136]	; (8006040 <_TrySendOverflowPacket+0xdc>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	e00b      	b.n	8005fe0 <_TrySendOverflowPacket+0x7c>
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	1c59      	adds	r1, r3, #1
 8005fd0:	6279      	str	r1, [r7, #36]	; 0x24
 8005fd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	09db      	lsrs	r3, r3, #7
 8005fde:	623b      	str	r3, [r7, #32]
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe4:	d8f0      	bhi.n	8005fc8 <_TrySendOverflowPacket+0x64>
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	627a      	str	r2, [r7, #36]	; 0x24
 8005fec:	6a3a      	ldr	r2, [r7, #32]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <_TrySendOverflowPacket+0xdc>)
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	1d3b      	adds	r3, r7, #4
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	461a      	mov	r2, r3
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	4619      	mov	r1, r3
 8006008:	f7fa f8e2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800600c:	4603      	mov	r3, r0
 800600e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006016:	4a0a      	ldr	r2, [pc, #40]	; (8006040 <_TrySendOverflowPacket+0xdc>)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800601c:	4b08      	ldr	r3, [pc, #32]	; (8006040 <_TrySendOverflowPacket+0xdc>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	3b01      	subs	r3, #1
 8006022:	b2da      	uxtb	r2, r3
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <_TrySendOverflowPacket+0xdc>)
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e004      	b.n	8006034 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <_TrySendOverflowPacket+0xdc>)
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	4a03      	ldr	r2, [pc, #12]	; (8006040 <_TrySendOverflowPacket+0xdc>)
 8006032:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006034:	693b      	ldr	r3, [r7, #16]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3730      	adds	r7, #48	; 0x30
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	2001a658 	.word	0x2001a658
 8006044:	e0001004 	.word	0xe0001004

08006048 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006054:	4b6c      	ldr	r3, [pc, #432]	; (8006208 <_SendPacket+0x1c0>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d010      	beq.n	800607e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800605c:	4b6a      	ldr	r3, [pc, #424]	; (8006208 <_SendPacket+0x1c0>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80a3 	beq.w	80061ac <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006066:	4b68      	ldr	r3, [pc, #416]	; (8006208 <_SendPacket+0x1c0>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d109      	bne.n	8006082 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800606e:	f7ff ff79 	bl	8005f64 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006072:	4b65      	ldr	r3, [pc, #404]	; (8006208 <_SendPacket+0x1c0>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	f040 809a 	bne.w	80061b0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800607c:	e001      	b.n	8006082 <_SendPacket+0x3a>
    goto Send;
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <_SendPacket+0x3c>
Send:
 8006082:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b1f      	cmp	r3, #31
 8006088:	d809      	bhi.n	800609e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800608a:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <_SendPacket+0x1c0>)
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	f040 808b 	bne.w	80061b4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b17      	cmp	r3, #23
 80060a2:	d807      	bhi.n	80060b4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e03d      	b.n	8006130 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b7f      	cmp	r3, #127	; 0x7f
 80060c0:	d912      	bls.n	80060e8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	09da      	lsrs	r2, r3, #7
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	3a01      	subs	r2, #1
 80060da:	60fa      	str	r2, [r7, #12]
 80060dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e006      	b.n	80060f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b7f      	cmp	r3, #127	; 0x7f
 80060fa:	d912      	bls.n	8006122 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	09da      	lsrs	r2, r3, #7
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3b01      	subs	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	3a01      	subs	r2, #1
 8006114:	60fa      	str	r2, [r7, #12]
 8006116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e006      	b.n	8006130 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3b01      	subs	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006130:	4b36      	ldr	r3, [pc, #216]	; (800620c <_SendPacket+0x1c4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <_SendPacket+0x1c0>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	623b      	str	r3, [r7, #32]
 8006148:	e00b      	b.n	8006162 <_SendPacket+0x11a>
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	6279      	str	r1, [r7, #36]	; 0x24
 8006154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	09db      	lsrs	r3, r3, #7
 8006160:	623b      	str	r3, [r7, #32]
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	2b7f      	cmp	r3, #127	; 0x7f
 8006166:	d8f0      	bhi.n	800614a <_SendPacket+0x102>
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	627a      	str	r2, [r7, #36]	; 0x24
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006178:	4b23      	ldr	r3, [pc, #140]	; (8006208 <_SendPacket+0x1c0>)
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	4618      	mov	r0, r3
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	461a      	mov	r2, r3
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	f7fa f822 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800618c:	4603      	mov	r3, r0
 800618e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006196:	4a1c      	ldr	r2, [pc, #112]	; (8006208 <_SendPacket+0x1c0>)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	60d3      	str	r3, [r2, #12]
 800619c:	e00b      	b.n	80061b6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <_SendPacket+0x1c0>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	4b18      	ldr	r3, [pc, #96]	; (8006208 <_SendPacket+0x1c0>)
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	e004      	b.n	80061b6 <_SendPacket+0x16e>
    goto SendDone;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <_SendPacket+0x16e>
      goto SendDone;
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <_SendPacket+0x16e>
      goto SendDone;
 80061b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <_SendPacket+0x1c0>)
 80061b8:	7e1b      	ldrb	r3, [r3, #24]
 80061ba:	4619      	mov	r1, r3
 80061bc:	4a14      	ldr	r2, [pc, #80]	; (8006210 <_SendPacket+0x1c8>)
 80061be:	460b      	mov	r3, r1
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	440b      	add	r3, r1
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	4413      	add	r3, r2
 80061c8:	336c      	adds	r3, #108	; 0x6c
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <_SendPacket+0x1c0>)
 80061ce:	7e1b      	ldrb	r3, [r3, #24]
 80061d0:	4618      	mov	r0, r3
 80061d2:	490f      	ldr	r1, [pc, #60]	; (8006210 <_SendPacket+0x1c8>)
 80061d4:	4603      	mov	r3, r0
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4403      	add	r3, r0
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	440b      	add	r3, r1
 80061de:	3370      	adds	r3, #112	; 0x70
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d00b      	beq.n	80061fe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <_SendPacket+0x1c0>)
 80061e8:	789b      	ldrb	r3, [r3, #2]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d107      	bne.n	80061fe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <_SendPacket+0x1c0>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80061f4:	f7ff fe4a 	bl	8005e8c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <_SendPacket+0x1c0>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80061fe:	bf00      	nop
 8006200:	3728      	adds	r7, #40	; 0x28
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	2001a658 	.word	0x2001a658
 800620c:	e0001004 	.word	0xe0001004
 8006210:	2001a870 	.word	0x2001a870

08006214 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006222:	2300      	movs	r3, #0
 8006224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006228:	4917      	ldr	r1, [pc, #92]	; (8006288 <SEGGER_SYSVIEW_Init+0x74>)
 800622a:	4818      	ldr	r0, [pc, #96]	; (800628c <SEGGER_SYSVIEW_Init+0x78>)
 800622c:	f7ff fd02 	bl	8005c34 <SEGGER_RTT_AllocUpBuffer>
 8006230:	4603      	mov	r3, r0
 8006232:	b2da      	uxtb	r2, r3
 8006234:	4b16      	ldr	r3, [pc, #88]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 8006236:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 800623a:	785a      	ldrb	r2, [r3, #1]
 800623c:	4b14      	ldr	r3, [pc, #80]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 800623e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006240:	4b13      	ldr	r3, [pc, #76]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 8006242:	7e1b      	ldrb	r3, [r3, #24]
 8006244:	4618      	mov	r0, r3
 8006246:	2300      	movs	r3, #0
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	2308      	movs	r3, #8
 800624c:	4a11      	ldr	r2, [pc, #68]	; (8006294 <SEGGER_SYSVIEW_Init+0x80>)
 800624e:	490f      	ldr	r1, [pc, #60]	; (800628c <SEGGER_SYSVIEW_Init+0x78>)
 8006250:	f7ff fd74 	bl	8005d3c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 8006256:	2200      	movs	r2, #0
 8006258:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800625a:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <SEGGER_SYSVIEW_Init+0x84>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 8006260:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006262:	4a0b      	ldr	r2, [pc, #44]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800626e:	4a08      	ldr	r2, [pc, #32]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006274:	4a06      	ldr	r2, [pc, #24]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <SEGGER_SYSVIEW_Init+0x7c>)
 800627c:	2200      	movs	r2, #0
 800627e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20019650 	.word	0x20019650
 800628c:	08007394 	.word	0x08007394
 8006290:	2001a658 	.word	0x2001a658
 8006294:	2001a650 	.word	0x2001a650
 8006298:	e0001004 	.word	0xe0001004

0800629c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6113      	str	r3, [r2, #16]
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	2001a658 	.word	0x2001a658

080062bc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062c4:	f3ef 8311 	mrs	r3, BASEPRI
 80062c8:	f04f 0120 	mov.w	r1, #32
 80062cc:	f381 8811 	msr	BASEPRI, r1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	4808      	ldr	r0, [pc, #32]	; (80062f4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80062d4:	f7ff fdce 	bl	8005e74 <_PreparePacket>
 80062d8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	68b8      	ldr	r0, [r7, #8]
 80062e0:	f7ff feb2 	bl	8006048 <_SendPacket>
  RECORD_END();
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f383 8811 	msr	BASEPRI, r3
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	2001a688 	.word	0x2001a688

080062f8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006302:	f3ef 8311 	mrs	r3, BASEPRI
 8006306:	f04f 0120 	mov.w	r1, #32
 800630a:	f381 8811 	msr	BASEPRI, r1
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	4816      	ldr	r0, [pc, #88]	; (800636c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006312:	f7ff fdaf 	bl	8005e74 <_PreparePacket>
 8006316:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	e00b      	b.n	800633e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	1c59      	adds	r1, r3, #1
 800632e:	61f9      	str	r1, [r7, #28]
 8006330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	09db      	lsrs	r3, r3, #7
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b7f      	cmp	r3, #127	; 0x7f
 8006342:	d8f0      	bhi.n	8006326 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	61fa      	str	r2, [r7, #28]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	6938      	ldr	r0, [r7, #16]
 800635a:	f7ff fe75 	bl	8006048 <_SendPacket>
  RECORD_END();
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f383 8811 	msr	BASEPRI, r3
}
 8006364:	bf00      	nop
 8006366:	3720      	adds	r7, #32
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	2001a688 	.word	0x2001a688

08006370 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b08c      	sub	sp, #48	; 0x30
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800637c:	f3ef 8311 	mrs	r3, BASEPRI
 8006380:	f04f 0120 	mov.w	r1, #32
 8006384:	f381 8811 	msr	BASEPRI, r1
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	4825      	ldr	r0, [pc, #148]	; (8006420 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800638c:	f7ff fd72 	bl	8005e74 <_PreparePacket>
 8006390:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
 800639e:	e00b      	b.n	80063b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	1c59      	adds	r1, r3, #1
 80063a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	09db      	lsrs	r3, r3, #7
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	2b7f      	cmp	r3, #127	; 0x7f
 80063bc:	d8f0      	bhi.n	80063a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	623b      	str	r3, [r7, #32]
 80063d6:	e00b      	b.n	80063f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	6279      	str	r1, [r7, #36]	; 0x24
 80063e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	09db      	lsrs	r3, r3, #7
 80063ee:	623b      	str	r3, [r7, #32]
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	2b7f      	cmp	r3, #127	; 0x7f
 80063f4:	d8f0      	bhi.n	80063d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	627a      	str	r2, [r7, #36]	; 0x24
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	6979      	ldr	r1, [r7, #20]
 800640a:	69b8      	ldr	r0, [r7, #24]
 800640c:	f7ff fe1c 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f383 8811 	msr	BASEPRI, r3
}
 8006416:	bf00      	nop
 8006418:	3730      	adds	r7, #48	; 0x30
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	2001a688 	.word	0x2001a688

08006424 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b08e      	sub	sp, #56	; 0x38
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006432:	f3ef 8311 	mrs	r3, BASEPRI
 8006436:	f04f 0120 	mov.w	r1, #32
 800643a:	f381 8811 	msr	BASEPRI, r1
 800643e:	61fb      	str	r3, [r7, #28]
 8006440:	4832      	ldr	r0, [pc, #200]	; (800650c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006442:	f7ff fd17 	bl	8005e74 <_PreparePacket>
 8006446:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	633b      	str	r3, [r7, #48]	; 0x30
 8006454:	e00b      	b.n	800646e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	b2da      	uxtb	r2, r3
 800645a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645c:	1c59      	adds	r1, r3, #1
 800645e:	6379      	str	r1, [r7, #52]	; 0x34
 8006460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	09db      	lsrs	r3, r3, #7
 800646c:	633b      	str	r3, [r7, #48]	; 0x30
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2b7f      	cmp	r3, #127	; 0x7f
 8006472:	d8f0      	bhi.n	8006456 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	637a      	str	r2, [r7, #52]	; 0x34
 800647a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006482:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
 800648c:	e00b      	b.n	80064a6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	b2da      	uxtb	r2, r3
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	1c59      	adds	r1, r3, #1
 8006496:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	09db      	lsrs	r3, r3, #7
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	2b7f      	cmp	r3, #127	; 0x7f
 80064aa:	d8f0      	bhi.n	800648e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	623b      	str	r3, [r7, #32]
 80064c4:	e00b      	b.n	80064de <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	1c59      	adds	r1, r3, #1
 80064ce:	6279      	str	r1, [r7, #36]	; 0x24
 80064d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	09db      	lsrs	r3, r3, #7
 80064dc:	623b      	str	r3, [r7, #32]
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	2b7f      	cmp	r3, #127	; 0x7f
 80064e2:	d8f0      	bhi.n	80064c6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	627a      	str	r2, [r7, #36]	; 0x24
 80064ea:	6a3a      	ldr	r2, [r7, #32]
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	6979      	ldr	r1, [r7, #20]
 80064f8:	69b8      	ldr	r0, [r7, #24]
 80064fa:	f7ff fda5 	bl	8006048 <_SendPacket>
  RECORD_END();
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	f383 8811 	msr	BASEPRI, r3
}
 8006504:	bf00      	nop
 8006506:	3738      	adds	r7, #56	; 0x38
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	2001a688 	.word	0x2001a688

08006510 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b090      	sub	sp, #64	; 0x40
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800651e:	f3ef 8311 	mrs	r3, BASEPRI
 8006522:	f04f 0120 	mov.w	r1, #32
 8006526:	f381 8811 	msr	BASEPRI, r1
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	4840      	ldr	r0, [pc, #256]	; (8006630 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800652e:	f7ff fca1 	bl	8005e74 <_PreparePacket>
 8006532:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006540:	e00b      	b.n	800655a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006548:	1c59      	adds	r1, r3, #1
 800654a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800654c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	09db      	lsrs	r3, r3, #7
 8006558:	63bb      	str	r3, [r7, #56]	; 0x38
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	2b7f      	cmp	r3, #127	; 0x7f
 800655e:	d8f0      	bhi.n	8006542 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	637b      	str	r3, [r7, #52]	; 0x34
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	633b      	str	r3, [r7, #48]	; 0x30
 8006578:	e00b      	b.n	8006592 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	b2da      	uxtb	r2, r3
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	6379      	str	r1, [r7, #52]	; 0x34
 8006584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	2b7f      	cmp	r3, #127	; 0x7f
 8006596:	d8f0      	bhi.n	800657a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	637a      	str	r2, [r7, #52]	; 0x34
 800659e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b0:	e00b      	b.n	80065ca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	09db      	lsrs	r3, r3, #7
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	2b7f      	cmp	r3, #127	; 0x7f
 80065ce:	d8f0      	bhi.n	80065b2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
 80065e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	e00b      	b.n	8006602 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	1c59      	adds	r1, r3, #1
 80065f2:	6279      	str	r1, [r7, #36]	; 0x24
 80065f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	09db      	lsrs	r3, r3, #7
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b7f      	cmp	r3, #127	; 0x7f
 8006606:	d8f0      	bhi.n	80065ea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	627a      	str	r2, [r7, #36]	; 0x24
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	6979      	ldr	r1, [r7, #20]
 800661c:	69b8      	ldr	r0, [r7, #24]
 800661e:	f7ff fd13 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	f383 8811 	msr	BASEPRI, r3
}
 8006628:	bf00      	nop
 800662a:	3740      	adds	r7, #64	; 0x40
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	2001a688 	.word	0x2001a688

08006634 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800663a:	4b58      	ldr	r3, [pc, #352]	; (800679c <SEGGER_SYSVIEW_Start+0x168>)
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006640:	f3ef 8311 	mrs	r3, BASEPRI
 8006644:	f04f 0120 	mov.w	r1, #32
 8006648:	f381 8811 	msr	BASEPRI, r1
 800664c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800664e:	4b53      	ldr	r3, [pc, #332]	; (800679c <SEGGER_SYSVIEW_Start+0x168>)
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	220a      	movs	r2, #10
 8006654:	4952      	ldr	r1, [pc, #328]	; (80067a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006656:	4618      	mov	r0, r3
 8006658:	f7f9 fdba 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006662:	200a      	movs	r0, #10
 8006664:	f7ff fe2a 	bl	80062bc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006668:	f3ef 8311 	mrs	r3, BASEPRI
 800666c:	f04f 0120 	mov.w	r1, #32
 8006670:	f381 8811 	msr	BASEPRI, r1
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	484b      	ldr	r0, [pc, #300]	; (80067a4 <SEGGER_SYSVIEW_Start+0x170>)
 8006678:	f7ff fbfc 	bl	8005e74 <_PreparePacket>
 800667c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006686:	4b45      	ldr	r3, [pc, #276]	; (800679c <SEGGER_SYSVIEW_Start+0x168>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28
 800668c:	e00b      	b.n	80066a6 <SEGGER_SYSVIEW_Start+0x72>
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	b2da      	uxtb	r2, r3
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	1c59      	adds	r1, r3, #1
 8006696:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	09db      	lsrs	r3, r3, #7
 80066a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	2b7f      	cmp	r3, #127	; 0x7f
 80066aa:	d8f0      	bhi.n	800668e <SEGGER_SYSVIEW_Start+0x5a>
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
 80066c0:	4b36      	ldr	r3, [pc, #216]	; (800679c <SEGGER_SYSVIEW_Start+0x168>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	e00b      	b.n	80066e0 <SEGGER_SYSVIEW_Start+0xac>
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1c59      	adds	r1, r3, #1
 80066d0:	6279      	str	r1, [r7, #36]	; 0x24
 80066d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	09db      	lsrs	r3, r3, #7
 80066de:	623b      	str	r3, [r7, #32]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2b7f      	cmp	r3, #127	; 0x7f
 80066e4:	d8f0      	bhi.n	80066c8 <SEGGER_SYSVIEW_Start+0x94>
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	627a      	str	r2, [r7, #36]	; 0x24
 80066ec:	6a3a      	ldr	r2, [r7, #32]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	4b28      	ldr	r3, [pc, #160]	; (800679c <SEGGER_SYSVIEW_Start+0x168>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	e00b      	b.n	800671a <SEGGER_SYSVIEW_Start+0xe6>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	b2da      	uxtb	r2, r3
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	1c59      	adds	r1, r3, #1
 800670a:	61f9      	str	r1, [r7, #28]
 800670c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	09db      	lsrs	r3, r3, #7
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b7f      	cmp	r3, #127	; 0x7f
 800671e:	d8f0      	bhi.n	8006702 <SEGGER_SYSVIEW_Start+0xce>
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	61fa      	str	r2, [r7, #28]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	2300      	movs	r3, #0
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	e00b      	b.n	8006752 <SEGGER_SYSVIEW_Start+0x11e>
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	b2da      	uxtb	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	1c59      	adds	r1, r3, #1
 8006742:	6179      	str	r1, [r7, #20]
 8006744:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	09db      	lsrs	r3, r3, #7
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b7f      	cmp	r3, #127	; 0x7f
 8006756:	d8f0      	bhi.n	800673a <SEGGER_SYSVIEW_Start+0x106>
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	617a      	str	r2, [r7, #20]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006768:	2218      	movs	r2, #24
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fc6b 	bl	8006048 <_SendPacket>
      RECORD_END();
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006778:	4b08      	ldr	r3, [pc, #32]	; (800679c <SEGGER_SYSVIEW_Start+0x168>)
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <SEGGER_SYSVIEW_Start+0x168>)
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006786:	f000 f9eb 	bl	8006b60 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800678a:	f000 f9b1 	bl	8006af0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800678e:	f000 fc81 	bl	8007094 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006792:	bf00      	nop
 8006794:	3730      	adds	r7, #48	; 0x30
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	2001a658 	.word	0x2001a658
 80067a0:	080073bc 	.word	0x080073bc
 80067a4:	2001a688 	.word	0x2001a688

080067a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067ae:	f3ef 8311 	mrs	r3, BASEPRI
 80067b2:	f04f 0120 	mov.w	r1, #32
 80067b6:	f381 8811 	msr	BASEPRI, r1
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	480b      	ldr	r0, [pc, #44]	; (80067ec <SEGGER_SYSVIEW_Stop+0x44>)
 80067be:	f7ff fb59 	bl	8005e74 <_PreparePacket>
 80067c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80067c4:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80067cc:	220b      	movs	r2, #11
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6838      	ldr	r0, [r7, #0]
 80067d2:	f7ff fc39 	bl	8006048 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f383 8811 	msr	BASEPRI, r3
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	2001a688 	.word	0x2001a688
 80067f0:	2001a658 	.word	0x2001a658

080067f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08c      	sub	sp, #48	; 0x30
 80067f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067fa:	f3ef 8311 	mrs	r3, BASEPRI
 80067fe:	f04f 0120 	mov.w	r1, #32
 8006802:	f381 8811 	msr	BASEPRI, r1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	4845      	ldr	r0, [pc, #276]	; (8006920 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800680a:	f7ff fb33 	bl	8005e74 <_PreparePacket>
 800680e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006818:	4b42      	ldr	r3, [pc, #264]	; (8006924 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28
 800681e:	e00b      	b.n	8006838 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	b2da      	uxtb	r2, r3
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	1c59      	adds	r1, r3, #1
 8006828:	62f9      	str	r1, [r7, #44]	; 0x2c
 800682a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	09db      	lsrs	r3, r3, #7
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2b7f      	cmp	r3, #127	; 0x7f
 800683c:	d8f0      	bhi.n	8006820 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
 8006852:	4b34      	ldr	r3, [pc, #208]	; (8006924 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	e00b      	b.n	8006872 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	b2da      	uxtb	r2, r3
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	1c59      	adds	r1, r3, #1
 8006862:	6279      	str	r1, [r7, #36]	; 0x24
 8006864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	09db      	lsrs	r3, r3, #7
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	2b7f      	cmp	r3, #127	; 0x7f
 8006876:	d8f0      	bhi.n	800685a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	627a      	str	r2, [r7, #36]	; 0x24
 800687e:	6a3a      	ldr	r2, [r7, #32]
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e00b      	b.n	80068ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	1c59      	adds	r1, r3, #1
 800689c:	61f9      	str	r1, [r7, #28]
 800689e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	09db      	lsrs	r3, r3, #7
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	2b7f      	cmp	r3, #127	; 0x7f
 80068b0:	d8f0      	bhi.n	8006894 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	61fa      	str	r2, [r7, #28]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	e00b      	b.n	80068e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	1c59      	adds	r1, r3, #1
 80068d4:	6179      	str	r1, [r7, #20]
 80068d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	09db      	lsrs	r3, r3, #7
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	2b7f      	cmp	r3, #127	; 0x7f
 80068e8:	d8f0      	bhi.n	80068cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	617a      	str	r2, [r7, #20]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80068fa:	2218      	movs	r2, #24
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	68b8      	ldr	r0, [r7, #8]
 8006900:	f7ff fba2 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006912:	4b04      	ldr	r3, [pc, #16]	; (8006924 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	4798      	blx	r3
  }
}
 8006918:	bf00      	nop
 800691a:	3730      	adds	r7, #48	; 0x30
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	2001a688 	.word	0x2001a688
 8006924:	2001a658 	.word	0x2001a658

08006928 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b092      	sub	sp, #72	; 0x48
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006930:	f3ef 8311 	mrs	r3, BASEPRI
 8006934:	f04f 0120 	mov.w	r1, #32
 8006938:	f381 8811 	msr	BASEPRI, r1
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	486a      	ldr	r0, [pc, #424]	; (8006ae8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006940:	f7ff fa98 	bl	8005e74 <_PreparePacket>
 8006944:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	647b      	str	r3, [r7, #68]	; 0x44
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b66      	ldr	r3, [pc, #408]	; (8006aec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	643b      	str	r3, [r7, #64]	; 0x40
 800695a:	e00b      	b.n	8006974 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800695c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695e:	b2da      	uxtb	r2, r3
 8006960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006962:	1c59      	adds	r1, r3, #1
 8006964:	6479      	str	r1, [r7, #68]	; 0x44
 8006966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006970:	09db      	lsrs	r3, r3, #7
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
 8006974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006976:	2b7f      	cmp	r3, #127	; 0x7f
 8006978:	d8f0      	bhi.n	800695c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800697a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	647a      	str	r2, [r7, #68]	; 0x44
 8006980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006988:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	63bb      	str	r3, [r7, #56]	; 0x38
 8006994:	e00b      	b.n	80069ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	b2da      	uxtb	r2, r3
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	1c59      	adds	r1, r3, #1
 800699e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80069a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	09db      	lsrs	r3, r3, #7
 80069ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	2b7f      	cmp	r3, #127	; 0x7f
 80069b2:	d8f0      	bhi.n	8006996 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	4619      	mov	r1, r3
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fa01 	bl	8005dd4 <_EncodeStr>
 80069d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80069d4:	2209      	movs	r2, #9
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	6938      	ldr	r0, [r7, #16]
 80069da:	f7ff fb35 	bl	8006048 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4b40      	ldr	r3, [pc, #256]	; (8006aec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30
 80069f2:	e00b      	b.n	8006a0c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	1c59      	adds	r1, r3, #1
 80069fc:	6379      	str	r1, [r7, #52]	; 0x34
 80069fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	09db      	lsrs	r3, r3, #7
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a10:	d8f0      	bhi.n	80069f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	637a      	str	r2, [r7, #52]	; 0x34
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a2c:	e00b      	b.n	8006a46 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	1c59      	adds	r1, r3, #1
 8006a36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	09db      	lsrs	r3, r3, #7
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	2b7f      	cmp	r3, #127	; 0x7f
 8006a4a:	d8f0      	bhi.n	8006a2e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	623b      	str	r3, [r7, #32]
 8006a66:	e00b      	b.n	8006a80 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	6279      	str	r1, [r7, #36]	; 0x24
 8006a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	09db      	lsrs	r3, r3, #7
 8006a7e:	623b      	str	r3, [r7, #32]
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	2b7f      	cmp	r3, #127	; 0x7f
 8006a84:	d8f0      	bhi.n	8006a68 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a8c:	6a3a      	ldr	r2, [r7, #32]
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e00b      	b.n	8006ab8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	1c59      	adds	r1, r3, #1
 8006aa8:	61f9      	str	r1, [r7, #28]
 8006aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	09db      	lsrs	r3, r3, #7
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b7f      	cmp	r3, #127	; 0x7f
 8006abc:	d8f0      	bhi.n	8006aa0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	61fa      	str	r2, [r7, #28]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006ace:	2215      	movs	r2, #21
 8006ad0:	68f9      	ldr	r1, [r7, #12]
 8006ad2:	6938      	ldr	r0, [r7, #16]
 8006ad4:	f7ff fab8 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f383 8811 	msr	BASEPRI, r3
}
 8006ade:	bf00      	nop
 8006ae0:	3748      	adds	r7, #72	; 0x48
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	2001a688 	.word	0x2001a688
 8006aec:	2001a658 	.word	0x2001a658

08006af0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006af4:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d008      	beq.n	8006b0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4798      	blx	r3
  }
}
 8006b0e:	bf00      	nop
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	2001a658 	.word	0x2001a658

08006b18 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b20:	f3ef 8311 	mrs	r3, BASEPRI
 8006b24:	f04f 0120 	mov.w	r1, #32
 8006b28:	f381 8811 	msr	BASEPRI, r1
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	480b      	ldr	r0, [pc, #44]	; (8006b5c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006b30:	f7ff f9a0 	bl	8005e74 <_PreparePacket>
 8006b34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	6938      	ldr	r0, [r7, #16]
 8006b3c:	f7ff f94a 	bl	8005dd4 <_EncodeStr>
 8006b40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006b42:	220e      	movs	r2, #14
 8006b44:	68f9      	ldr	r1, [r7, #12]
 8006b46:	6938      	ldr	r0, [r7, #16]
 8006b48:	f7ff fa7e 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f383 8811 	msr	BASEPRI, r3
}
 8006b52:	bf00      	nop
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	2001a688 	.word	0x2001a688

08006b60 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006b66:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d019      	beq.n	8006ba2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d014      	beq.n	8006ba2 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006b78:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4798      	blx	r3
 8006b80:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b84:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006b86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b8a:	f04f 0300 	mov.w	r3, #0
 8006b8e:	f04f 0400 	mov.w	r4, #0
 8006b92:	0013      	movs	r3, r2
 8006b94:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b96:	461a      	mov	r2, r3
 8006b98:	4601      	mov	r1, r0
 8006b9a:	200d      	movs	r0, #13
 8006b9c:	f7ff fbe8 	bl	8006370 <SEGGER_SYSVIEW_RecordU32x2>
 8006ba0:	e005      	b.n	8006bae <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006ba2:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	200c      	movs	r0, #12
 8006baa:	f7ff fba5 	bl	80062f8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd90      	pop	{r4, r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	2001a658 	.word	0x2001a658
 8006bbc:	e0001004 	.word	0xe0001004

08006bc0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bca:	f04f 0120 	mov.w	r1, #32
 8006bce:	f381 8811 	msr	BASEPRI, r1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	4819      	ldr	r0, [pc, #100]	; (8006c3c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006bd6:	f7ff f94d 	bl	8005e74 <_PreparePacket>
 8006bda:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006be0:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	e00b      	b.n	8006c0c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	6179      	str	r1, [r7, #20]
 8006bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	09db      	lsrs	r3, r3, #7
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c10:	d8f0      	bhi.n	8006bf4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	617a      	str	r2, [r7, #20]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c22:	2202      	movs	r2, #2
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	68b8      	ldr	r0, [r7, #8]
 8006c28:	f7ff fa0e 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f383 8811 	msr	BASEPRI, r3
}
 8006c32:	bf00      	nop
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2001a688 	.word	0x2001a688
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4e:	f04f 0120 	mov.w	r1, #32
 8006c52:	f381 8811 	msr	BASEPRI, r1
 8006c56:	607b      	str	r3, [r7, #4]
 8006c58:	4807      	ldr	r0, [pc, #28]	; (8006c78 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006c5a:	f7ff f90b 	bl	8005e74 <_PreparePacket>
 8006c5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006c60:	2203      	movs	r2, #3
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6838      	ldr	r0, [r7, #0]
 8006c66:	f7ff f9ef 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f383 8811 	msr	BASEPRI, r3
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	2001a688 	.word	0x2001a688

08006c7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c82:	f3ef 8311 	mrs	r3, BASEPRI
 8006c86:	f04f 0120 	mov.w	r1, #32
 8006c8a:	f381 8811 	msr	BASEPRI, r1
 8006c8e:	607b      	str	r3, [r7, #4]
 8006c90:	4807      	ldr	r0, [pc, #28]	; (8006cb0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006c92:	f7ff f8ef 	bl	8005e74 <_PreparePacket>
 8006c96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c98:	2212      	movs	r2, #18
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6838      	ldr	r0, [r7, #0]
 8006c9e:	f7ff f9d3 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f383 8811 	msr	BASEPRI, r3
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	2001a688 	.word	0x2001a688

08006cb4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cba:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbe:	f04f 0120 	mov.w	r1, #32
 8006cc2:	f381 8811 	msr	BASEPRI, r1
 8006cc6:	607b      	str	r3, [r7, #4]
 8006cc8:	4807      	ldr	r0, [pc, #28]	; (8006ce8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006cca:	f7ff f8d3 	bl	8005e74 <_PreparePacket>
 8006cce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006cd0:	2211      	movs	r2, #17
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6838      	ldr	r0, [r7, #0]
 8006cd6:	f7ff f9b7 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f383 8811 	msr	BASEPRI, r3
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	2001a688 	.word	0x2001a688

08006cec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf8:	f04f 0120 	mov.w	r1, #32
 8006cfc:	f381 8811 	msr	BASEPRI, r1
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	4819      	ldr	r0, [pc, #100]	; (8006d68 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006d04:	f7ff f8b6 	bl	8005e74 <_PreparePacket>
 8006d08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d0e:	4b17      	ldr	r3, [pc, #92]	; (8006d6c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e00b      	b.n	8006d3a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	1c59      	adds	r1, r3, #1
 8006d2a:	61f9      	str	r1, [r7, #28]
 8006d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	09db      	lsrs	r3, r3, #7
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3e:	d8f0      	bhi.n	8006d22 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	61fa      	str	r2, [r7, #28]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006d50:	2208      	movs	r2, #8
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	6938      	ldr	r0, [r7, #16]
 8006d56:	f7ff f977 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f383 8811 	msr	BASEPRI, r3
}
 8006d60:	bf00      	nop
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	2001a688 	.word	0x2001a688
 8006d6c:	2001a658 	.word	0x2001a658

08006d70 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d78:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7c:	f04f 0120 	mov.w	r1, #32
 8006d80:	f381 8811 	msr	BASEPRI, r1
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	4819      	ldr	r0, [pc, #100]	; (8006dec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006d88:	f7ff f874 	bl	8005e74 <_PreparePacket>
 8006d8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d92:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	e00b      	b.n	8006dbe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	1c59      	adds	r1, r3, #1
 8006dae:	61f9      	str	r1, [r7, #28]
 8006db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	09db      	lsrs	r3, r3, #7
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc2:	d8f0      	bhi.n	8006da6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	61fa      	str	r2, [r7, #28]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	6938      	ldr	r0, [r7, #16]
 8006dda:	f7ff f935 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f383 8811 	msr	BASEPRI, r3
}
 8006de4:	bf00      	nop
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	2001a688 	.word	0x2001a688
 8006df0:	2001a658 	.word	0x2001a658

08006df4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8006e00:	f04f 0120 	mov.w	r1, #32
 8006e04:	f381 8811 	msr	BASEPRI, r1
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	4819      	ldr	r0, [pc, #100]	; (8006e70 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006e0c:	f7ff f832 	bl	8005e74 <_PreparePacket>
 8006e10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e16:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	e00b      	b.n	8006e42 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	1c59      	adds	r1, r3, #1
 8006e32:	61f9      	str	r1, [r7, #28]
 8006e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	09db      	lsrs	r3, r3, #7
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b7f      	cmp	r3, #127	; 0x7f
 8006e46:	d8f0      	bhi.n	8006e2a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	61fa      	str	r2, [r7, #28]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006e58:	2206      	movs	r2, #6
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	6938      	ldr	r0, [r7, #16]
 8006e5e:	f7ff f8f3 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f383 8811 	msr	BASEPRI, r3
}
 8006e68:	bf00      	nop
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	2001a688 	.word	0x2001a688
 8006e74:	2001a658 	.word	0x2001a658

08006e78 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e82:	f3ef 8311 	mrs	r3, BASEPRI
 8006e86:	f04f 0120 	mov.w	r1, #32
 8006e8a:	f381 8811 	msr	BASEPRI, r1
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	4827      	ldr	r0, [pc, #156]	; (8006f30 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006e92:	f7fe ffef 	bl	8005e74 <_PreparePacket>
 8006e96:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e9c:	4b25      	ldr	r3, [pc, #148]	; (8006f34 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	623b      	str	r3, [r7, #32]
 8006eae:	e00b      	b.n	8006ec8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	1c59      	adds	r1, r3, #1
 8006eb8:	6279      	str	r1, [r7, #36]	; 0x24
 8006eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	09db      	lsrs	r3, r3, #7
 8006ec6:	623b      	str	r3, [r7, #32]
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	2b7f      	cmp	r3, #127	; 0x7f
 8006ecc:	d8f0      	bhi.n	8006eb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ed4:	6a3a      	ldr	r2, [r7, #32]
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	e00b      	b.n	8006f00 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	1c59      	adds	r1, r3, #1
 8006ef0:	61f9      	str	r1, [r7, #28]
 8006ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	09db      	lsrs	r3, r3, #7
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b7f      	cmp	r3, #127	; 0x7f
 8006f04:	d8f0      	bhi.n	8006ee8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	61fa      	str	r2, [r7, #28]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006f16:	2207      	movs	r2, #7
 8006f18:	68f9      	ldr	r1, [r7, #12]
 8006f1a:	6938      	ldr	r0, [r7, #16]
 8006f1c:	f7ff f894 	bl	8006048 <_SendPacket>
  RECORD_END();
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f383 8811 	msr	BASEPRI, r3
}
 8006f26:	bf00      	nop
 8006f28:	3728      	adds	r7, #40	; 0x28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	2001a688 	.word	0x2001a688
 8006f34:	2001a658 	.word	0x2001a658

08006f38 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006f40:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	1ad3      	subs	r3, r2, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	2001a658 	.word	0x2001a658

08006f58 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	; 0x30
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006f62:	4b3b      	ldr	r3, [pc, #236]	; (8007050 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d06d      	beq.n	8007046 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006f6a:	4b39      	ldr	r3, [pc, #228]	; (8007050 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006f70:	2300      	movs	r3, #0
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f74:	e008      	b.n	8006f88 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	3301      	adds	r3, #1
 8006f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d3f2      	bcc.n	8006f76 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006f90:	e000      	b.n	8006f94 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006f92:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d055      	beq.n	8007046 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f9e:	f04f 0120 	mov.w	r1, #32
 8006fa2:	f381 8811 	msr	BASEPRI, r1
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	482a      	ldr	r0, [pc, #168]	; (8007054 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006faa:	f7fe ff63 	bl	8005e74 <_PreparePacket>
 8006fae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	623b      	str	r3, [r7, #32]
 8006fbc:	e00b      	b.n	8006fd6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	1c59      	adds	r1, r3, #1
 8006fc6:	6279      	str	r1, [r7, #36]	; 0x24
 8006fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	09db      	lsrs	r3, r3, #7
 8006fd4:	623b      	str	r3, [r7, #32]
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8006fda:	d8f0      	bhi.n	8006fbe <SEGGER_SYSVIEW_SendModule+0x66>
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	627a      	str	r2, [r7, #36]	; 0x24
 8006fe2:	6a3a      	ldr	r2, [r7, #32]
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	e00b      	b.n	8007010 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	1c59      	adds	r1, r3, #1
 8007000:	61f9      	str	r1, [r7, #28]
 8007002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	09db      	lsrs	r3, r3, #7
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b7f      	cmp	r3, #127	; 0x7f
 8007014:	d8f0      	bhi.n	8006ff8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	61fa      	str	r2, [r7, #28]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	4619      	mov	r1, r3
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f7fe fed0 	bl	8005dd4 <_EncodeStr>
 8007034:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007036:	2216      	movs	r2, #22
 8007038:	68f9      	ldr	r1, [r7, #12]
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f7ff f804 	bl	8006048 <_SendPacket>
      RECORD_END();
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007046:	bf00      	nop
 8007048:	3730      	adds	r7, #48	; 0x30
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	2001a680 	.word	0x2001a680
 8007054:	2001a688 	.word	0x2001a688

08007058 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800705e:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00f      	beq.n	8007086 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007066:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1f2      	bne.n	800706c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	2001a680 	.word	0x2001a680

08007094 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800709a:	f3ef 8311 	mrs	r3, BASEPRI
 800709e:	f04f 0120 	mov.w	r1, #32
 80070a2:	f381 8811 	msr	BASEPRI, r1
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	4817      	ldr	r0, [pc, #92]	; (8007108 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80070aa:	f7fe fee3 	bl	8005e74 <_PreparePacket>
 80070ae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	4b14      	ldr	r3, [pc, #80]	; (800710c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	e00b      	b.n	80070d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	1c59      	adds	r1, r3, #1
 80070c8:	6179      	str	r1, [r7, #20]
 80070ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	09db      	lsrs	r3, r3, #7
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2b7f      	cmp	r3, #127	; 0x7f
 80070dc:	d8f0      	bhi.n	80070c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	617a      	str	r2, [r7, #20]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80070ee:	221b      	movs	r2, #27
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	68b8      	ldr	r0, [r7, #8]
 80070f4:	f7fe ffa8 	bl	8006048 <_SendPacket>
  RECORD_END();
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f383 8811 	msr	BASEPRI, r3
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	2001a688 	.word	0x2001a688
 800710c:	2001a684 	.word	0x2001a684

08007110 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	; 0x28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007118:	f3ef 8311 	mrs	r3, BASEPRI
 800711c:	f04f 0120 	mov.w	r1, #32
 8007120:	f381 8811 	msr	BASEPRI, r1
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	4827      	ldr	r0, [pc, #156]	; (80071c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007128:	f7fe fea4 	bl	8005e74 <_PreparePacket>
 800712c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800712e:	2280      	movs	r2, #128	; 0x80
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	6938      	ldr	r0, [r7, #16]
 8007134:	f7fe fe4e 	bl	8005dd4 <_EncodeStr>
 8007138:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
 800713e:	2301      	movs	r3, #1
 8007140:	623b      	str	r3, [r7, #32]
 8007142:	e00b      	b.n	800715c <SEGGER_SYSVIEW_Warn+0x4c>
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	1c59      	adds	r1, r3, #1
 800714c:	6279      	str	r1, [r7, #36]	; 0x24
 800714e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	09db      	lsrs	r3, r3, #7
 800715a:	623b      	str	r3, [r7, #32]
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	2b7f      	cmp	r3, #127	; 0x7f
 8007160:	d8f0      	bhi.n	8007144 <SEGGER_SYSVIEW_Warn+0x34>
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	627a      	str	r2, [r7, #36]	; 0x24
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	2300      	movs	r3, #0
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	e00b      	b.n	8007194 <SEGGER_SYSVIEW_Warn+0x84>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	1c59      	adds	r1, r3, #1
 8007184:	61f9      	str	r1, [r7, #28]
 8007186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	09db      	lsrs	r3, r3, #7
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b7f      	cmp	r3, #127	; 0x7f
 8007198:	d8f0      	bhi.n	800717c <SEGGER_SYSVIEW_Warn+0x6c>
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	61fa      	str	r2, [r7, #28]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80071aa:	221a      	movs	r2, #26
 80071ac:	68f9      	ldr	r1, [r7, #12]
 80071ae:	6938      	ldr	r0, [r7, #16]
 80071b0:	f7fe ff4a 	bl	8006048 <_SendPacket>
  RECORD_END();
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f383 8811 	msr	BASEPRI, r3
}
 80071ba:	bf00      	nop
 80071bc:	3728      	adds	r7, #40	; 0x28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	2001a688 	.word	0x2001a688

080071c8 <__libc_init_array>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	4e0d      	ldr	r6, [pc, #52]	; (8007200 <__libc_init_array+0x38>)
 80071cc:	4c0d      	ldr	r4, [pc, #52]	; (8007204 <__libc_init_array+0x3c>)
 80071ce:	1ba4      	subs	r4, r4, r6
 80071d0:	10a4      	asrs	r4, r4, #2
 80071d2:	2500      	movs	r5, #0
 80071d4:	42a5      	cmp	r5, r4
 80071d6:	d109      	bne.n	80071ec <__libc_init_array+0x24>
 80071d8:	4e0b      	ldr	r6, [pc, #44]	; (8007208 <__libc_init_array+0x40>)
 80071da:	4c0c      	ldr	r4, [pc, #48]	; (800720c <__libc_init_array+0x44>)
 80071dc:	f000 f83a 	bl	8007254 <_init>
 80071e0:	1ba4      	subs	r4, r4, r6
 80071e2:	10a4      	asrs	r4, r4, #2
 80071e4:	2500      	movs	r5, #0
 80071e6:	42a5      	cmp	r5, r4
 80071e8:	d105      	bne.n	80071f6 <__libc_init_array+0x2e>
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071f0:	4798      	blx	r3
 80071f2:	3501      	adds	r5, #1
 80071f4:	e7ee      	b.n	80071d4 <__libc_init_array+0xc>
 80071f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071fa:	4798      	blx	r3
 80071fc:	3501      	adds	r5, #1
 80071fe:	e7f2      	b.n	80071e6 <__libc_init_array+0x1e>
 8007200:	080073d0 	.word	0x080073d0
 8007204:	080073d0 	.word	0x080073d0
 8007208:	080073d0 	.word	0x080073d0
 800720c:	080073d4 	.word	0x080073d4

08007210 <memcmp>:
 8007210:	b530      	push	{r4, r5, lr}
 8007212:	2400      	movs	r4, #0
 8007214:	42a2      	cmp	r2, r4
 8007216:	d101      	bne.n	800721c <memcmp+0xc>
 8007218:	2000      	movs	r0, #0
 800721a:	e007      	b.n	800722c <memcmp+0x1c>
 800721c:	5d03      	ldrb	r3, [r0, r4]
 800721e:	3401      	adds	r4, #1
 8007220:	190d      	adds	r5, r1, r4
 8007222:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8007226:	42ab      	cmp	r3, r5
 8007228:	d0f4      	beq.n	8007214 <memcmp+0x4>
 800722a:	1b58      	subs	r0, r3, r5
 800722c:	bd30      	pop	{r4, r5, pc}

0800722e <memcpy>:
 800722e:	b510      	push	{r4, lr}
 8007230:	1e43      	subs	r3, r0, #1
 8007232:	440a      	add	r2, r1
 8007234:	4291      	cmp	r1, r2
 8007236:	d100      	bne.n	800723a <memcpy+0xc>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800723e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007242:	e7f7      	b.n	8007234 <memcpy+0x6>

08007244 <memset>:
 8007244:	4402      	add	r2, r0
 8007246:	4603      	mov	r3, r0
 8007248:	4293      	cmp	r3, r2
 800724a:	d100      	bne.n	800724e <memset+0xa>
 800724c:	4770      	bx	lr
 800724e:	f803 1b01 	strb.w	r1, [r3], #1
 8007252:	e7f9      	b.n	8007248 <memset+0x4>

08007254 <_init>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr

08007260 <_fini>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr
