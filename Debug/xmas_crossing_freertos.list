
xmas_crossing_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000628c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006568  08006568  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006570  08006570  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014484  20000014  0800658c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014498  0800658c  00024498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017726  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000302b  00000000  00000000  0003776a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001300  00000000  00000000  0003a798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003ba98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023090  00000000  00000000  0003cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011806  00000000  00000000  0005fc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d61d6  00000000  00000000  00071486  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014765c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e50  00000000  00000000  001476d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006404 	.word	0x08006404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006404 	.word	0x08006404

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200143f0 	.word	0x200143f0

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b972 	b.w	8000560 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14b      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	d967      	bls.n	8000378 <__udivmoddi4+0xe4>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0720 	rsb	r7, r2, #32
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ba:	4095      	lsls	r5, r2
 80002bc:	ea47 0803 	orr.w	r8, r7, r3
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002cc:	fa1f fc85 	uxth.w	ip, r5
 80002d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d8:	fb07 f10c 	mul.w	r1, r7, ip
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18eb      	adds	r3, r5, r3
 80002e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e6:	f080 811b 	bcs.w	8000520 <__udivmoddi4+0x28c>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8118 	bls.w	8000520 <__udivmoddi4+0x28c>
 80002f0:	3f02      	subs	r7, #2
 80002f2:	442b      	add	r3, r5
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fc0c 	mul.w	ip, r0, ip
 8000308:	45a4      	cmp	ip, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8107 	bcs.w	8000524 <__udivmoddi4+0x290>
 8000316:	45a4      	cmp	ip, r4
 8000318:	f240 8104 	bls.w	8000524 <__udivmoddi4+0x290>
 800031c:	3802      	subs	r0, #2
 800031e:	442c      	add	r4, r5
 8000320:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000324:	eba4 040c 	sub.w	r4, r4, ip
 8000328:	2700      	movs	r7, #0
 800032a:	b11e      	cbz	r6, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c6 4300 	strd	r4, r3, [r6]
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0xbe>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80eb 	beq.w	800051a <__udivmoddi4+0x286>
 8000344:	2700      	movs	r7, #0
 8000346:	e9c6 0100 	strd	r0, r1, [r6]
 800034a:	4638      	mov	r0, r7
 800034c:	4639      	mov	r1, r7
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f783 	clz	r7, r3
 8000356:	2f00      	cmp	r7, #0
 8000358:	d147      	bne.n	80003ea <__udivmoddi4+0x156>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xd0>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80fa 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0303 	sbc.w	r3, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	4698      	mov	r8, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0e0      	beq.n	8000334 <__udivmoddi4+0xa0>
 8000372:	e9c6 4800 	strd	r4, r8, [r6]
 8000376:	e7dd      	b.n	8000334 <__udivmoddi4+0xa0>
 8000378:	b902      	cbnz	r2, 800037c <__udivmoddi4+0xe8>
 800037a:	deff      	udf	#255	; 0xff
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	2a00      	cmp	r2, #0
 8000382:	f040 808f 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000386:	1b49      	subs	r1, r1, r5
 8000388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800038c:	fa1f f885 	uxth.w	r8, r5
 8000390:	2701      	movs	r7, #1
 8000392:	fbb1 fcfe 	udiv	ip, r1, lr
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fb0e 111c 	mls	r1, lr, ip, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb08 f10c 	mul.w	r1, r8, ip
 80003a4:	4299      	cmp	r1, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a8:	18eb      	adds	r3, r5, r3
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4299      	cmp	r1, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1a59      	subs	r1, r3, r1
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x14c>
 80003d0:	192c      	adds	r4, r5, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x14a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80b6 	bhi.w	800054a <__udivmoddi4+0x2b6>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e79f      	b.n	800032a <__udivmoddi4+0x96>
 80003ea:	f1c7 0c20 	rsb	ip, r7, #32
 80003ee:	40bb      	lsls	r3, r7
 80003f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f8:	fa01 f407 	lsl.w	r4, r1, r7
 80003fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000400:	fa21 f30c 	lsr.w	r3, r1, ip
 8000404:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000408:	4325      	orrs	r5, r4
 800040a:	fbb3 f9f8 	udiv	r9, r3, r8
 800040e:	0c2c      	lsrs	r4, r5, #16
 8000410:	fb08 3319 	mls	r3, r8, r9, r3
 8000414:	fa1f fa8e 	uxth.w	sl, lr
 8000418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800041c:	fb09 f40a 	mul.w	r4, r9, sl
 8000420:	429c      	cmp	r4, r3
 8000422:	fa02 f207 	lsl.w	r2, r2, r7
 8000426:	fa00 f107 	lsl.w	r1, r0, r7
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1e 0303 	adds.w	r3, lr, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	f080 8087 	bcs.w	8000546 <__udivmoddi4+0x2b2>
 8000438:	429c      	cmp	r4, r3
 800043a:	f240 8084 	bls.w	8000546 <__udivmoddi4+0x2b2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4473      	add	r3, lr
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	b2ad      	uxth	r5, r5
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000454:	fb00 fa0a 	mul.w	sl, r0, sl
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1e 0404 	adds.w	r4, lr, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	d26b      	bcs.n	800053e <__udivmoddi4+0x2aa>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d969      	bls.n	800053e <__udivmoddi4+0x2aa>
 800046a:	3802      	subs	r0, #2
 800046c:	4474      	add	r4, lr
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c2      	mov	sl, r8
 800047e:	464b      	mov	r3, r9
 8000480:	d354      	bcc.n	800052c <__udivmoddi4+0x298>
 8000482:	d051      	beq.n	8000528 <__udivmoddi4+0x294>
 8000484:	2e00      	cmp	r6, #0
 8000486:	d069      	beq.n	800055c <__udivmoddi4+0x2c8>
 8000488:	ebb1 050a 	subs.w	r5, r1, sl
 800048c:	eb64 0403 	sbc.w	r4, r4, r3
 8000490:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000494:	40fd      	lsrs	r5, r7
 8000496:	40fc      	lsrs	r4, r7
 8000498:	ea4c 0505 	orr.w	r5, ip, r5
 800049c:	e9c6 5400 	strd	r5, r4, [r6]
 80004a0:	2700      	movs	r7, #0
 80004a2:	e747      	b.n	8000334 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ac:	4095      	lsls	r5, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	fa21 f303 	lsr.w	r3, r1, r3
 80004b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ba:	4338      	orrs	r0, r7
 80004bc:	0c01      	lsrs	r1, r0, #16
 80004be:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c2:	fa1f f885 	uxth.w	r8, r5
 80004c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb07 f308 	mul.w	r3, r7, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x256>
 80004da:	1869      	adds	r1, r5, r1
 80004dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e0:	d22f      	bcs.n	8000542 <__udivmoddi4+0x2ae>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d92d      	bls.n	8000542 <__udivmoddi4+0x2ae>
 80004e6:	3f02      	subs	r7, #2
 80004e8:	4429      	add	r1, r5
 80004ea:	1acb      	subs	r3, r1, r3
 80004ec:	b281      	uxth	r1, r0
 80004ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb00 f308 	mul.w	r3, r0, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x27e>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f100 3cff 	add.w	ip, r0, #4294967295
 8000508:	d217      	bcs.n	800053a <__udivmoddi4+0x2a6>
 800050a:	428b      	cmp	r3, r1
 800050c:	d915      	bls.n	800053a <__udivmoddi4+0x2a6>
 800050e:	3802      	subs	r0, #2
 8000510:	4429      	add	r1, r5
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000518:	e73b      	b.n	8000392 <__udivmoddi4+0xfe>
 800051a:	4637      	mov	r7, r6
 800051c:	4630      	mov	r0, r6
 800051e:	e709      	b.n	8000334 <__udivmoddi4+0xa0>
 8000520:	4607      	mov	r7, r0
 8000522:	e6e7      	b.n	80002f4 <__udivmoddi4+0x60>
 8000524:	4618      	mov	r0, r3
 8000526:	e6fb      	b.n	8000320 <__udivmoddi4+0x8c>
 8000528:	4541      	cmp	r1, r8
 800052a:	d2ab      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 800052c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000530:	eb69 020e 	sbc.w	r2, r9, lr
 8000534:	3801      	subs	r0, #1
 8000536:	4613      	mov	r3, r2
 8000538:	e7a4      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053a:	4660      	mov	r0, ip
 800053c:	e7e9      	b.n	8000512 <__udivmoddi4+0x27e>
 800053e:	4618      	mov	r0, r3
 8000540:	e795      	b.n	800046e <__udivmoddi4+0x1da>
 8000542:	4667      	mov	r7, ip
 8000544:	e7d1      	b.n	80004ea <__udivmoddi4+0x256>
 8000546:	4681      	mov	r9, r0
 8000548:	e77c      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054a:	3802      	subs	r0, #2
 800054c:	442c      	add	r4, r5
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0x14c>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	442b      	add	r3, r5
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	4638      	mov	r0, r7
 800055a:	e708      	b.n	800036e <__udivmoddi4+0xda>
 800055c:	4637      	mov	r7, r6
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0xa0>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <vTask_IntersectionCtrl>:
 *      Author: jpaca
 */
#include "intersection_ctrl.h"

void vTask_IntersectionCtrl(void* params)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if ( state_machine_get_state() == CLC_train_crossing )
 800056c:	f000 f8a0 	bl	80006b0 <state_machine_get_state>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d10c      	bne.n	8000590 <vTask_IntersectionCtrl+0x2c>
		{
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);	/* Red Led On*/
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <vTask_IntersectionCtrl+0x48>)
 800057e:	f000 fb79 	bl	8000c74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <vTask_IntersectionCtrl+0x48>)
 800058a:	f000 fb73 	bl	8000c74 <HAL_GPIO_WritePin>
 800058e:	e7ed      	b.n	800056c <vTask_IntersectionCtrl+0x8>
		}
		else
		{
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);	/* Green Led On*/
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <vTask_IntersectionCtrl+0x48>)
 8000598:	f000 fb6c 	bl	8000c74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a2:	4802      	ldr	r0, [pc, #8]	; (80005ac <vTask_IntersectionCtrl+0x48>)
 80005a4:	f000 fb66 	bl	8000c74 <HAL_GPIO_WritePin>
		if ( state_machine_get_state() == CLC_train_crossing )
 80005a8:	e7e0      	b.n	800056c <vTask_IntersectionCtrl+0x8>
 80005aa:	bf00      	nop
 80005ac:	40020c00 	.word	0x40020c00

080005b0 <vTask_SensorRead>:

static uint8_t sensor1_reading;
static uint8_t sensor2_reading;

void vTask_SensorRead(void* params)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	{
		/* Read Sensor 1 and 2
		 * HIGH = no train
		 * LOW = train detected
		*/
		sensor1_reading = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 80005b8:	2101      	movs	r1, #1
 80005ba:	4808      	ldr	r0, [pc, #32]	; (80005dc <vTask_SensorRead+0x2c>)
 80005bc:	f000 fb42 	bl	8000c44 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <vTask_SensorRead+0x30>)
 80005c6:	701a      	strb	r2, [r3, #0]
		sensor2_reading = HAL_GPIO_ReadPin(Sensor2_GPIO_Port, Sensor2_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <vTask_SensorRead+0x34>)
 80005cc:	f000 fb3a 	bl	8000c44 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <vTask_SensorRead+0x38>)
 80005d6:	701a      	strb	r2, [r3, #0]
		sensor1_reading = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 80005d8:	e7ee      	b.n	80005b8 <vTask_SensorRead+0x8>
 80005da:	bf00      	nop
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	20000030 	.word	0x20000030
 80005e4:	40021000 	.word	0x40021000
 80005e8:	20000031 	.word	0x20000031

080005ec <intersection_ctrl_get_sensor1_reading>:

	}
}

uint8_t intersection_ctrl_get_sensor1_reading(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	return sensor1_reading;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <intersection_ctrl_get_sensor1_reading+0x14>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000030 	.word	0x20000030

08000604 <intersection_ctrl_get_sensor2_reading>:

uint8_t intersection_ctrl_get_sensor2_reading(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	return sensor2_reading;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <intersection_ctrl_get_sensor2_reading+0x14>)
 800060a:	781b      	ldrb	r3, [r3, #0]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000031 	.word	0x20000031

0800061c <vTask_StateMachine>:
#include "state_machine.h"

static uint8_t CLC_current_state = CLC_train_not_present;

void vTask_StateMachine(void* params)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	uint8_t exit_sensor = exit_sensor_reset;	/* exit sensor for train, initialized as reset, 0 */
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

	for(;;)
	{
		uint8_t sens1 = intersection_ctrl_get_sensor1_reading();
 8000628:	f7ff ffe0 	bl	80005ec <intersection_ctrl_get_sensor1_reading>
 800062c:	4603      	mov	r3, r0
 800062e:	73bb      	strb	r3, [r7, #14]
		uint8_t sens2 = intersection_ctrl_get_sensor2_reading();
 8000630:	f7ff ffe8 	bl	8000604 <intersection_ctrl_get_sensor2_reading>
 8000634:	4603      	mov	r3, r0
 8000636:	737b      	strb	r3, [r7, #13]

		if ( sens1 == LOW && CLC_current_state != CLC_train_crossing )
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d109      	bne.n	8000652 <vTask_StateMachine+0x36>
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <vTask_StateMachine+0x90>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d005      	beq.n	8000652 <vTask_StateMachine+0x36>
		{
			CLC_current_state = CLC_train_crossing;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <vTask_StateMachine+0x90>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
			exit_sensor = exit_sensor_sens2;
 800064c:	2302      	movs	r3, #2
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e00b      	b.n	800066a <vTask_StateMachine+0x4e>
		}
		else if ( sens2 == LOW && CLC_current_state != CLC_train_crossing )
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d108      	bne.n	800066a <vTask_StateMachine+0x4e>
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <vTask_StateMachine+0x90>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d004      	beq.n	800066a <vTask_StateMachine+0x4e>
		{
			CLC_current_state = CLC_train_crossing;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <vTask_StateMachine+0x90>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
			exit_sensor = exit_sensor_sens1;
 8000666:	2301      	movs	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
		}

		if ( exit_sensor ==  exit_sensor_sens1 && CLC_current_state == CLC_train_crossing )
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d10c      	bne.n	800068a <vTask_StateMachine+0x6e>
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <vTask_StateMachine+0x90>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d108      	bne.n	800068a <vTask_StateMachine+0x6e>
		{
			if ( sens1 == LOW )
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d114      	bne.n	80006a8 <vTask_StateMachine+0x8c>
			{
				CLC_current_state = CLC_train_exit;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <vTask_StateMachine+0x90>)
 8000680:	2202      	movs	r2, #2
 8000682:	701a      	strb	r2, [r3, #0]
				exit_sensor = exit_sensor_reset;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
			if ( sens1 == LOW )
 8000688:	e00e      	b.n	80006a8 <vTask_StateMachine+0x8c>
			}
		}
		else if ( exit_sensor ==  exit_sensor_sens2 && CLC_current_state == CLC_train_crossing )
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d1cb      	bne.n	8000628 <vTask_StateMachine+0xc>
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <vTask_StateMachine+0x90>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d1c7      	bne.n	8000628 <vTask_StateMachine+0xc>
		{
			if ( sens2 == LOW )
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1c4      	bne.n	8000628 <vTask_StateMachine+0xc>
			{
				CLC_current_state = CLC_train_exit;
 800069e:	4b03      	ldr	r3, [pc, #12]	; (80006ac <vTask_StateMachine+0x90>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	701a      	strb	r2, [r3, #0]
				exit_sensor = exit_sensor_reset;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
	{
 80006a8:	e7be      	b.n	8000628 <vTask_StateMachine+0xc>
 80006aa:	bf00      	nop
 80006ac:	20000032 	.word	0x20000032

080006b0 <state_machine_get_state>:
		}
	}
}

uint8_t state_machine_get_state(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	return CLC_current_state;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <state_machine_get_state+0x14>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000032 	.word	0x20000032

080006c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <HAL_Init+0x40>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <HAL_Init+0x40>)
 80006d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <HAL_Init+0x40>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <HAL_Init+0x40>)
 80006de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_Init+0x40>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_Init+0x40>)
 80006ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f8d8 	bl	80008a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f001 fc22 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f001 fbf8 	bl	8001ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023c00 	.word	0x40023c00

0800070c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_IncTick+0x20>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_IncTick+0x24>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_IncTick+0x24>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000004 	.word	0x20000004
 8000730:	2001436c 	.word	0x2001436c

08000734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <HAL_GetTick+0x14>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	2001436c 	.word	0x2001436c

0800074c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <__NVIC_SetPriorityGrouping+0x44>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <__NVIC_SetPriorityGrouping+0x44>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <__NVIC_GetPriorityGrouping+0x18>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 0307 	and.w	r3, r3, #7
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db0b      	blt.n	80007da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 021f 	and.w	r2, r3, #31
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <__NVIC_EnableIRQ+0x38>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2001      	movs	r0, #1
 80007d2:	fa00 f202 	lsl.w	r2, r0, r2
 80007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100

080007ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db0a      	blt.n	8000816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <__NVIC_SetPriority+0x4c>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	440b      	add	r3, r1
 8000810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000814:	e00a      	b.n	800082c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4908      	ldr	r1, [pc, #32]	; (800083c <__NVIC_SetPriority+0x50>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	3b04      	subs	r3, #4
 8000824:	0112      	lsls	r2, r2, #4
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	440b      	add	r3, r1
 800082a:	761a      	strb	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f1c3 0307 	rsb	r3, r3, #7
 800085a:	2b04      	cmp	r3, #4
 800085c:	bf28      	it	cs
 800085e:	2304      	movcs	r3, #4
 8000860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3304      	adds	r3, #4
 8000866:	2b06      	cmp	r3, #6
 8000868:	d902      	bls.n	8000870 <NVIC_EncodePriority+0x30>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3b03      	subs	r3, #3
 800086e:	e000      	b.n	8000872 <NVIC_EncodePriority+0x32>
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	f04f 32ff 	mov.w	r2, #4294967295
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43da      	mvns	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	401a      	ands	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	43d9      	mvns	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	4313      	orrs	r3, r2
         );
}
 800089a:	4618      	mov	r0, r3
 800089c:	3724      	adds	r7, #36	; 0x24
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ff4c 	bl	800074c <__NVIC_SetPriorityGrouping>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ce:	f7ff ff61 	bl	8000794 <__NVIC_GetPriorityGrouping>
 80008d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	68b9      	ldr	r1, [r7, #8]
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f7ff ffb1 	bl	8000840 <NVIC_EncodePriority>
 80008de:	4602      	mov	r2, r0
 80008e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff80 	bl	80007ec <__NVIC_SetPriority>
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff54 	bl	80007b0 <__NVIC_EnableIRQ>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	e16b      	b.n	8000c04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	429a      	cmp	r2, r3
 8000946:	f040 815a 	bne.w	8000bfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d00b      	beq.n	800096a <HAL_GPIO_Init+0x5a>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095e:	2b11      	cmp	r3, #17
 8000960:	d003      	beq.n	800096a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b12      	cmp	r3, #18
 8000968:	d130      	bne.n	80009cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4013      	ands	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009a0:	2201      	movs	r2, #1
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4013      	ands	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	091b      	lsrs	r3, r3, #4
 80009b6:	f003 0201 	and.w	r2, r3, #1
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0xfc>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b12      	cmp	r3, #18
 8000a0a:	d123      	bne.n	8000a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	f003 0307 	and.w	r3, r3, #7
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220f      	movs	r2, #15
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	691a      	ldr	r2, [r3, #16]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	08da      	lsrs	r2, r3, #3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	69b9      	ldr	r1, [r7, #24]
 8000a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0203 	and.w	r2, r3, #3
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 80b4 	beq.w	8000bfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b5f      	ldr	r3, [pc, #380]	; (8000c18 <HAL_GPIO_Init+0x308>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a5e      	ldr	r2, [pc, #376]	; (8000c18 <HAL_GPIO_Init+0x308>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b5c      	ldr	r3, [pc, #368]	; (8000c18 <HAL_GPIO_Init+0x308>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ab2:	4a5a      	ldr	r2, [pc, #360]	; (8000c1c <HAL_GPIO_Init+0x30c>)
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3302      	adds	r3, #2
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a51      	ldr	r2, [pc, #324]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d02b      	beq.n	8000b36 <HAL_GPIO_Init+0x226>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a50      	ldr	r2, [pc, #320]	; (8000c24 <HAL_GPIO_Init+0x314>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d025      	beq.n	8000b32 <HAL_GPIO_Init+0x222>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4f      	ldr	r2, [pc, #316]	; (8000c28 <HAL_GPIO_Init+0x318>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d01f      	beq.n	8000b2e <HAL_GPIO_Init+0x21e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4e      	ldr	r2, [pc, #312]	; (8000c2c <HAL_GPIO_Init+0x31c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d019      	beq.n	8000b2a <HAL_GPIO_Init+0x21a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d013      	beq.n	8000b26 <HAL_GPIO_Init+0x216>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4c      	ldr	r2, [pc, #304]	; (8000c34 <HAL_GPIO_Init+0x324>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d00d      	beq.n	8000b22 <HAL_GPIO_Init+0x212>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4b      	ldr	r2, [pc, #300]	; (8000c38 <HAL_GPIO_Init+0x328>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d007      	beq.n	8000b1e <HAL_GPIO_Init+0x20e>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4a      	ldr	r2, [pc, #296]	; (8000c3c <HAL_GPIO_Init+0x32c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_GPIO_Init+0x20a>
 8000b16:	2307      	movs	r3, #7
 8000b18:	e00e      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	e00c      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b1e:	2306      	movs	r3, #6
 8000b20:	e00a      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b22:	2305      	movs	r3, #5
 8000b24:	e008      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e006      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e004      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x228>
 8000b36:	2300      	movs	r3, #0
 8000b38:	69fa      	ldr	r2, [r7, #28]
 8000b3a:	f002 0203 	and.w	r2, r2, #3
 8000b3e:	0092      	lsls	r2, r2, #2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b48:	4934      	ldr	r1, [pc, #208]	; (8000c1c <HAL_GPIO_Init+0x30c>)
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3302      	adds	r3, #2
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b56:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ba4:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_GPIO_Init+0x330>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	f67f ae90 	bls.w	800092c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3724      	adds	r7, #36	; 0x24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40021400 	.word	0x40021400
 8000c38:	40021800 	.word	0x40021800
 8000c3c:	40021c00 	.word	0x40021c00
 8000c40:	40013c00 	.word	0x40013c00

08000c44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691a      	ldr	r2, [r3, #16]
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e001      	b.n	8000c66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
 8000c80:	4613      	mov	r3, r2
 8000c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c84:	787b      	ldrb	r3, [r7, #1]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c90:	e003      	b.n	8000c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	041a      	lsls	r2, r3, #16
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	619a      	str	r2, [r3, #24]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e25b      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d075      	beq.n	8000db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cc6:	4ba3      	ldr	r3, [pc, #652]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	d00c      	beq.n	8000cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cd2:	4ba0      	ldr	r3, [pc, #640]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	d112      	bne.n	8000d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cde:	4b9d      	ldr	r3, [pc, #628]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cea:	d10b      	bne.n	8000d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	4b99      	ldr	r3, [pc, #612]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d05b      	beq.n	8000db0 <HAL_RCC_OscConfig+0x108>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d157      	bne.n	8000db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e236      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0c:	d106      	bne.n	8000d1c <HAL_RCC_OscConfig+0x74>
 8000d0e:	4b91      	ldr	r3, [pc, #580]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a90      	ldr	r2, [pc, #576]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e01d      	b.n	8000d58 <HAL_RCC_OscConfig+0xb0>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d24:	d10c      	bne.n	8000d40 <HAL_RCC_OscConfig+0x98>
 8000d26:	4b8b      	ldr	r3, [pc, #556]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a8a      	ldr	r2, [pc, #552]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b88      	ldr	r3, [pc, #544]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a87      	ldr	r2, [pc, #540]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e00b      	b.n	8000d58 <HAL_RCC_OscConfig+0xb0>
 8000d40:	4b84      	ldr	r3, [pc, #528]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a83      	ldr	r2, [pc, #524]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a80      	ldr	r2, [pc, #512]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d013      	beq.n	8000d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fce8 	bl	8000734 <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d68:	f7ff fce4 	bl	8000734 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b64      	cmp	r3, #100	; 0x64
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e1fb      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7a:	4b76      	ldr	r3, [pc, #472]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f0      	beq.n	8000d68 <HAL_RCC_OscConfig+0xc0>
 8000d86:	e014      	b.n	8000db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fcd4 	bl	8000734 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d90:	f7ff fcd0 	bl	8000734 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	; 0x64
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e1e7      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da2:	4b6c      	ldr	r3, [pc, #432]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0xe8>
 8000dae:	e000      	b.n	8000db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d063      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dbe:	4b65      	ldr	r3, [pc, #404]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00b      	beq.n	8000de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dca:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dd2:	2b08      	cmp	r3, #8
 8000dd4:	d11c      	bne.n	8000e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dd6:	4b5f      	ldr	r3, [pc, #380]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d116      	bne.n	8000e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de2:	4b5c      	ldr	r3, [pc, #368]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <HAL_RCC_OscConfig+0x152>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d001      	beq.n	8000dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e1bb      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfa:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4952      	ldr	r1, [pc, #328]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0e:	e03a      	b.n	8000e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d020      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e18:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <HAL_RCC_OscConfig+0x2b0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fc89 	bl	8000734 <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e26:	f7ff fc85 	bl	8000734 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e19c      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e38:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f0      	beq.n	8000e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e44:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4940      	ldr	r1, [pc, #256]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	600b      	str	r3, [r1, #0]
 8000e58:	e015      	b.n	8000e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_RCC_OscConfig+0x2b0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e60:	f7ff fc68 	bl	8000734 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e68:	f7ff fc64 	bl	8000734 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e17b      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7a:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d030      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d016      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_RCC_OscConfig+0x2b4>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fc48 	bl	8000734 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc44 	bl	8000734 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e15b      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f0      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x200>
 8000ec6:	e015      	b.n	8000ef4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <HAL_RCC_OscConfig+0x2b4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fc31 	bl	8000734 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ed6:	f7ff fc2d 	bl	8000734 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e144      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80a0 	beq.w	8001042 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10f      	bne.n	8000f32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_RCC_OscConfig+0x2b8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d121      	bne.n	8000f82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_RCC_OscConfig+0x2b8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_RCC_OscConfig+0x2b8>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fbf3 	bl	8000734 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	e011      	b.n	8000f76 <HAL_RCC_OscConfig+0x2ce>
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	42470000 	.word	0x42470000
 8000f5c:	42470e80 	.word	0x42470e80
 8000f60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f64:	f7ff fbe6 	bl	8000734 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e0fd      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f76:	4b81      	ldr	r3, [pc, #516]	; (800117c <HAL_RCC_OscConfig+0x4d4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d106      	bne.n	8000f98 <HAL_RCC_OscConfig+0x2f0>
 8000f8a:	4b7d      	ldr	r3, [pc, #500]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8e:	4a7c      	ldr	r2, [pc, #496]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6713      	str	r3, [r2, #112]	; 0x70
 8000f96:	e01c      	b.n	8000fd2 <HAL_RCC_OscConfig+0x32a>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d10c      	bne.n	8000fba <HAL_RCC_OscConfig+0x312>
 8000fa0:	4b77      	ldr	r3, [pc, #476]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	4a76      	ldr	r2, [pc, #472]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6713      	str	r3, [r2, #112]	; 0x70
 8000fac:	4b74      	ldr	r3, [pc, #464]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb0:	4a73      	ldr	r2, [pc, #460]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8000fb8:	e00b      	b.n	8000fd2 <HAL_RCC_OscConfig+0x32a>
 8000fba:	4b71      	ldr	r3, [pc, #452]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fbe:	4a70      	ldr	r2, [pc, #448]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8000fc6:	4b6e      	ldr	r3, [pc, #440]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	4a6d      	ldr	r2, [pc, #436]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000fcc:	f023 0304 	bic.w	r3, r3, #4
 8000fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fda:	f7ff fbab 	bl	8000734 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fba7 	bl	8000734 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e0bc      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff8:	4b61      	ldr	r3, [pc, #388]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8000ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0ee      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x33a>
 8001004:	e014      	b.n	8001030 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001006:	f7ff fb95 	bl	8000734 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100c:	e00a      	b.n	8001024 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800100e:	f7ff fb91 	bl	8000734 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	f241 3288 	movw	r2, #5000	; 0x1388
 800101c:	4293      	cmp	r3, r2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e0a6      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001024:	4b56      	ldr	r3, [pc, #344]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8001026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1ee      	bne.n	800100e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d105      	bne.n	8001042 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001036:	4b52      	ldr	r3, [pc, #328]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a51      	ldr	r2, [pc, #324]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 800103c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8092 	beq.w	8001170 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800104c:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	d05c      	beq.n	8001112 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d141      	bne.n	80010e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001060:	4b48      	ldr	r3, [pc, #288]	; (8001184 <HAL_RCC_OscConfig+0x4dc>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fb65 	bl	8000734 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800106e:	f7ff fb61 	bl	8000734 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e078      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001080:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f0      	bne.n	800106e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69da      	ldr	r2, [r3, #28]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	019b      	lsls	r3, r3, #6
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	085b      	lsrs	r3, r3, #1
 80010a4:	3b01      	subs	r3, #1
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	061b      	lsls	r3, r3, #24
 80010b0:	4933      	ldr	r1, [pc, #204]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_RCC_OscConfig+0x4dc>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb3a 	bl	8000734 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c4:	f7ff fb36 	bl	8000734 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e04d      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x41c>
 80010e2:	e045      	b.n	8001170 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_RCC_OscConfig+0x4dc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fb23 	bl	8000734 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fb1f 	bl	8000734 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e036      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f0      	bne.n	80010f2 <HAL_RCC_OscConfig+0x44a>
 8001110:	e02e      	b.n	8001170 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e029      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_RCC_OscConfig+0x4d8>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	429a      	cmp	r2, r3
 8001130:	d11c      	bne.n	800116c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800113c:	429a      	cmp	r2, r3
 800113e:	d115      	bne.n	800116c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001146:	4013      	ands	r3, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800114c:	4293      	cmp	r3, r2
 800114e:	d10d      	bne.n	800116c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800115a:	429a      	cmp	r2, r3
 800115c:	d106      	bne.n	800116c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40007000 	.word	0x40007000
 8001180:	40023800 	.word	0x40023800
 8001184:	42470060 	.word	0x42470060

08001188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0cc      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800119c:	4b68      	ldr	r3, [pc, #416]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d90c      	bls.n	80011c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b65      	ldr	r3, [pc, #404]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0b8      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011dc:	4b59      	ldr	r3, [pc, #356]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a58      	ldr	r2, [pc, #352]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	494d      	ldr	r1, [pc, #308]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	4313      	orrs	r3, r2
 8001210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d044      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d119      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e07f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d003      	beq.n	8001246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001242:	2b03      	cmp	r3, #3
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e06f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e067      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f023 0203 	bic.w	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4934      	ldr	r1, [pc, #208]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001278:	f7ff fa5c 	bl	8000734 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	e00a      	b.n	8001296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f7ff fa58 	bl	8000734 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e04f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 020c 	and.w	r2, r3, #12
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d1eb      	bne.n	8001280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d20c      	bcs.n	80012d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e032      	b.n	8001336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4916      	ldr	r1, [pc, #88]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800130e:	f000 f821 	bl	8001354 <HAL_RCC_GetSysClockFreq>
 8001312:	4601      	mov	r1, r0
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	fa21 f303 	lsr.w	r3, r1, r3
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_RCC_ClockConfig+0x1c8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fe06 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023c00 	.word	0x40023c00
 8001344:	40023800 	.word	0x40023800
 8001348:	0800653c 	.word	0x0800653c
 800134c:	20000008 	.word	0x20000008
 8001350:	20000000 	.word	0x20000000

08001354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d007      	beq.n	8001386 <HAL_RCC_GetSysClockFreq+0x32>
 8001376:	2b08      	cmp	r3, #8
 8001378:	d008      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x38>
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 80b4 	bne.w	80014e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001380:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001382:	60bb      	str	r3, [r7, #8]
       break;
 8001384:	e0b3      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001386:	4b5e      	ldr	r3, [pc, #376]	; (8001500 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001388:	60bb      	str	r3, [r7, #8]
      break;
 800138a:	e0b0      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800138c:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001394:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001396:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d04a      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a2:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	f04f 0400 	mov.w	r4, #0
 80013ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	ea03 0501 	and.w	r5, r3, r1
 80013b8:	ea04 0602 	and.w	r6, r4, r2
 80013bc:	4629      	mov	r1, r5
 80013be:	4632      	mov	r2, r6
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	f04f 0400 	mov.w	r4, #0
 80013c8:	0154      	lsls	r4, r2, #5
 80013ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013ce:	014b      	lsls	r3, r1, #5
 80013d0:	4619      	mov	r1, r3
 80013d2:	4622      	mov	r2, r4
 80013d4:	1b49      	subs	r1, r1, r5
 80013d6:	eb62 0206 	sbc.w	r2, r2, r6
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	f04f 0400 	mov.w	r4, #0
 80013e2:	0194      	lsls	r4, r2, #6
 80013e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013e8:	018b      	lsls	r3, r1, #6
 80013ea:	1a5b      	subs	r3, r3, r1
 80013ec:	eb64 0402 	sbc.w	r4, r4, r2
 80013f0:	f04f 0100 	mov.w	r1, #0
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	00e2      	lsls	r2, r4, #3
 80013fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013fe:	00d9      	lsls	r1, r3, #3
 8001400:	460b      	mov	r3, r1
 8001402:	4614      	mov	r4, r2
 8001404:	195b      	adds	r3, r3, r5
 8001406:	eb44 0406 	adc.w	r4, r4, r6
 800140a:	f04f 0100 	mov.w	r1, #0
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	0262      	lsls	r2, r4, #9
 8001414:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001418:	0259      	lsls	r1, r3, #9
 800141a:	460b      	mov	r3, r1
 800141c:	4614      	mov	r4, r2
 800141e:	4618      	mov	r0, r3
 8001420:	4621      	mov	r1, r4
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 0400 	mov.w	r4, #0
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	f7fe ff1a 	bl	8000264 <__aeabi_uldivmod>
 8001430:	4603      	mov	r3, r0
 8001432:	460c      	mov	r4, r1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e049      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	f04f 0400 	mov.w	r4, #0
 8001442:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	ea03 0501 	and.w	r5, r3, r1
 800144e:	ea04 0602 	and.w	r6, r4, r2
 8001452:	4629      	mov	r1, r5
 8001454:	4632      	mov	r2, r6
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	f04f 0400 	mov.w	r4, #0
 800145e:	0154      	lsls	r4, r2, #5
 8001460:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001464:	014b      	lsls	r3, r1, #5
 8001466:	4619      	mov	r1, r3
 8001468:	4622      	mov	r2, r4
 800146a:	1b49      	subs	r1, r1, r5
 800146c:	eb62 0206 	sbc.w	r2, r2, r6
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	f04f 0400 	mov.w	r4, #0
 8001478:	0194      	lsls	r4, r2, #6
 800147a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800147e:	018b      	lsls	r3, r1, #6
 8001480:	1a5b      	subs	r3, r3, r1
 8001482:	eb64 0402 	sbc.w	r4, r4, r2
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	00e2      	lsls	r2, r4, #3
 8001490:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001494:	00d9      	lsls	r1, r3, #3
 8001496:	460b      	mov	r3, r1
 8001498:	4614      	mov	r4, r2
 800149a:	195b      	adds	r3, r3, r5
 800149c:	eb44 0406 	adc.w	r4, r4, r6
 80014a0:	f04f 0100 	mov.w	r1, #0
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	02a2      	lsls	r2, r4, #10
 80014aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80014ae:	0299      	lsls	r1, r3, #10
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	4621      	mov	r1, r4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f04f 0400 	mov.w	r4, #0
 80014be:	461a      	mov	r2, r3
 80014c0:	4623      	mov	r3, r4
 80014c2:	f7fe fecf 	bl	8000264 <__aeabi_uldivmod>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	0c1b      	lsrs	r3, r3, #16
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	3301      	adds	r3, #1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	60bb      	str	r3, [r7, #8]
      break;
 80014e6:	e002      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80014ea:	60bb      	str	r3, [r7, #8]
      break;
 80014ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ee:	68bb      	ldr	r3, [r7, #8]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	00f42400 	.word	0x00f42400
 8001500:	007a1200 	.word	0x007a1200

08001504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_RCC_GetHCLKFreq+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008

0800151c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001520:	f7ff fff0 	bl	8001504 <HAL_RCC_GetHCLKFreq>
 8001524:	4601      	mov	r1, r0
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	0a9b      	lsrs	r3, r3, #10
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	0800654c 	.word	0x0800654c

08001544 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	220f      	movs	r2, #15
 8001552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_RCC_GetClockConfig+0x5c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_GetClockConfig+0x5c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_RCC_GetClockConfig+0x60>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 020f 	and.w	r2, r3, #15
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40023c00 	.word	0x40023c00

080015a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e01d      	b.n	80015f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d106      	bne.n	80015d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f815 	bl	80015fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3304      	adds	r3, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f000 f968 	bl	80018bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0201 	orr.w	r2, r2, #1
 8001628:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b06      	cmp	r3, #6
 800163a:	d007      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b02      	cmp	r3, #2
 800166e:	d122      	bne.n	80016b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d11b      	bne.n	80016b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f06f 0202 	mvn.w	r2, #2
 8001686:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f8ee 	bl	800187e <HAL_TIM_IC_CaptureCallback>
 80016a2:	e005      	b.n	80016b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f8e0 	bl	800186a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f8f1 	bl	8001892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d122      	bne.n	800170a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d11b      	bne.n	800170a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f06f 0204 	mvn.w	r2, #4
 80016da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f8c4 	bl	800187e <HAL_TIM_IC_CaptureCallback>
 80016f6:	e005      	b.n	8001704 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f8b6 	bl	800186a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8c7 	bl	8001892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b08      	cmp	r3, #8
 8001716:	d122      	bne.n	800175e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b08      	cmp	r3, #8
 8001724:	d11b      	bne.n	800175e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f06f 0208 	mvn.w	r2, #8
 800172e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2204      	movs	r2, #4
 8001734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f89a 	bl	800187e <HAL_TIM_IC_CaptureCallback>
 800174a:	e005      	b.n	8001758 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f88c 	bl	800186a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f89d 	bl	8001892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b10      	cmp	r3, #16
 800176a:	d122      	bne.n	80017b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b10      	cmp	r3, #16
 8001778:	d11b      	bne.n	80017b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f06f 0210 	mvn.w	r2, #16
 8001782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2208      	movs	r2, #8
 8001788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f870 	bl	800187e <HAL_TIM_IC_CaptureCallback>
 800179e:	e005      	b.n	80017ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f862 	bl	800186a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f873 	bl	8001892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d10e      	bne.n	80017de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f06f 0201 	mvn.w	r2, #1
 80017d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fb6f 	bl	8001ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e8:	2b80      	cmp	r3, #128	; 0x80
 80017ea:	d10e      	bne.n	800180a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	2b80      	cmp	r3, #128	; 0x80
 80017f8:	d107      	bne.n	800180a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f903 	bl	8001a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001814:	2b40      	cmp	r3, #64	; 0x40
 8001816:	d10e      	bne.n	8001836 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d107      	bne.n	8001836 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800182e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f838 	bl	80018a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b20      	cmp	r3, #32
 8001842:	d10e      	bne.n	8001862 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b20      	cmp	r3, #32
 8001850:	d107      	bne.n	8001862 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f06f 0220 	mvn.w	r2, #32
 800185a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f8cd 	bl	80019fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a40      	ldr	r2, [pc, #256]	; (80019d0 <TIM_Base_SetConfig+0x114>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d013      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018da:	d00f      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3d      	ldr	r2, [pc, #244]	; (80019d4 <TIM_Base_SetConfig+0x118>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00b      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3c      	ldr	r2, [pc, #240]	; (80019d8 <TIM_Base_SetConfig+0x11c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3b      	ldr	r2, [pc, #236]	; (80019dc <TIM_Base_SetConfig+0x120>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d003      	beq.n	80018fc <TIM_Base_SetConfig+0x40>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3a      	ldr	r2, [pc, #232]	; (80019e0 <TIM_Base_SetConfig+0x124>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d108      	bne.n	800190e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <TIM_Base_SetConfig+0x114>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d02b      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d027      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <TIM_Base_SetConfig+0x118>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d023      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <TIM_Base_SetConfig+0x11c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <TIM_Base_SetConfig+0x120>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01b      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <TIM_Base_SetConfig+0x124>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d017      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <TIM_Base_SetConfig+0x128>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <TIM_Base_SetConfig+0x12c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00f      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <TIM_Base_SetConfig+0x130>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00b      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <TIM_Base_SetConfig+0x134>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <TIM_Base_SetConfig+0x138>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d003      	beq.n	800196e <TIM_Base_SetConfig+0xb2>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <TIM_Base_SetConfig+0x13c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d108      	bne.n	8001980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <TIM_Base_SetConfig+0x114>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d003      	beq.n	80019b4 <TIM_Base_SetConfig+0xf8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <TIM_Base_SetConfig+0x124>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d103      	bne.n	80019bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	615a      	str	r2, [r3, #20]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40000800 	.word	0x40000800
 80019dc:	40000c00 	.word	0x40000c00
 80019e0:	40010400 	.word	0x40010400
 80019e4:	40014000 	.word	0x40014000
 80019e8:	40014400 	.word	0x40014400
 80019ec:	40014800 	.word	0x40014800
 80019f0:	40001800 	.word	0x40001800
 80019f4:	40001c00 	.word	0x40001c00
 80019f8:	40002000 	.word	0x40002000

080019fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2a:	f7fe fe4d 	bl	80006c8 <HAL_Init>

  /* USER CODE BEGIN Init */

  // Enable the cycle counter
  DWT_CTRL |= (1<<0);
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <main+0xbc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <main+0xbc>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6013      	str	r3, [r2, #0]
  // start segger sys view
  SEGGER_SYSVIEW_Conf();
 8001a3a:	f002 ffd1 	bl	80049e0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8001a3e:	f003 fed1 	bl	80057e4 <SEGGER_SYSVIEW_Start>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a42:	f000 f85b 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a46:	f000 f8c3 	bl	8001bd0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* Create tasks - allocate static memory to heap */
  status = xTaskCreate(vTask_IntersectionCtrl,"Task_IntersectionCtrl",100,NULL,2,NULL);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	2302      	movs	r3, #2
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2300      	movs	r3, #0
 8001a54:	2264      	movs	r2, #100	; 0x64
 8001a56:	4923      	ldr	r1, [pc, #140]	; (8001ae4 <main+0xc0>)
 8001a58:	4823      	ldr	r0, [pc, #140]	; (8001ae8 <main+0xc4>)
 8001a5a:	f001 f935 	bl	8002cc8 <xTaskCreate>
 8001a5e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d009      	beq.n	8001a7a <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6a:	f383 8811 	msr	BASEPRI, r3
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f3bf 8f4f 	dsb	sy
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	e7fe      	b.n	8001a78 <main+0x54>
  status = xTaskCreate(vTask_SensorRead,"Task_SensorRead",100,NULL,2,NULL);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2264      	movs	r2, #100	; 0x64
 8001a86:	4919      	ldr	r1, [pc, #100]	; (8001aec <main+0xc8>)
 8001a88:	4819      	ldr	r0, [pc, #100]	; (8001af0 <main+0xcc>)
 8001a8a:	f001 f91d 	bl	8002cc8 <xTaskCreate>
 8001a8e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d009      	beq.n	8001aaa <main+0x86>
 8001a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9a:	f383 8811 	msr	BASEPRI, r3
 8001a9e:	f3bf 8f6f 	isb	sy
 8001aa2:	f3bf 8f4f 	dsb	sy
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	e7fe      	b.n	8001aa8 <main+0x84>
  status = xTaskCreate(vTask_StateMachine,"Task_StateMachine",100,NULL,2,NULL);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2302      	movs	r3, #2
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2264      	movs	r2, #100	; 0x64
 8001ab6:	490f      	ldr	r1, [pc, #60]	; (8001af4 <main+0xd0>)
 8001ab8:	480f      	ldr	r0, [pc, #60]	; (8001af8 <main+0xd4>)
 8001aba:	f001 f905 	bl	8002cc8 <xTaskCreate>
 8001abe:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d009      	beq.n	8001ada <main+0xb6>
 8001ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aca:	f383 8811 	msr	BASEPRI, r3
 8001ace:	f3bf 8f6f 	isb	sy
 8001ad2:	f3bf 8f4f 	dsb	sy
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	e7fe      	b.n	8001ad8 <main+0xb4>

  vTaskStartScheduler();
 8001ada:	f001 fa57 	bl	8002f8c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <main+0xba>
 8001ae0:	e0001000 	.word	0xe0001000
 8001ae4:	0800641c 	.word	0x0800641c
 8001ae8:	08000565 	.word	0x08000565
 8001aec:	08006434 	.word	0x08006434
 8001af0:	080005b1 	.word	0x080005b1
 8001af4:	08006444 	.word	0x08006444
 8001af8:	0800061d 	.word	0x0800061d

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b094      	sub	sp, #80	; 0x50
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	2230      	movs	r2, #48	; 0x30
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fc72 	bl	80063f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <SystemClock_Config+0xd0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <SystemClock_Config+0xd0>)
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <SystemClock_Config+0xd0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b60:	2310      	movs	r3, #16
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b64:	2302      	movs	r3, #2
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001b70:	2332      	movs	r3, #50	; 0x32
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b74:	2304      	movs	r3, #4
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f891 	bl	8000ca8 <HAL_RCC_OscConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b8c:	f000 f9a8 	bl	8001ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b90:	230f      	movs	r3, #15
 8001b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001b9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ba2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff faea 	bl	8001188 <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bba:	f000 f991 	bl	8001ee0 <Error_Handler>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3750      	adds	r7, #80	; 0x50
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	4bad      	ldr	r3, [pc, #692]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4aac      	ldr	r2, [pc, #688]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4baa      	ldr	r3, [pc, #680]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	4ba6      	ldr	r3, [pc, #664]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4aa5      	ldr	r2, [pc, #660]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b9f      	ldr	r3, [pc, #636]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a9e      	ldr	r2, [pc, #632]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b9c      	ldr	r3, [pc, #624]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b98      	ldr	r3, [pc, #608]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a97      	ldr	r2, [pc, #604]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b95      	ldr	r3, [pc, #596]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a90      	ldr	r2, [pc, #576]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b8e      	ldr	r3, [pc, #568]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b8a      	ldr	r3, [pc, #552]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a89      	ldr	r2, [pc, #548]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c7c:	f043 0308 	orr.w	r3, r3, #8
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b87      	ldr	r3, [pc, #540]	; (8001ea0 <MX_GPIO_Init+0x2d0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2108      	movs	r1, #8
 8001c92:	4884      	ldr	r0, [pc, #528]	; (8001ea4 <MX_GPIO_Init+0x2d4>)
 8001c94:	f7fe ffee 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4882      	ldr	r0, [pc, #520]	; (8001ea8 <MX_GPIO_Init+0x2d8>)
 8001c9e:	f7fe ffe9 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001ca8:	4880      	ldr	r0, [pc, #512]	; (8001eac <MX_GPIO_Init+0x2dc>)
 8001caa:	f7fe ffe3 	bl	8000c74 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4877      	ldr	r0, [pc, #476]	; (8001ea4 <MX_GPIO_Init+0x2d4>)
 8001cc6:	f7fe fe23 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4871      	ldr	r0, [pc, #452]	; (8001ea8 <MX_GPIO_Init+0x2d8>)
 8001ce2:	f7fe fe15 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4869      	ldr	r0, [pc, #420]	; (8001ea8 <MX_GPIO_Init+0x2d8>)
 8001d02:	f7fe fe05 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d0a:	4b69      	ldr	r3, [pc, #420]	; (8001eb0 <MX_GPIO_Init+0x2e0>)
 8001d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	4866      	ldr	r0, [pc, #408]	; (8001eb4 <MX_GPIO_Init+0x2e4>)
 8001d1a:	f7fe fdf9 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d1e:	2310      	movs	r3, #16
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d2e:	2306      	movs	r3, #6
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	485e      	ldr	r0, [pc, #376]	; (8001eb4 <MX_GPIO_Init+0x2e4>)
 8001d3a:	f7fe fde9 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d3e:	23e0      	movs	r3, #224	; 0xe0
 8001d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d4e:	2305      	movs	r3, #5
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	4856      	ldr	r0, [pc, #344]	; (8001eb4 <MX_GPIO_Init+0x2e4>)
 8001d5a:	f7fe fdd9 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4851      	ldr	r0, [pc, #324]	; (8001eb8 <MX_GPIO_Init+0x2e8>)
 8001d72:	f7fe fdcd 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor2_Pin;
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor2_GPIO_Port, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	4846      	ldr	r0, [pc, #280]	; (8001ea4 <MX_GPIO_Init+0x2d4>)
 8001d8a:	f7fe fdc1 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001da0:	2305      	movs	r3, #5
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4843      	ldr	r0, [pc, #268]	; (8001eb8 <MX_GPIO_Init+0x2e8>)
 8001dac:	f7fe fdb0 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001db0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001db4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4838      	ldr	r0, [pc, #224]	; (8001eac <MX_GPIO_Init+0x2dc>)
 8001dca:	f7fe fda1 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001dce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001de0:	2306      	movs	r3, #6
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	482f      	ldr	r0, [pc, #188]	; (8001ea8 <MX_GPIO_Init+0x2d8>)
 8001dec:	f7fe fd90 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	4619      	mov	r1, r3
 8001e04:	482b      	ldr	r0, [pc, #172]	; (8001eb4 <MX_GPIO_Init+0x2e4>)
 8001e06:	f7fe fd83 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001e0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	4823      	ldr	r0, [pc, #140]	; (8001eb4 <MX_GPIO_Init+0x2e4>)
 8001e28:	f7fe fd72 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor1_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor1_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	481b      	ldr	r0, [pc, #108]	; (8001eac <MX_GPIO_Init+0x2dc>)
 8001e40:	f7fe fd66 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e44:	2320      	movs	r3, #32
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4815      	ldr	r0, [pc, #84]	; (8001eac <MX_GPIO_Init+0x2dc>)
 8001e58:	f7fe fd5a 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e5c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e62:	2312      	movs	r3, #18
 8001e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	480f      	ldr	r0, [pc, #60]	; (8001eb8 <MX_GPIO_Init+0x2e8>)
 8001e7a:	f7fe fd49 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_GPIO_Init+0x2e0>)
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <MX_GPIO_Init+0x2d4>)
 8001e92:	f7fe fd3d 	bl	8000910 <HAL_GPIO_Init>

}
 8001e96:	bf00      	nop
 8001e98:	3730      	adds	r7, #48	; 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	10120000 	.word	0x10120000
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400

08001ebc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ece:	f7fe fc1d 	bl	800070c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40000c00 	.word	0x40000c00

08001ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HAL_MspInit+0x4c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <HAL_MspInit+0x4c>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f04:	6453      	str	r3, [r2, #68]	; 0x44
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_MspInit+0x4c>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_MspInit+0x4c>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001f2e:	f002 f9b7 	bl	80042a0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8001f50:	2200      	movs	r2, #0
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	2032      	movs	r0, #50	; 0x32
 8001f56:	f7fe fcb1 	bl	80008bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8001f5a:	2032      	movs	r0, #50	; 0x32
 8001f5c:	f7fe fcca 	bl	80008f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <HAL_InitTick+0xa4>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_InitTick+0xa4>)
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_InitTick+0xa4>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f7c:	f107 0210 	add.w	r2, r7, #16
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fadc 	bl	8001544 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f8c:	f7ff fac6 	bl	800151c <HAL_RCC_GetPCLK1Freq>
 8001f90:	4603      	mov	r3, r0
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_InitTick+0xa8>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0c9b      	lsrs	r3, r3, #18
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_InitTick+0xac>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <HAL_InitTick+0xb0>)
 8001fa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_InitTick+0xac>)
 8001fac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_InitTick+0xac>)
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_InitTick+0xac>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_InitTick+0xac>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <HAL_InitTick+0xac>)
 8001fc6:	f7ff faef 	bl	80015a8 <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001fd0:	4806      	ldr	r0, [pc, #24]	; (8001fec <HAL_InitTick+0xac>)
 8001fd2:	f7ff fb1e 	bl	8001612 <HAL_TIM_Base_Start_IT>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3730      	adds	r7, #48	; 0x30
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	431bde83 	.word	0x431bde83
 8001fec:	20014370 	.word	0x20014370
 8001ff0:	40000c00 	.word	0x40000c00

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <MemManage_Handler+0x4>

0800200e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler+0x4>

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <TIM5_IRQHandler+0x10>)
 800202e:	f7ff fb14 	bl	800165a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20014370 	.word	0x20014370

0800203c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <SystemInit+0x28>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <SystemInit+0x28>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SystemInit+0x28>)
 8002052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002056:	609a      	str	r2, [r3, #8]
#endif
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800206c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800206e:	e003      	b.n	8002078 <LoopCopyDataInit>

08002070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002076:	3104      	adds	r1, #4

08002078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002078:	480b      	ldr	r0, [pc, #44]	; (80020a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800207c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800207e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002080:	d3f6      	bcc.n	8002070 <CopyDataInit>
  ldr  r2, =_sbss
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002084:	e002      	b.n	800208c <LoopFillZerobss>

08002086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002088:	f842 3b04 	str.w	r3, [r2], #4

0800208c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800208e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002090:	d3f9      	bcc.n	8002086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002092:	f7ff ffd3 	bl	800203c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002096:	f004 f96f 	bl	8006378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209a:	f7ff fcc3 	bl	8001a24 <main>
  bx  lr    
 800209e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020a4:	08006578 	.word	0x08006578
  ldr  r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020ac:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80020b0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80020b4:	20014498 	.word	0x20014498

080020b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC_IRQHandler>

080020ba <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f103 0208 	add.w	r2, r3, #8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f04f 32ff 	mov.w	r2, #4294967295
 80020d2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 0208 	add.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f103 0208 	add.w	r2, r3, #8
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002172:	d103      	bne.n	800217c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e00c      	b.n	8002196 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3308      	adds	r3, #8
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e002      	b.n	800218a <vListInsert+0x2e>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	d2f6      	bcs.n	8002184 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6892      	ldr	r2, [r2, #8]
 80021e4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6852      	ldr	r2, [r2, #4]
 80021ee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d103      	bne.n	8002202 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <xQueueGenericReset+0x28>
 8002238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	e7fe      	b.n	800224a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 800224c:	f002 f8a2 	bl	8004394 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	68f9      	ldr	r1, [r7, #12]
 800225a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	441a      	add	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	3b01      	subs	r3, #1
 800227e:	68f9      	ldr	r1, [r7, #12]
 8002280:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	441a      	add	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	22ff      	movs	r2, #255	; 0xff
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d114      	bne.n	80022cc <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d01a      	beq.n	80022e0 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3310      	adds	r3, #16
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 f912 	bl	80034d8 <xTaskRemoveFromEventList>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <xQueueGenericReset+0xcc>)
 80022bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	e009      	b.n	80022e0 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3310      	adds	r3, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fef2 	bl	80020ba <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3324      	adds	r3, #36	; 0x24
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff feed 	bl	80020ba <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80022e0:	f002 f886 	bl	80043f0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000ed04 	.word	0xe000ed04

080022f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	; 0x30
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <xQueueGenericCreate+0x28>
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e7fe      	b.n	800231a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <xQueueGenericCreate+0x46>
 800232c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d101      	bne.n	800233e <xQueueGenericCreate+0x4a>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <xQueueGenericCreate+0x4c>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <xQueueGenericCreate+0x64>
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e7fe      	b.n	8002356 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800235e:	d909      	bls.n	8002374 <xQueueGenericCreate+0x80>
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e7fe      	b.n	8002372 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	3350      	adds	r3, #80	; 0x50
 8002378:	4618      	mov	r0, r3
 800237a:	f002 f92b 	bl	80045d4 <pvPortMalloc>
 800237e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3350      	adds	r3, #80	; 0x50
 800238e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002390:	79fa      	ldrb	r2, [r7, #7]
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f805 	bl	80023ac <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
    }
 80023a4:	4618      	mov	r0, r3
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e002      	b.n	80023ce <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023da:	2101      	movs	r1, #1
 80023dc:	69b8      	ldr	r0, [r7, #24]
 80023de:	f7ff ff21 	bl	8002224 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	2073      	movs	r0, #115	; 0x73
 80023f2:	f003 f8ef 	bl	80055d4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b090      	sub	sp, #64	; 0x40
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <xQueueGenericSend+0x30>
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
 800242e:	e7fe      	b.n	800242e <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <xQueueGenericSend+0x3e>
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <xQueueGenericSend+0x42>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <xQueueGenericSend+0x44>
 8002442:	2300      	movs	r3, #0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <xQueueGenericSend+0x5c>
 8002448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
 800245a:	e7fe      	b.n	800245a <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d103      	bne.n	800246a <xQueueGenericSend+0x6a>
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <xQueueGenericSend+0x6e>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueGenericSend+0x70>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <xQueueGenericSend+0x88>
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	e7fe      	b.n	8002486 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002488:	f001 f9c2 	bl	8003810 <xTaskGetSchedulerState>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <xQueueGenericSend+0x98>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <xQueueGenericSend+0x9c>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <xQueueGenericSend+0x9e>
 800249c:	2300      	movs	r3, #0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <xQueueGenericSend+0xb6>
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	e7fe      	b.n	80024b4 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024b6:	f001 ff6d 	bl	8004394 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <xQueueGenericSend+0xcc>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d136      	bne.n	800253a <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fe0a 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	460b      	mov	r3, r1
 80024de:	4601      	mov	r1, r0
 80024e0:	205a      	movs	r0, #90	; 0x5a
 80024e2:	f003 f8ed 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ec:	f000 fa78 	bl	80029e0 <prvCopyDataToQueue>
 80024f0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	3324      	adds	r3, #36	; 0x24
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 ffea 	bl	80034d8 <xTaskRemoveFromEventList>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d013      	beq.n	8002532 <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800250a:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <xQueueGenericSend+0x240>)
 800250c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	e00a      	b.n	8002532 <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <xQueueGenericSend+0x240>)
 8002524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002532:	f001 ff5d 	bl	80043f0 <vPortExitCritical>
                return pdPASS;
 8002536:	2301      	movs	r3, #1
 8002538:	e07d      	b.n	8002636 <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d110      	bne.n	8002562 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002540:	f001 ff56 	bl	80043f0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fdce 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	460b      	mov	r3, r1
 8002556:	4601      	mov	r1, r0
 8002558:	205a      	movs	r0, #90	; 0x5a
 800255a:	f003 f8b1 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800255e:	2300      	movs	r3, #0
 8002560:	e069      	b.n	8002636 <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4618      	mov	r0, r3
 800256e:	f001 f819 	bl	80035a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002572:	2301      	movs	r3, #1
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002576:	f001 ff3b 	bl	80043f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800257a:	f000 fd67 	bl	800304c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800257e:	f001 ff09 	bl	8004394 <vPortEnterCritical>
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d103      	bne.n	8002598 <xQueueGenericSend+0x198>
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d103      	bne.n	80025ae <xQueueGenericSend+0x1ae>
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ae:	f001 ff1f 	bl	80043f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025b2:	1d3a      	adds	r2, r7, #4
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 f808 	bl	80035d0 <xTaskCheckForTimeOut>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d124      	bne.n	8002610 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c8:	f000 fb02 	bl	8002bd0 <prvIsQueueFull>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d018      	beq.n	8002604 <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	3310      	adds	r3, #16
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 ff2a 	bl	8003434 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80025e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e2:	f000 fa8d 	bl	8002b00 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80025e6:	f000 fd3f 	bl	8003068 <xTaskResumeAll>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f af62 	bne.w	80024b6 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <xQueueGenericSend+0x240>)
 80025f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	e758      	b.n	80024b6 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002606:	f000 fa7b 	bl	8002b00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800260a:	f000 fd2d 	bl	8003068 <xTaskResumeAll>
 800260e:	e752      	b.n	80024b6 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002612:	f000 fa75 	bl	8002b00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002616:	f000 fd27 	bl	8003068 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	4618      	mov	r0, r3
 800261e:	f003 fd63 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	460b      	mov	r3, r1
 800262c:	4601      	mov	r1, r0
 800262e:	205a      	movs	r0, #90	; 0x5a
 8002630:	f003 f846 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002634:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002636:	4618      	mov	r0, r3
 8002638:	3738      	adds	r7, #56	; 0x38
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000ed04 	.word	0xe000ed04

08002644 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b090      	sub	sp, #64	; 0x40
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <xQueueGenericSendFromISR+0x2c>
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
 800266e:	e7fe      	b.n	800266e <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <xQueueGenericSendFromISR+0x3a>
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <xQueueGenericSendFromISR+0x3e>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <xQueueGenericSendFromISR+0x40>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <xQueueGenericSendFromISR+0x58>
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	e7fe      	b.n	800269a <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d103      	bne.n	80026aa <xQueueGenericSendFromISR+0x66>
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <xQueueGenericSendFromISR+0x6a>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <xQueueGenericSendFromISR+0x6c>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <xQueueGenericSendFromISR+0x84>
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	e7fe      	b.n	80026c6 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026c8:	f001 ff46 	bl	8004558 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80026cc:	f3ef 8211 	mrs	r2, BASEPRI
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	61fa      	str	r2, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80026e4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d302      	bcc.n	80026fa <xQueueGenericSendFromISR+0xb6>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d147      	bne.n	800278a <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fceb 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 8002712:	4601      	mov	r1, r0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	461a      	mov	r2, r3
 8002718:	2060      	movs	r0, #96	; 0x60
 800271a:	f002 ff01 	bl	8005520 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002724:	f000 f95c 	bl	80029e0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002728:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d112      	bne.n	8002758 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d024      	beq.n	8002784 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	3324      	adds	r3, #36	; 0x24
 800273e:	4618      	mov	r0, r3
 8002740:	f000 feca 	bl	80034d8 <xTaskRemoveFromEventList>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01c      	beq.n	8002784 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d019      	beq.n	8002784 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e015      	b.n	8002784 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002758:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800275c:	2b7f      	cmp	r3, #127	; 0x7f
 800275e:	d109      	bne.n	8002774 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e7fe      	b.n	8002772 <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002774:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002778:	3301      	adds	r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	b25a      	sxtb	r2, r3
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002784:	2301      	movs	r3, #1
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002788:	e00b      	b.n	80027a2 <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fcab 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 8002792:	4601      	mov	r1, r0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	461a      	mov	r2, r3
 8002798:	2060      	movs	r0, #96	; 0x60
 800279a:	f002 fec1 	bl	8005520 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3740      	adds	r7, #64	; 0x40
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b08f      	sub	sp, #60	; 0x3c
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <xQueueReceive+0x2e>
        __asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	e7fe      	b.n	80027e4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <xQueueReceive+0x3c>
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <xQueueReceive+0x40>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <xQueueReceive+0x42>
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <xQueueReceive+0x5a>
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	e7fe      	b.n	8002810 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002812:	f000 fffd 	bl	8003810 <xTaskGetSchedulerState>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <xQueueReceive+0x6a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <xQueueReceive+0x6e>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <xQueueReceive+0x70>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <xQueueReceive+0x88>
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e7fe      	b.n	800283e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002840:	f001 fda8 	bl	8004394 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	2b00      	cmp	r3, #0
 800284e:	d031      	beq.n	80028b4 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002854:	f000 f92e 	bl	8002ab4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fc44 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 8002860:	4604      	mov	r4, r0
 8002862:	2000      	movs	r0, #0
 8002864:	f003 fc40 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 8002868:	4601      	mov	r1, r0
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	2301      	movs	r3, #1
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	460a      	mov	r2, r1
 8002874:	4621      	mov	r1, r4
 8002876:	205c      	movs	r0, #92	; 0x5c
 8002878:	f002 ff22 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00f      	beq.n	80028ac <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	3310      	adds	r3, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fe21 	bl	80034d8 <xTaskRemoveFromEventList>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800289c:	4b4f      	ldr	r3, [pc, #316]	; (80029dc <xQueueReceive+0x224>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028ac:	f001 fda0 	bl	80043f0 <vPortExitCritical>
                return pdPASS;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e08e      	b.n	80029d2 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d115      	bne.n	80028e6 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028ba:	f001 fd99 	bl	80043f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 fc11 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 80028c6:	4604      	mov	r4, r0
 80028c8:	2000      	movs	r0, #0
 80028ca:	f003 fc0d 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 80028ce:	4601      	mov	r1, r0
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	2301      	movs	r3, #1
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	4613      	mov	r3, r2
 80028d8:	460a      	mov	r2, r1
 80028da:	4621      	mov	r1, r4
 80028dc:	205c      	movs	r0, #92	; 0x5c
 80028de:	f002 feef 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e075      	b.n	80029d2 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fe57 	bl	80035a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028f6:	2301      	movs	r3, #1
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028fa:	f001 fd79 	bl	80043f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028fe:	f000 fba5 	bl	800304c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002902:	f001 fd47 	bl	8004394 <vPortEnterCritical>
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800290c:	b25b      	sxtb	r3, r3
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d103      	bne.n	800291c <xQueueReceive+0x164>
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002922:	b25b      	sxtb	r3, r3
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d103      	bne.n	8002932 <xQueueReceive+0x17a>
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002932:	f001 fd5d 	bl	80043f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002936:	1d3a      	adds	r2, r7, #4
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fe46 	bl	80035d0 <xTaskCheckForTimeOut>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d124      	bne.n	8002994 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800294a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294c:	f000 f92a 	bl	8002ba4 <prvIsQueueEmpty>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d018      	beq.n	8002988 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	3324      	adds	r3, #36	; 0x24
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fd68 	bl	8003434 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002966:	f000 f8cb 	bl	8002b00 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800296a:	f000 fb7d 	bl	8003068 <xTaskResumeAll>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	f47f af65 	bne.w	8002840 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <xQueueReceive+0x224>)
 8002978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	e75b      	b.n	8002840 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800298a:	f000 f8b9 	bl	8002b00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800298e:	f000 fb6b 	bl	8003068 <xTaskResumeAll>
 8002992:	e755      	b.n	8002840 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002996:	f000 f8b3 	bl	8002b00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800299a:	f000 fb65 	bl	8003068 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800299e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a0:	f000 f900 	bl	8002ba4 <prvIsQueueEmpty>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f43f af4a 	beq.w	8002840 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fb9a 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 80029b4:	4604      	mov	r4, r0
 80029b6:	2000      	movs	r0, #0
 80029b8:	f003 fb96 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 80029bc:	4601      	mov	r1, r0
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	2301      	movs	r3, #1
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	460a      	mov	r2, r1
 80029c8:	4621      	mov	r1, r4
 80029ca:	205c      	movs	r0, #92	; 0x5c
 80029cc:	f002 fe78 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80029d0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3734      	adds	r7, #52	; 0x34
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d14d      	bne.n	8002aa2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 ff1e 	bl	800384c <xTaskPriorityDisinherit>
 8002a10:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e043      	b.n	8002aa2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d119      	bne.n	8002a54 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6858      	ldr	r0, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	f003 fcd7 	bl	80063de <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	441a      	add	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d32b      	bcc.n	8002aa2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	e026      	b.n	8002aa2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68d8      	ldr	r0, [r3, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	f003 fcbd 	bl	80063de <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	441a      	add	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	425b      	negs	r3, r3
 8002a8a:	441a      	add	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d105      	bne.n	8002aa2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002aaa:	697b      	ldr	r3, [r7, #20]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d018      	beq.n	8002af8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	441a      	add	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d303      	bcc.n	8002ae8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68d9      	ldr	r1, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	461a      	mov	r2, r3
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	f003 fc73 	bl	80063de <memcpy>
    }
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b08:	f001 fc44 	bl	8004394 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b12:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b14:	e011      	b.n	8002b3a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3324      	adds	r3, #36	; 0x24
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fcd8 	bl	80034d8 <xTaskRemoveFromEventList>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b2e:	f000 fdb3 	bl	8003698 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	dce9      	bgt.n	8002b16 <prvUnlockQueue+0x16>
 8002b42:	e000      	b.n	8002b46 <prvUnlockQueue+0x46>
                        break;
 8002b44:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b4e:	f001 fc4f 	bl	80043f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b52:	f001 fc1f 	bl	8004394 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b5c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b5e:	e011      	b.n	8002b84 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d012      	beq.n	8002b8e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fcb3 	bl	80034d8 <xTaskRemoveFromEventList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b78:	f000 fd8e 	bl	8003698 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	dce9      	bgt.n	8002b60 <prvUnlockQueue+0x60>
 8002b8c:	e000      	b.n	8002b90 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b8e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	22ff      	movs	r2, #255	; 0xff
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b98:	f001 fc2a 	bl	80043f0 <vPortExitCritical>
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bac:	f001 fbf2 	bl	8004394 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e001      	b.n	8002bc2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bc2:	f001 fc15 	bl	80043f0 <vPortExitCritical>

    return xReturn;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bd8:	f001 fbdc 	bl	8004394 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d102      	bne.n	8002bee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e001      	b.n	8002bf2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bf2:	f001 fbfd 	bl	80043f0 <vPortExitCritical>

    return xReturn;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e01e      	b.n	8002c4e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c10:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <vQueueAddToRegistry+0x5c>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d115      	bne.n	8002c48 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c1c:	490f      	ldr	r1, [pc, #60]	; (8002c5c <vQueueAddToRegistry+0x5c>)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c26:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <vQueueAddToRegistry+0x5c>)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fa57 	bl	80060e8 <SEGGER_SYSVIEW_ShrinkId>
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2071      	movs	r0, #113	; 0x71
 8002c42:	f002 fc6d 	bl	8005520 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c46:	e005      	b.n	8002c54 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b07      	cmp	r3, #7
 8002c52:	d9dd      	bls.n	8002c10 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200143b0 	.word	0x200143b0

08002c60 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c70:	f001 fb90 	bl	8004394 <vPortEnterCritical>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d103      	bne.n	8002c8a <vQueueWaitForMessageRestricted+0x2a>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d103      	bne.n	8002ca0 <vQueueWaitForMessageRestricted+0x40>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca0:	f001 fba6 	bl	80043f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fbe1 	bl	800347c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff20 	bl	8002b00 <prvUnlockQueue>
    }
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af04      	add	r7, sp, #16
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fc79 	bl	80045d4 <pvPortMalloc>
 8002ce2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00e      	beq.n	8002d08 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cea:	2058      	movs	r0, #88	; 0x58
 8002cec:	f001 fc72 	bl	80045d4 <pvPortMalloc>
 8002cf0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cfe:	e005      	b.n	8002d0c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d00:	6978      	ldr	r0, [r7, #20]
 8002d02:	f001 fd43 	bl	800478c <vPortFree>
 8002d06:	e001      	b.n	8002d0c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d013      	beq.n	8002d3a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9303      	str	r3, [sp, #12]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	9302      	str	r3, [sp, #8]
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f80e 	bl	8002d4a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d2e:	69f8      	ldr	r0, [r7, #28]
 8002d30:	f000 f8a0 	bl	8002e74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d34:	2301      	movs	r3, #1
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e002      	b.n	8002d40 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d40:	69bb      	ldr	r3, [r7, #24]
    }
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b088      	sub	sp, #32
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	461a      	mov	r2, r3
 8002d62:	21a5      	movs	r1, #165	; 0xa5
 8002d64:	f003 fb46 	bl	80063f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d72:	3b01      	subs	r3, #1
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f023 0307 	bic.w	r3, r3, #7
 8002d80:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <prvInitialiseNewTask+0x56>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e7fe      	b.n	8002d9e <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01f      	beq.n	8002de6 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e012      	b.n	8002dd2 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	7819      	ldrb	r1, [r3, #0]
 8002db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	3334      	adds	r3, #52	; 0x34
 8002dbc:	460a      	mov	r2, r1
 8002dbe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	d9e9      	bls.n	8002dac <prvInitialiseNewTask+0x62>
 8002dd8:	e000      	b.n	8002ddc <prvInitialiseNewTask+0x92>
            {
                break;
 8002dda:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002de4:	e003      	b.n	8002dee <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d901      	bls.n	8002df8 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002df4:	2304      	movs	r3, #4
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e02:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	2200      	movs	r2, #0
 8002e08:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f973 	bl	80020fa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	3318      	adds	r3, #24
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff f96e 	bl	80020fa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e22:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	f1c3 0205 	rsb	r2, r3, #5
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	3350      	adds	r3, #80	; 0x50
 8002e38:	2204      	movs	r2, #4
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fad9 	bl	80063f4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	3354      	adds	r3, #84	; 0x54
 8002e46:	2201      	movs	r2, #1
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fad2 	bl	80063f4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	69b8      	ldr	r0, [r7, #24]
 8002e56:	f001 f8fd 	bl	8004054 <pxPortInitialiseStack>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e6c:	bf00      	nop
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e74:	b5b0      	push	{r4, r5, r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e7c:	f001 fa8a 	bl	8004394 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e80:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <prvAddNewTaskToReadyList+0xfc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3301      	adds	r3, #1
 8002e86:	4a3a      	ldr	r2, [pc, #232]	; (8002f70 <prvAddNewTaskToReadyList+0xfc>)
 8002e88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <prvAddNewTaskToReadyList+0x100>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e92:	4a38      	ldr	r2, [pc, #224]	; (8002f74 <prvAddNewTaskToReadyList+0x100>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e98:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <prvAddNewTaskToReadyList+0xfc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d110      	bne.n	8002ec2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ea0:	f000 fc1e 	bl	80036e0 <prvInitialiseTaskLists>
 8002ea4:	e00d      	b.n	8002ec2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ea6:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <prvAddNewTaskToReadyList+0x104>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <prvAddNewTaskToReadyList+0x100>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d802      	bhi.n	8002ec2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ebc:	4a2d      	ldr	r2, [pc, #180]	; (8002f74 <prvAddNewTaskToReadyList+0x100>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <prvAddNewTaskToReadyList+0x108>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <prvAddNewTaskToReadyList+0x108>)
 8002eca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <prvAddNewTaskToReadyList+0x108>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <prvAddNewTaskToReadyList+0x94>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 ffdd 	bl	8005e9c <SEGGER_SYSVIEW_OnTaskCreate>
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461c      	mov	r4, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	1ae3      	subs	r3, r4, r3
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	462b      	mov	r3, r5
 8002f04:	f001 fe06 	bl	8004b14 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f84a 	bl	8005fa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	2201      	movs	r2, #1
 8002f16:	409a      	lsls	r2, r3
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <prvAddNewTaskToReadyList+0x10c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <prvAddNewTaskToReadyList+0x10c>)
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <prvAddNewTaskToReadyList+0x110>)
 8002f30:	441a      	add	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3304      	adds	r3, #4
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f7ff f8eb 	bl	8002114 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f3e:	f001 fa57 	bl	80043f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <prvAddNewTaskToReadyList+0x104>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00e      	beq.n	8002f68 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <prvAddNewTaskToReadyList+0x100>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d207      	bcs.n	8002f68 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <prvAddNewTaskToReadyList+0x114>)
 8002f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f70:	2000010c 	.word	0x2000010c
 8002f74:	20000034 	.word	0x20000034
 8002f78:	20000118 	.word	0x20000118
 8002f7c:	20000128 	.word	0x20000128
 8002f80:	20000114 	.word	0x20000114
 8002f84:	20000038 	.word	0x20000038
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <vTaskStartScheduler+0xa0>)
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	2300      	movs	r3, #0
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2282      	movs	r2, #130	; 0x82
 8002f9e:	4924      	ldr	r1, [pc, #144]	; (8003030 <vTaskStartScheduler+0xa4>)
 8002fa0:	4824      	ldr	r0, [pc, #144]	; (8003034 <vTaskStartScheduler+0xa8>)
 8002fa2:	f7ff fe91 	bl	8002cc8 <xTaskCreate>
 8002fa6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d102      	bne.n	8002fb4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002fae:	f000 fd43 	bl	8003a38 <xTimerCreateTimerTask>
 8002fb2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d123      	bne.n	8003002 <vTaskStartScheduler+0x76>
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <vTaskStartScheduler+0xac>)
 8002fce:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <vTaskStartScheduler+0xb0>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <vTaskStartScheduler+0xb4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <vTaskStartScheduler+0xb8>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <vTaskStartScheduler+0xa0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d102      	bne.n	8002ff2 <vTaskStartScheduler+0x66>
 8002fec:	f002 ff3a 	bl	8005e64 <SEGGER_SYSVIEW_OnIdle>
 8002ff0:	e004      	b.n	8002ffc <vTaskStartScheduler+0x70>
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <vTaskStartScheduler+0xb8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 ff92 	bl	8005f20 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ffc:	f001 f8b2 	bl	8004164 <xPortStartScheduler>
 8003000:	e00d      	b.n	800301e <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d109      	bne.n	800301e <vTaskStartScheduler+0x92>
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	e7fe      	b.n	800301c <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <vTaskStartScheduler+0xbc>)
 8003020:	681b      	ldr	r3, [r3, #0]
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000130 	.word	0x20000130
 8003030:	08006458 	.word	0x08006458
 8003034:	080036b1 	.word	0x080036b1
 8003038:	2000012c 	.word	0x2000012c
 800303c:	20000118 	.word	0x20000118
 8003040:	20000110 	.word	0x20000110
 8003044:	20000034 	.word	0x20000034
 8003048:	2000000c 	.word	0x2000000c

0800304c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <vTaskSuspendAll+0x18>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	4a03      	ldr	r2, [pc, #12]	; (8003064 <vTaskSuspendAll+0x18>)
 8003058:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	20000134 	.word	0x20000134

08003068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003076:	4b43      	ldr	r3, [pc, #268]	; (8003184 <xTaskResumeAll+0x11c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <xTaskResumeAll+0x2a>
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	e7fe      	b.n	8003090 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003092:	f001 f97f 	bl	8004394 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <xTaskResumeAll+0x11c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3b01      	subs	r3, #1
 800309c:	4a39      	ldr	r2, [pc, #228]	; (8003184 <xTaskResumeAll+0x11c>)
 800309e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030a0:	4b38      	ldr	r3, [pc, #224]	; (8003184 <xTaskResumeAll+0x11c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d165      	bne.n	8003174 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030a8:	4b37      	ldr	r3, [pc, #220]	; (8003188 <xTaskResumeAll+0x120>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d061      	beq.n	8003174 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b0:	e032      	b.n	8003118 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <xTaskResumeAll+0x124>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3318      	adds	r3, #24
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f885 	bl	80021ce <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff f880 	bl	80021ce <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f002 ff67 	bl	8005fa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	2201      	movs	r2, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <xTaskResumeAll+0x128>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <xTaskResumeAll+0x128>)
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <xTaskResumeAll+0x12c>)
 80030f6:	441a      	add	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7ff f808 	bl	8002114 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <xTaskResumeAll+0x130>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <xTaskResumeAll+0x134>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <xTaskResumeAll+0x124>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1c8      	bne.n	80030b2 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003126:	f000 fb57 	bl	80037d8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <xTaskResumeAll+0x138>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003136:	f000 f859 	bl	80031ec <xTaskIncrementTick>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <xTaskResumeAll+0x134>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3b01      	subs	r3, #1
 800314a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f1      	bne.n	8003136 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8003152:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <xTaskResumeAll+0x138>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003158:	4b10      	ldr	r3, [pc, #64]	; (800319c <xTaskResumeAll+0x134>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <xTaskResumeAll+0x13c>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003174:	f001 f93c 	bl	80043f0 <vPortExitCritical>

    return xAlreadyYielded;
 8003178:	68bb      	ldr	r3, [r7, #8]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000134 	.word	0x20000134
 8003188:	2000010c 	.word	0x2000010c
 800318c:	200000cc 	.word	0x200000cc
 8003190:	20000114 	.word	0x20000114
 8003194:	20000038 	.word	0x20000038
 8003198:	20000034 	.word	0x20000034
 800319c:	20000120 	.word	0x20000120
 80031a0:	2000011c 	.word	0x2000011c
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <xTaskGetTickCount+0x1c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000110 	.word	0x20000110

080031c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ce:	f001 f9c3 	bl	8004558 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <xTaskGetTickCountFromISR+0x20>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031dc:	683b      	ldr	r3, [r7, #0]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000110 	.word	0x20000110

080031ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f6:	4b50      	ldr	r3, [pc, #320]	; (8003338 <xTaskIncrementTick+0x14c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8091 	bne.w	8003322 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003200:	4b4e      	ldr	r3, [pc, #312]	; (800333c <xTaskIncrementTick+0x150>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003208:	4a4c      	ldr	r2, [pc, #304]	; (800333c <xTaskIncrementTick+0x150>)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11f      	bne.n	8003254 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003214:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <xTaskIncrementTick+0x154>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <xTaskIncrementTick+0x46>
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	e7fe      	b.n	8003230 <xTaskIncrementTick+0x44>
 8003232:	4b43      	ldr	r3, [pc, #268]	; (8003340 <xTaskIncrementTick+0x154>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	4b42      	ldr	r3, [pc, #264]	; (8003344 <xTaskIncrementTick+0x158>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a40      	ldr	r2, [pc, #256]	; (8003340 <xTaskIncrementTick+0x154>)
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4a40      	ldr	r2, [pc, #256]	; (8003344 <xTaskIncrementTick+0x158>)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b40      	ldr	r3, [pc, #256]	; (8003348 <xTaskIncrementTick+0x15c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	4a3e      	ldr	r2, [pc, #248]	; (8003348 <xTaskIncrementTick+0x15c>)
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	f000 fac2 	bl	80037d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003254:	4b3d      	ldr	r3, [pc, #244]	; (800334c <xTaskIncrementTick+0x160>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	429a      	cmp	r2, r3
 800325c:	d34c      	bcc.n	80032f8 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800325e:	4b38      	ldr	r3, [pc, #224]	; (8003340 <xTaskIncrementTick+0x154>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003268:	4b38      	ldr	r3, [pc, #224]	; (800334c <xTaskIncrementTick+0x160>)
 800326a:	f04f 32ff 	mov.w	r2, #4294967295
 800326e:	601a      	str	r2, [r3, #0]
                    break;
 8003270:	e042      	b.n	80032f8 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <xTaskIncrementTick+0x154>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d203      	bcs.n	8003292 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800328a:	4a30      	ldr	r2, [pc, #192]	; (800334c <xTaskIncrementTick+0x160>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003290:	e032      	b.n	80032f8 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3304      	adds	r3, #4
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe ff99 	bl	80021ce <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	3318      	adds	r3, #24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe ff90 	bl	80021ce <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f002 fe77 	bl	8005fa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	2201      	movs	r2, #1
 80032bc:	409a      	lsls	r2, r3
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <xTaskIncrementTick+0x164>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	4a22      	ldr	r2, [pc, #136]	; (8003350 <xTaskIncrementTick+0x164>)
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <xTaskIncrementTick+0x168>)
 80032d6:	441a      	add	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7fe ff18 	bl	8002114 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <xTaskIncrementTick+0x16c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d3b5      	bcc.n	800325e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f6:	e7b2      	b.n	800325e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <xTaskIncrementTick+0x16c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	4915      	ldr	r1, [pc, #84]	; (8003354 <xTaskIncrementTick+0x168>)
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d901      	bls.n	8003314 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <xTaskIncrementTick+0x170>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 800331c:	2301      	movs	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	e004      	b.n	800332c <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <xTaskIncrementTick+0x174>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3301      	adds	r3, #1
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <xTaskIncrementTick+0x174>)
 800332a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800332c:	697b      	ldr	r3, [r7, #20]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000134 	.word	0x20000134
 800333c:	20000110 	.word	0x20000110
 8003340:	200000c4 	.word	0x200000c4
 8003344:	200000c8 	.word	0x200000c8
 8003348:	20000124 	.word	0x20000124
 800334c:	2000012c 	.word	0x2000012c
 8003350:	20000114 	.word	0x20000114
 8003354:	20000038 	.word	0x20000038
 8003358:	20000034 	.word	0x20000034
 800335c:	20000120 	.word	0x20000120
 8003360:	2000011c 	.word	0x2000011c

08003364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800336a:	4b2c      	ldr	r3, [pc, #176]	; (800341c <vTaskSwitchContext+0xb8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <vTaskSwitchContext+0xbc>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003378:	e04c      	b.n	8003414 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <vTaskSwitchContext+0xbc>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003380:	4b28      	ldr	r3, [pc, #160]	; (8003424 <vTaskSwitchContext+0xc0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	fab3 f383 	clz	r3, r3
 800338c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	f1c3 031f 	rsb	r3, r3, #31
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	4924      	ldr	r1, [pc, #144]	; (8003428 <vTaskSwitchContext+0xc4>)
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <vTaskSwitchContext+0x5a>
        __asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	e7fe      	b.n	80033bc <vTaskSwitchContext+0x58>
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4a17      	ldr	r2, [pc, #92]	; (8003428 <vTaskSwitchContext+0xc4>)
 80033ca:	4413      	add	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	3308      	adds	r3, #8
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d104      	bne.n	80033ee <vTaskSwitchContext+0x8a>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <vTaskSwitchContext+0xc8>)
 80033f6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <vTaskSwitchContext+0xc8>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <vTaskSwitchContext+0xcc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d102      	bne.n	800340a <vTaskSwitchContext+0xa6>
 8003404:	f002 fd2e 	bl	8005e64 <SEGGER_SYSVIEW_OnIdle>
}
 8003408:	e004      	b.n	8003414 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <vTaskSwitchContext+0xc8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f002 fd86 	bl	8005f20 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003414:	bf00      	nop
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000134 	.word	0x20000134
 8003420:	20000120 	.word	0x20000120
 8003424:	20000114 	.word	0x20000114
 8003428:	20000038 	.word	0x20000038
 800342c:	20000034 	.word	0x20000034
 8003430:	20000130 	.word	0x20000130

08003434 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <vTaskPlaceOnEventList+0x24>
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e7fe      	b.n	8003456 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <vTaskPlaceOnEventList+0x44>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3318      	adds	r3, #24
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe fe7b 	bl	800215c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003466:	2101      	movs	r1, #1
 8003468:	6838      	ldr	r0, [r7, #0]
 800346a:	f000 fa6d 	bl	8003948 <prvAddCurrentTaskToDelayedList>
}
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000034 	.word	0x20000034

0800347c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <vTaskPlaceOnEventListRestricted+0x26>
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e7fe      	b.n	80034a0 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <vTaskPlaceOnEventListRestricted+0x58>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3318      	adds	r3, #24
 80034a8:	4619      	mov	r1, r3
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7fe fe32 	bl	8002114 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80034bc:	2024      	movs	r0, #36	; 0x24
 80034be:	f001 ffd5 	bl	800546c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f000 fa3f 	bl	8003948 <prvAddCurrentTaskToDelayedList>
    }
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000034 	.word	0x20000034

080034d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <xTaskRemoveFromEventList+0x2a>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e7fe      	b.n	8003500 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	3318      	adds	r3, #24
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fe61 	bl	80021ce <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <xTaskRemoveFromEventList+0xb4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d120      	bne.n	8003556 <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	3304      	adds	r3, #4
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe fe58 	bl	80021ce <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4618      	mov	r0, r3
 8003522:	f002 fd3f 	bl	8005fa4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	2201      	movs	r2, #1
 800352c:	409a      	lsls	r2, r3
 800352e:	4b18      	ldr	r3, [pc, #96]	; (8003590 <xTaskRemoveFromEventList+0xb8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	4a16      	ldr	r2, [pc, #88]	; (8003590 <xTaskRemoveFromEventList+0xb8>)
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4a13      	ldr	r2, [pc, #76]	; (8003594 <xTaskRemoveFromEventList+0xbc>)
 8003546:	441a      	add	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7fe fde0 	bl	8002114 <vListInsertEnd>
 8003554:	e005      	b.n	8003562 <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3318      	adds	r3, #24
 800355a:	4619      	mov	r1, r3
 800355c:	480e      	ldr	r0, [pc, #56]	; (8003598 <xTaskRemoveFromEventList+0xc0>)
 800355e:	f7fe fdd9 	bl	8002114 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <xTaskRemoveFromEventList+0xc4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	429a      	cmp	r2, r3
 800356e:	d905      	bls.n	800357c <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003570:	2301      	movs	r3, #1
 8003572:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <xTaskRemoveFromEventList+0xc8>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e001      	b.n	8003580 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003580:	697b      	ldr	r3, [r7, #20]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000134 	.word	0x20000134
 8003590:	20000114 	.word	0x20000114
 8003594:	20000038 	.word	0x20000038
 8003598:	200000cc 	.word	0x200000cc
 800359c:	20000034 	.word	0x20000034
 80035a0:	20000120 	.word	0x20000120

080035a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <vTaskInternalSetTimeOutState+0x24>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <vTaskInternalSetTimeOutState+0x28>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	605a      	str	r2, [r3, #4]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	20000124 	.word	0x20000124
 80035cc:	20000110 	.word	0x20000110

080035d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <xTaskCheckForTimeOut+0x24>
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e7fe      	b.n	80035f2 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <xTaskCheckForTimeOut+0x3e>
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e7fe      	b.n	800360c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800360e:	f000 fec1 	bl	8004394 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <xTaskCheckForTimeOut+0xc0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362a:	d102      	bne.n	8003632 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e026      	b.n	8003680 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <xTaskCheckForTimeOut+0xc4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d00a      	beq.n	8003654 <xTaskCheckForTimeOut+0x84>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	429a      	cmp	r2, r3
 8003646:	d305      	bcc.n	8003654 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e015      	b.n	8003680 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	429a      	cmp	r2, r3
 800365c:	d20b      	bcs.n	8003676 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad2      	subs	r2, r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ff9a 	bl	80035a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e004      	b.n	8003680 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800367c:	2301      	movs	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003680:	f000 feb6 	bl	80043f0 <vPortExitCritical>

    return xReturn;
 8003684:	69fb      	ldr	r3, [r7, #28]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000110 	.word	0x20000110
 8003694:	20000124 	.word	0x20000124

08003698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <vTaskMissedYield+0x14>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	20000120 	.word	0x20000120

080036b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036b8:	f000 f852 	bl	8003760 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <prvIdleTask+0x28>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d9f9      	bls.n	80036b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <prvIdleTask+0x2c>)
 80036c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80036d4:	e7f0      	b.n	80036b8 <prvIdleTask+0x8>
 80036d6:	bf00      	nop
 80036d8:	20000038 	.word	0x20000038
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	e00c      	b.n	8003706 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <prvInitialiseTaskLists+0x60>)
 80036f8:	4413      	add	r3, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fcdd 	bl	80020ba <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3301      	adds	r3, #1
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d9ef      	bls.n	80036ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800370c:	480d      	ldr	r0, [pc, #52]	; (8003744 <prvInitialiseTaskLists+0x64>)
 800370e:	f7fe fcd4 	bl	80020ba <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <prvInitialiseTaskLists+0x68>)
 8003714:	f7fe fcd1 	bl	80020ba <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003718:	480c      	ldr	r0, [pc, #48]	; (800374c <prvInitialiseTaskLists+0x6c>)
 800371a:	f7fe fcce 	bl	80020ba <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800371e:	480c      	ldr	r0, [pc, #48]	; (8003750 <prvInitialiseTaskLists+0x70>)
 8003720:	f7fe fccb 	bl	80020ba <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003724:	480b      	ldr	r0, [pc, #44]	; (8003754 <prvInitialiseTaskLists+0x74>)
 8003726:	f7fe fcc8 	bl	80020ba <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <prvInitialiseTaskLists+0x78>)
 800372c:	4a05      	ldr	r2, [pc, #20]	; (8003744 <prvInitialiseTaskLists+0x64>)
 800372e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <prvInitialiseTaskLists+0x7c>)
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <prvInitialiseTaskLists+0x68>)
 8003734:	601a      	str	r2, [r3, #0]
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000038 	.word	0x20000038
 8003744:	2000009c 	.word	0x2000009c
 8003748:	200000b0 	.word	0x200000b0
 800374c:	200000cc 	.word	0x200000cc
 8003750:	200000e0 	.word	0x200000e0
 8003754:	200000f8 	.word	0x200000f8
 8003758:	200000c4 	.word	0x200000c4
 800375c:	200000c8 	.word	0x200000c8

08003760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003766:	e019      	b.n	800379c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003768:	f000 fe14 	bl	8004394 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <prvCheckTasksWaitingTermination+0x4c>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fd28 	bl	80021ce <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <prvCheckTasksWaitingTermination+0x50>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3b01      	subs	r3, #1
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <prvCheckTasksWaitingTermination+0x50>)
 8003786:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <prvCheckTasksWaitingTermination+0x54>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3b01      	subs	r3, #1
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <prvCheckTasksWaitingTermination+0x54>)
 8003790:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003792:	f000 fe2d 	bl	80043f0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f80e 	bl	80037b8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <prvCheckTasksWaitingTermination+0x54>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e1      	bne.n	8003768 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	200000e0 	.word	0x200000e0
 80037b0:	2000010c 	.word	0x2000010c
 80037b4:	200000f4 	.word	0x200000f4

080037b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 ffe1 	bl	800478c <vPortFree>
                vPortFree( pxTCB );
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 ffde 	bl	800478c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <prvResetNextTaskUnblockTime+0x30>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <prvResetNextTaskUnblockTime+0x34>)
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037ee:	e005      	b.n	80037fc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <prvResetNextTaskUnblockTime+0x30>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <prvResetNextTaskUnblockTime+0x34>)
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	200000c4 	.word	0x200000c4
 800380c:	2000012c 	.word	0x2000012c

08003810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <xTaskGetSchedulerState+0x34>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800381e:	2301      	movs	r3, #1
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	e008      	b.n	8003836 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003824:	4b08      	ldr	r3, [pc, #32]	; (8003848 <xTaskGetSchedulerState+0x38>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800382c:	2302      	movs	r3, #2
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	e001      	b.n	8003836 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003836:	687b      	ldr	r3, [r7, #4]
    }
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	20000118 	.word	0x20000118
 8003848:	20000134 	.word	0x20000134

0800384c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d066      	beq.n	8003930 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003862:	4b36      	ldr	r3, [pc, #216]	; (800393c <xTaskPriorityDisinherit+0xf0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	429a      	cmp	r2, r3
 800386a:	d009      	beq.n	8003880 <xTaskPriorityDisinherit+0x34>
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e7fe      	b.n	800387e <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <xTaskPriorityDisinherit+0x50>
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	e7fe      	b.n	800389a <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a0:	1e5a      	subs	r2, r3, #1
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d03e      	beq.n	8003930 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d13a      	bne.n	8003930 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3304      	adds	r3, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fc85 	bl	80021ce <uxListRemove>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	2201      	movs	r2, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43da      	mvns	r2, r3
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <xTaskPriorityDisinherit+0xf4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4013      	ands	r3, r2
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <xTaskPriorityDisinherit+0xf4>)
 80038de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4619      	mov	r1, r3
 80038e4:	204a      	movs	r0, #74	; 0x4a
 80038e6:	f001 fddf 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	f1c3 0205 	rsb	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	2201      	movs	r2, #1
 8003904:	409a      	lsls	r2, r3
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <xTaskPriorityDisinherit+0xf4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <xTaskPriorityDisinherit+0xf4>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a09      	ldr	r2, [pc, #36]	; (8003944 <xTaskPriorityDisinherit+0xf8>)
 800391e:	441a      	add	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7fe fbf4 	bl	8002114 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003930:	697b      	ldr	r3, [r7, #20]
    }
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000034 	.word	0x20000034
 8003940:	20000114 	.word	0x20000114
 8003944:	20000038 	.word	0x20000038

08003948 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003952:	4b32      	ldr	r3, [pc, #200]	; (8003a1c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3304      	adds	r3, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fc35 	bl	80021ce <uxListRemove>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2201      	movs	r2, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <prvAddCurrentTaskToDelayedList+0xdc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4013      	ands	r3, r2
 800397e:	4a29      	ldr	r2, [pc, #164]	; (8003a24 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003980:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d110      	bne.n	80039ac <prvAddCurrentTaskToDelayedList+0x64>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003990:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	211b      	movs	r1, #27
 8003996:	4618      	mov	r0, r3
 8003998:	f002 fb46 	bl	8006028 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4820      	ldr	r0, [pc, #128]	; (8003a28 <prvAddCurrentTaskToDelayedList+0xe0>)
 80039a6:	f7fe fbb5 	bl	8002114 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039aa:	e032      	b.n	8003a12 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039b4:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d20f      	bcs.n	80039e4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2104      	movs	r1, #4
 80039ca:	4618      	mov	r0, r3
 80039cc:	f002 fb2c 	bl	8006028 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xe4>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3304      	adds	r3, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f7fe fbbd 	bl	800215c <vListInsert>
}
 80039e2:	e016      	b.n	8003a12 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2104      	movs	r1, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f002 fb1c 	bl	8006028 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7fe fbad 	bl	800215c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d202      	bcs.n	8003a12 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a0c:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6013      	str	r3, [r2, #0]
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000110 	.word	0x20000110
 8003a20:	20000034 	.word	0x20000034
 8003a24:	20000114 	.word	0x20000114
 8003a28:	200000f8 	.word	0x200000f8
 8003a2c:	200000c8 	.word	0x200000c8
 8003a30:	200000c4 	.word	0x200000c4
 8003a34:	2000012c 	.word	0x2000012c

08003a38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a42:	f000 fad1 	bl	8003fe8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <xTimerCreateTimerTask+0x54>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <xTimerCreateTimerTask+0x58>)
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2302      	movs	r3, #2
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a5c:	490d      	ldr	r1, [pc, #52]	; (8003a94 <xTimerCreateTimerTask+0x5c>)
 8003a5e:	480e      	ldr	r0, [pc, #56]	; (8003a98 <xTimerCreateTimerTask+0x60>)
 8003a60:	f7ff f932 	bl	8002cc8 <xTaskCreate>
 8003a64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <xTimerCreateTimerTask+0x48>
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	e7fe      	b.n	8003a7e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003a80:	687b      	ldr	r3, [r7, #4]
    }
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000168 	.word	0x20000168
 8003a90:	2000016c 	.word	0x2000016c
 8003a94:	08006460 	.word	0x08006460
 8003a98:	08003bcd 	.word	0x08003bcd

08003a9c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <xTimerGenericCommand+0x2c>
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	623b      	str	r3, [r7, #32]
 8003ac6:	e7fe      	b.n	8003ac6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003ac8:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <xTimerGenericCommand+0x94>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02a      	beq.n	8003b26 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	dc18      	bgt.n	8003b14 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ae2:	f7ff fe95 	bl	8003810 <xTaskGetSchedulerState>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d109      	bne.n	8003b00 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <xTimerGenericCommand+0x94>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	f107 0114 	add.w	r1, r7, #20
 8003af4:	2300      	movs	r3, #0
 8003af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af8:	f7fe fc82 	bl	8002400 <xQueueGenericSend>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24
 8003afe:	e012      	b.n	8003b26 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <xTimerGenericCommand+0x94>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	f107 0114 	add.w	r1, r7, #20
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f7fe fc78 	bl	8002400 <xQueueGenericSend>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24
 8003b12:	e008      	b.n	8003b26 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <xTimerGenericCommand+0x94>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	f107 0114 	add.w	r1, r7, #20
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	f7fe fd90 	bl	8002644 <xQueueGenericSendFromISR>
 8003b24:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3728      	adds	r7, #40	; 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000168 	.word	0x20000168

08003b34 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <prvProcessExpiredTimer+0x94>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fb3e 	bl	80021ce <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d021      	beq.n	8003ba4 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	18d1      	adds	r1, r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f000 f8d1 	bl	8003d14 <prvInsertTimerInActiveList>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01e      	beq.n	8003bb6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	2100      	movs	r1, #0
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7ff ff8a 	bl	8003a9c <xTimerGenericCommand>
 8003b88:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d112      	bne.n	8003bb6 <prvProcessExpiredTimer+0x82>
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e7fe      	b.n	8003ba2 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	4798      	blx	r3
    }
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000160 	.word	0x20000160

08003bcc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f857 	bl	8003c8c <prvGetNextExpireTime>
 8003bde:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4619      	mov	r1, r3
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f803 	bl	8003bf0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003bea:	f000 f8d5 	bl	8003d98 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bee:	e7f1      	b.n	8003bd4 <prvTimerTask+0x8>

08003bf0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003bfa:	f7ff fa27 	bl	800304c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f866 	bl	8003cd4 <prvSampleTimeNow>
 8003c08:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d130      	bne.n	8003c72 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <prvProcessTimerOrBlockTask+0x3c>
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d806      	bhi.n	8003c2c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c1e:	f7ff fa23 	bl	8003068 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff85 	bl	8003b34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c2a:	e024      	b.n	8003c76 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <prvProcessTimerOrBlockTask+0x90>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <prvProcessTimerOrBlockTask+0x50>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <prvProcessTimerOrBlockTask+0x52>
 8003c40:	2300      	movs	r3, #0
 8003c42:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <prvProcessTimerOrBlockTask+0x94>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7ff f805 	bl	8002c60 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c56:	f7ff fa07 	bl	8003068 <xTaskResumeAll>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <prvProcessTimerOrBlockTask+0x98>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
    }
 8003c70:	e001      	b.n	8003c76 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c72:	f7ff f9f9 	bl	8003068 <xTaskResumeAll>
    }
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000164 	.word	0x20000164
 8003c84:	20000168 	.word	0x20000168
 8003c88:	e000ed04 	.word	0xe000ed04

08003c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c94:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <prvGetNextExpireTime+0x44>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <prvGetNextExpireTime+0x16>
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	e000      	b.n	8003ca4 <prvGetNextExpireTime+0x18>
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <prvGetNextExpireTime+0x44>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e001      	b.n	8003cc0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
    }
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000160 	.word	0x20000160

08003cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003cdc:	f7ff fa64 	bl	80031a8 <xTaskGetTickCount>
 8003ce0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <prvSampleTimeNow+0x3c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d205      	bcs.n	8003cf8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003cec:	f000 f918 	bl	8003f20 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <prvSampleTimeNow+0x3c>)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d04:	68fb      	ldr	r3, [r7, #12]
    }
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000170 	.word	0x20000170

08003d14 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d812      	bhi.n	8003d60 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	1ad2      	subs	r2, r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d302      	bcc.n	8003d4e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e01b      	b.n	8003d86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <prvInsertTimerInActiveList+0x7c>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f7fe f9ff 	bl	800215c <vListInsert>
 8003d5e:	e012      	b.n	8003d86 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d206      	bcs.n	8003d76 <prvInsertTimerInActiveList+0x62>
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e007      	b.n	8003d86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <prvInsertTimerInActiveList+0x80>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f7fe f9eb 	bl	800215c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d86:	697b      	ldr	r3, [r7, #20]
    }
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000164 	.word	0x20000164
 8003d94:	20000160 	.word	0x20000160

08003d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d9e:	e0ac      	b.n	8003efa <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f2c0 80a8 	blt.w	8003ef8 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fa08 	bl	80021ce <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff87 	bl	8003cd4 <prvSampleTimeNow>
 8003dc6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b09      	cmp	r3, #9
 8003dcc:	f200 8095 	bhi.w	8003efa <prvProcessReceivedCommands+0x162>
 8003dd0:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <prvProcessReceivedCommands+0x40>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e01 	.word	0x08003e01
 8003de0:	08003e01 	.word	0x08003e01
 8003de4:	08003e73 	.word	0x08003e73
 8003de8:	08003e87 	.word	0x08003e87
 8003dec:	08003ecf 	.word	0x08003ecf
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e01 	.word	0x08003e01
 8003df8:	08003e73 	.word	0x08003e73
 8003dfc:	08003e87 	.word	0x08003e87
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	18d1      	adds	r1, r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e20:	f7ff ff78 	bl	8003d14 <prvInsertTimerInActiveList>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d067      	beq.n	8003efa <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e30:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d05c      	beq.n	8003efa <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	441a      	add	r2, r3
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2100      	movs	r1, #0
 8003e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e52:	f7ff fe23 	bl	8003a9c <xTimerGenericCommand>
 8003e56:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d14d      	bne.n	8003efa <prvProcessReceivedCommands+0x162>
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	e7fe      	b.n	8003e70 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e84:	e039      	b.n	8003efa <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <prvProcessReceivedCommands+0x122>
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e7fe      	b.n	8003eb8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	18d1      	adds	r1, r2, r3
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ec8:	f7ff ff24 	bl	8003d14 <prvInsertTimerInActiveList>
                        break;
 8003ecc:	e015      	b.n	8003efa <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ede:	f000 fc55 	bl	800478c <vPortFree>
 8003ee2:	e00a      	b.n	8003efa <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ef6:	e000      	b.n	8003efa <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ef8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <prvProcessReceivedCommands+0x184>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f107 0108 	add.w	r1, r7, #8
 8003f02:	2200      	movs	r2, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe fc57 	bl	80027b8 <xQueueReceive>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f af47 	bne.w	8003da0 <prvProcessReceivedCommands+0x8>
        }
    }
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	; 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000168 	.word	0x20000168

08003f20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f26:	e047      	b.n	8003fb8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f28:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <prvSwitchTimerLists+0xc0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f32:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <prvSwitchTimerLists+0xc0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe f944 	bl	80021ce <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d02d      	beq.n	8003fb8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d90e      	bls.n	8003f8c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f7a:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <prvSwitchTimerLists+0xc0>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7fe f8e9 	bl	800215c <vListInsert>
 8003f8a:	e015      	b.n	8003fb8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2300      	movs	r3, #0
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	2100      	movs	r1, #0
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff fd80 	bl	8003a9c <xTimerGenericCommand>
 8003f9c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <prvSwitchTimerLists+0x98>
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	e7fe      	b.n	8003fb6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <prvSwitchTimerLists+0xc0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1b2      	bne.n	8003f28 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <prvSwitchTimerLists+0xc0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <prvSwitchTimerLists+0xc4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <prvSwitchTimerLists+0xc0>)
 8003fce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <prvSwitchTimerLists+0xc4>)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	6013      	str	r3, [r2, #0]
    }
 8003fd6:	bf00      	nop
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000160 	.word	0x20000160
 8003fe4:	20000164 	.word	0x20000164

08003fe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003fec:	f000 f9d2 	bl	8004394 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <prvCheckForValidListAndQueue+0x54>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11d      	bne.n	8004034 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ff8:	4811      	ldr	r0, [pc, #68]	; (8004040 <prvCheckForValidListAndQueue+0x58>)
 8003ffa:	f7fe f85e 	bl	80020ba <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ffe:	4811      	ldr	r0, [pc, #68]	; (8004044 <prvCheckForValidListAndQueue+0x5c>)
 8004000:	f7fe f85b 	bl	80020ba <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <prvCheckForValidListAndQueue+0x60>)
 8004006:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <prvCheckForValidListAndQueue+0x58>)
 8004008:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <prvCheckForValidListAndQueue+0x64>)
 800400c:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <prvCheckForValidListAndQueue+0x5c>)
 800400e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004010:	2200      	movs	r2, #0
 8004012:	210c      	movs	r1, #12
 8004014:	200a      	movs	r0, #10
 8004016:	f7fe f96d 	bl	80022f4 <xQueueGenericCreate>
 800401a:	4602      	mov	r2, r0
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <prvCheckForValidListAndQueue+0x54>)
 800401e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <prvCheckForValidListAndQueue+0x54>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <prvCheckForValidListAndQueue+0x54>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4908      	ldr	r1, [pc, #32]	; (8004050 <prvCheckForValidListAndQueue+0x68>)
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fde6 	bl	8002c00 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004034:	f000 f9dc 	bl	80043f0 <vPortExitCritical>
    }
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000168 	.word	0x20000168
 8004040:	20000138 	.word	0x20000138
 8004044:	2000014c 	.word	0x2000014c
 8004048:	20000160 	.word	0x20000160
 800404c:	20000164 	.word	0x20000164
 8004050:	08006468 	.word	0x08006468

08004054 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3b04      	subs	r3, #4
 8004064:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800406c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b04      	subs	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b04      	subs	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004084:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <pxPortInitialiseStack+0x64>)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b14      	subs	r3, #20
 800408e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3b04      	subs	r3, #4
 800409a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f06f 0202 	mvn.w	r2, #2
 80040a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3b20      	subs	r3, #32
 80040a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040aa:	68fb      	ldr	r3, [r7, #12]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	080040bd 	.word	0x080040bd

080040bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <prvTaskExitError+0x50>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d009      	beq.n	80040e4 <prvTaskExitError+0x28>
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e7fe      	b.n	80040e2 <prvTaskExitError+0x26>
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040f6:	bf00      	nop
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0fc      	beq.n	80040f8 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000010 	.word	0x20000010

08004110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <pxCurrentTCBConst2>)
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	f380 8809 	msr	PSP, r0
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	4770      	bx	lr
 800412c:	f3af 8000 	nop.w

08004130 <pxCurrentTCBConst2>:
 8004130:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <prvPortStartFirstTask+0x24>)
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f380 8808 	msr	MSP, r0
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8814 	msr	CONTROL, r0
 800414a:	b662      	cpsie	i
 800414c:	b661      	cpsie	f
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	df00      	svc	0
 8004158:	bf00      	nop
 800415a:	0000      	.short	0x0000
 800415c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop

08004164 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800416a:	4b44      	ldr	r3, [pc, #272]	; (800427c <xPortStartScheduler+0x118>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a44      	ldr	r2, [pc, #272]	; (8004280 <xPortStartScheduler+0x11c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d109      	bne.n	8004188 <xPortStartScheduler+0x24>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e7fe      	b.n	8004186 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004188:	4b3c      	ldr	r3, [pc, #240]	; (800427c <xPortStartScheduler+0x118>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3d      	ldr	r2, [pc, #244]	; (8004284 <xPortStartScheduler+0x120>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d109      	bne.n	80041a6 <xPortStartScheduler+0x42>
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e7fe      	b.n	80041a4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041a6:	4b38      	ldr	r3, [pc, #224]	; (8004288 <xPortStartScheduler+0x124>)
 80041a8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b30      	ldr	r3, [pc, #192]	; (800428c <xPortStartScheduler+0x128>)
 80041cc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ce:	4b30      	ldr	r3, [pc, #192]	; (8004290 <xPortStartScheduler+0x12c>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041d4:	e009      	b.n	80041ea <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80041d6:	4b2e      	ldr	r3, [pc, #184]	; (8004290 <xPortStartScheduler+0x12c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <xPortStartScheduler+0x12c>)
 80041de:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d0ef      	beq.n	80041d6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041f6:	4b26      	ldr	r3, [pc, #152]	; (8004290 <xPortStartScheduler+0x12c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1c3 0307 	rsb	r3, r3, #7
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d009      	beq.n	8004216 <xPortStartScheduler+0xb2>
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	e7fe      	b.n	8004214 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004216:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <xPortStartScheduler+0x12c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <xPortStartScheduler+0x12c>)
 800421e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004220:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <xPortStartScheduler+0x12c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004228:	4a19      	ldr	r2, [pc, #100]	; (8004290 <xPortStartScheduler+0x12c>)
 800422a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	b2da      	uxtb	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004234:	4b17      	ldr	r3, [pc, #92]	; (8004294 <xPortStartScheduler+0x130>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a16      	ldr	r2, [pc, #88]	; (8004294 <xPortStartScheduler+0x130>)
 800423a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800423e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <xPortStartScheduler+0x130>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a13      	ldr	r2, [pc, #76]	; (8004294 <xPortStartScheduler+0x130>)
 8004246:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800424a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800424c:	f000 f954 	bl	80044f8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <xPortStartScheduler+0x134>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004256:	f000 f973 	bl	8004540 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <xPortStartScheduler+0x138>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a0f      	ldr	r2, [pc, #60]	; (800429c <xPortStartScheduler+0x138>)
 8004260:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004264:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004266:	f7ff ff67 	bl	8004138 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800426a:	f7ff f87b 	bl	8003364 <vTaskSwitchContext>
    prvTaskExitError();
 800426e:	f7ff ff25 	bl	80040bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	e000ed00 	.word	0xe000ed00
 8004280:	410fc271 	.word	0x410fc271
 8004284:	410fc270 	.word	0x410fc270
 8004288:	e000e400 	.word	0xe000e400
 800428c:	20000174 	.word	0x20000174
 8004290:	20000178 	.word	0x20000178
 8004294:	e000ed20 	.word	0xe000ed20
 8004298:	20000010 	.word	0x20000010
 800429c:	e000ef34 	.word	0xe000ef34

080042a0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042a6:	4b35      	ldr	r3, [pc, #212]	; (800437c <vInitPrioGroupValue+0xdc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a35      	ldr	r2, [pc, #212]	; (8004380 <vInitPrioGroupValue+0xe0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d109      	bne.n	80042c4 <vInitPrioGroupValue+0x24>
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e7fe      	b.n	80042c2 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042c4:	4b2d      	ldr	r3, [pc, #180]	; (800437c <vInitPrioGroupValue+0xdc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2e      	ldr	r2, [pc, #184]	; (8004384 <vInitPrioGroupValue+0xe4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d109      	bne.n	80042e2 <vInitPrioGroupValue+0x42>
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e7fe      	b.n	80042e0 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042e2:	4b29      	ldr	r3, [pc, #164]	; (8004388 <vInitPrioGroupValue+0xe8>)
 80042e4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	22ff      	movs	r2, #255	; 0xff
 80042f2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <vInitPrioGroupValue+0xec>)
 8004308:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <vInitPrioGroupValue+0xf0>)
 800430c:	2207      	movs	r2, #7
 800430e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004310:	e009      	b.n	8004326 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004312:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <vInitPrioGroupValue+0xf0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3b01      	subs	r3, #1
 8004318:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <vInitPrioGroupValue+0xf0>)
 800431a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d0ef      	beq.n	8004312 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004332:	4b17      	ldr	r3, [pc, #92]	; (8004390 <vInitPrioGroupValue+0xf0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	2b04      	cmp	r3, #4
 800433c:	d009      	beq.n	8004352 <vInitPrioGroupValue+0xb2>
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	e7fe      	b.n	8004350 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <vInitPrioGroupValue+0xf0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <vInitPrioGroupValue+0xf0>)
 800435a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <vInitPrioGroupValue+0xf0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004364:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <vInitPrioGroupValue+0xf0>)
 8004366:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000ed00 	.word	0xe000ed00
 8004380:	410fc271 	.word	0x410fc271
 8004384:	410fc270 	.word	0x410fc270
 8004388:	e000e400 	.word	0xe000e400
 800438c:	20000174 	.word	0x20000174
 8004390:	20000178 	.word	0x20000178

08004394 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <vPortEnterCritical+0x54>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a0d      	ldr	r2, [pc, #52]	; (80043e8 <vPortEnterCritical+0x54>)
 80043b4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <vPortEnterCritical+0x54>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10e      	bne.n	80043dc <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <vPortEnterCritical+0x58>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <vPortEnterCritical+0x48>
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	e7fe      	b.n	80043da <vPortEnterCritical+0x46>
    }
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	20000010 	.word	0x20000010
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <vPortExitCritical+0x4c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <vPortExitCritical+0x22>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	e7fe      	b.n	8004410 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <vPortExitCritical+0x4c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3b01      	subs	r3, #1
 8004418:	4a08      	ldr	r2, [pc, #32]	; (800443c <vPortExitCritical+0x4c>)
 800441a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <vPortExitCritical+0x4c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <vPortExitCritical+0x3e>
 8004424:	2300      	movs	r3, #0
 8004426:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000010 	.word	0x20000010

08004440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004440:	f3ef 8009 	mrs	r0, PSP
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <pxCurrentTCBConst>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f01e 0f10 	tst.w	lr, #16
 8004450:	bf08      	it	eq
 8004452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004464:	f380 8811 	msr	BASEPRI, r0
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f7fe ff78 	bl	8003364 <vTaskSwitchContext>
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f380 8811 	msr	BASEPRI, r0
 800447c:	bc09      	pop	{r0, r3}
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004486:	f01e 0f10 	tst.w	lr, #16
 800448a:	bf08      	it	eq
 800448c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004490:	f380 8809 	msr	PSP, r0
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst>:
 80044a0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
        __asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80044c0:	f001 fc56 	bl	8005d70 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044c4:	f7fe fe92 	bl	80031ec <xTaskIncrementTick>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d006      	beq.n	80044dc <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044ce:	f001 fcad 	bl	8005e2c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <SysTick_Handler+0x4c>)
 80044d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e001      	b.n	80044e0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80044dc:	f001 fc8a 	bl	8005df4 <SEGGER_SYSVIEW_RecordExitISR>
 80044e0:	2300      	movs	r3, #0
 80044e2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <vPortSetupTimerInterrupt+0x34>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <vPortSetupTimerInterrupt+0x38>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <vPortSetupTimerInterrupt+0x3c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <vPortSetupTimerInterrupt+0x40>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	4a09      	ldr	r2, [pc, #36]	; (800453c <vPortSetupTimerInterrupt+0x44>)
 8004516:	3b01      	subs	r3, #1
 8004518:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <vPortSetupTimerInterrupt+0x34>)
 800451c:	2207      	movs	r2, #7
 800451e:	601a      	str	r2, [r3, #0]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	e000e010 	.word	0xe000e010
 8004530:	e000e018 	.word	0xe000e018
 8004534:	20000008 	.word	0x20000008
 8004538:	10624dd3 	.word	0x10624dd3
 800453c:	e000e014 	.word	0xe000e014

08004540 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004540:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004550 <vPortEnableVFP+0x10>
 8004544:	6801      	ldr	r1, [r0, #0]
 8004546:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800454a:	6001      	str	r1, [r0, #0]
 800454c:	4770      	bx	lr
 800454e:	0000      	.short	0x0000
 8004550:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop

08004558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800455e:	f3ef 8305 	mrs	r3, IPSR
 8004562:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d913      	bls.n	8004592 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800456a:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <vPortValidateInterruptPriority+0x6c>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <vPortValidateInterruptPriority+0x70>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	7afa      	ldrb	r2, [r7, #11]
 800457a:	429a      	cmp	r2, r3
 800457c:	d209      	bcs.n	8004592 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	e7fe      	b.n	8004590 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004592:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <vPortValidateInterruptPriority+0x74>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <vPortValidateInterruptPriority+0x78>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d909      	bls.n	80045b6 <vPortValidateInterruptPriority+0x5e>
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	e7fe      	b.n	80045b4 <vPortValidateInterruptPriority+0x5c>
    }
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	e000e3f0 	.word	0xe000e3f0
 80045c8:	20000174 	.word	0x20000174
 80045cc:	e000ed0c 	.word	0xe000ed0c
 80045d0:	20000178 	.word	0x20000178

080045d4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045e0:	f7fe fd34 	bl	800304c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045e4:	4b63      	ldr	r3, [pc, #396]	; (8004774 <pvPortMalloc+0x1a0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045ec:	f000 f92e 	bl	800484c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <pvPortMalloc+0x1a4>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f040 80a5 	bne.w	8004748 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02c      	beq.n	800465e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004604:	2208      	movs	r2, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d226      	bcs.n	800465e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004610:	2208      	movs	r2, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f023 0307 	bic.w	r3, r3, #7
 8004628:	3308      	adds	r3, #8
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d213      	bcs.n	8004658 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f023 0307 	bic.w	r3, r3, #7
 8004636:	3308      	adds	r3, #8
 8004638:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00f      	beq.n	8004664 <pvPortMalloc+0x90>
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e7fe      	b.n	8004656 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800465c:	e002      	b.n	8004664 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e000      	b.n	8004666 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004664:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d06d      	beq.n	8004748 <pvPortMalloc+0x174>
 800466c:	4b43      	ldr	r3, [pc, #268]	; (800477c <pvPortMalloc+0x1a8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	d868      	bhi.n	8004748 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004676:	4b42      	ldr	r3, [pc, #264]	; (8004780 <pvPortMalloc+0x1ac>)
 8004678:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <pvPortMalloc+0x1ac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004680:	e004      	b.n	800468c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	429a      	cmp	r2, r3
 8004694:	d903      	bls.n	800469e <pvPortMalloc+0xca>
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f1      	bne.n	8004682 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800469e:	4b35      	ldr	r3, [pc, #212]	; (8004774 <pvPortMalloc+0x1a0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d04f      	beq.n	8004748 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2208      	movs	r2, #8
 80046ae:	4413      	add	r3, r2
 80046b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	1ad2      	subs	r2, r2, r3
 80046c2:	2308      	movs	r3, #8
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d91e      	bls.n	8004708 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <pvPortMalloc+0x11c>
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e7fe      	b.n	80046ee <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	1ad2      	subs	r2, r2, r3
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004702:	69b8      	ldr	r0, [r7, #24]
 8004704:	f000 f904 	bl	8004910 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004708:	4b1c      	ldr	r3, [pc, #112]	; (800477c <pvPortMalloc+0x1a8>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	4a1a      	ldr	r2, [pc, #104]	; (800477c <pvPortMalloc+0x1a8>)
 8004714:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004716:	4b19      	ldr	r3, [pc, #100]	; (800477c <pvPortMalloc+0x1a8>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <pvPortMalloc+0x1b0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d203      	bcs.n	800472a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004722:	4b16      	ldr	r3, [pc, #88]	; (800477c <pvPortMalloc+0x1a8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a17      	ldr	r2, [pc, #92]	; (8004784 <pvPortMalloc+0x1b0>)
 8004728:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <pvPortMalloc+0x1a4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	431a      	orrs	r2, r3
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <pvPortMalloc+0x1b4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	4a10      	ldr	r2, [pc, #64]	; (8004788 <pvPortMalloc+0x1b4>)
 8004746:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004748:	f7fe fc8e 	bl	8003068 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <pvPortMalloc+0x196>
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e7fe      	b.n	8004768 <pvPortMalloc+0x194>
    return pvReturn;
 800476a:	69fb      	ldr	r3, [r7, #28]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3728      	adds	r7, #40	; 0x28
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20012d84 	.word	0x20012d84
 8004778:	20012d98 	.word	0x20012d98
 800477c:	20012d88 	.word	0x20012d88
 8004780:	20012d7c 	.word	0x20012d7c
 8004784:	20012d8c 	.word	0x20012d8c
 8004788:	20012d90 	.word	0x20012d90

0800478c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04b      	beq.n	8004836 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800479e:	2308      	movs	r3, #8
 80047a0:	425b      	negs	r3, r3
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4413      	add	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4b23      	ldr	r3, [pc, #140]	; (8004840 <vPortFree+0xb4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <vPortFree+0x42>
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e7fe      	b.n	80047cc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <vPortFree+0x5e>
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	e7fe      	b.n	80047e8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <vPortFree+0xb4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01e      	beq.n	8004836 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d11a      	bne.n	8004836 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <vPortFree+0xb4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004810:	f7fe fc1c 	bl	800304c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <vPortFree+0xb8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4413      	add	r3, r2
 800481e:	4a09      	ldr	r2, [pc, #36]	; (8004844 <vPortFree+0xb8>)
 8004820:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004822:	6938      	ldr	r0, [r7, #16]
 8004824:	f000 f874 	bl	8004910 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004828:	4b07      	ldr	r3, [pc, #28]	; (8004848 <vPortFree+0xbc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	4a06      	ldr	r2, [pc, #24]	; (8004848 <vPortFree+0xbc>)
 8004830:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004832:	f7fe fc19 	bl	8003068 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20012d98 	.word	0x20012d98
 8004844:	20012d88 	.word	0x20012d88
 8004848:	20012d94 	.word	0x20012d94

0800484c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004852:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004856:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004858:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <prvHeapInit+0xac>)
 800485a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3307      	adds	r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0307 	bic.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <prvHeapInit+0xac>)
 800487c:	4413      	add	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <prvHeapInit+0xb0>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800488a:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <prvHeapInit+0xb0>)
 800488c:	2200      	movs	r2, #0
 800488e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	4413      	add	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004898:	2208      	movs	r2, #8
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0307 	bic.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <prvHeapInit+0xb4>)
 80048ac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <prvHeapInit+0xb4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <prvHeapInit+0xb4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <prvHeapInit+0xb4>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <prvHeapInit+0xb8>)
 80048da:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <prvHeapInit+0xbc>)
 80048e2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <prvHeapInit+0xc0>)
 80048e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	2000017c 	.word	0x2000017c
 80048fc:	20012d7c 	.word	0x20012d7c
 8004900:	20012d84 	.word	0x20012d84
 8004904:	20012d8c 	.word	0x20012d8c
 8004908:	20012d88 	.word	0x20012d88
 800490c:	20012d98 	.word	0x20012d98

08004910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <prvInsertBlockIntoFreeList+0xac>)
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e002      	b.n	8004924 <prvInsertBlockIntoFreeList+0x14>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d8f7      	bhi.n	800491e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	4413      	add	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d108      	bne.n	8004952 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d118      	bne.n	8004998 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <prvInsertBlockIntoFreeList+0xb0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d00d      	beq.n	800498e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e008      	b.n	80049a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <prvInsertBlockIntoFreeList+0xb0>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e003      	b.n	80049a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d002      	beq.n	80049ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20012d7c 	.word	0x20012d7c
 80049c0:	20012d84 	.word	0x20012d84

080049c4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80049c8:	4803      	ldr	r0, [pc, #12]	; (80049d8 <_cbSendSystemDesc+0x14>)
 80049ca:	f001 f97d 	bl	8005cc8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80049ce:	4803      	ldr	r0, [pc, #12]	; (80049dc <_cbSendSystemDesc+0x18>)
 80049d0:	f001 f97a 	bl	8005cc8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80049d4:	bf00      	nop
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	08006470 	.word	0x08006470
 80049dc:	080064b4 	.word	0x080064b4

080049e0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <SEGGER_SYSVIEW_Conf+0x20>)
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <SEGGER_SYSVIEW_Conf+0x20>)
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <SEGGER_SYSVIEW_Conf+0x24>)
 80049ee:	4a06      	ldr	r2, [pc, #24]	; (8004a08 <SEGGER_SYSVIEW_Conf+0x28>)
 80049f0:	f000 fce8 	bl	80053c4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80049f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80049f8:	f000 fd28 	bl	800544c <SEGGER_SYSVIEW_SetRAMBase>
}
 80049fc:	bf00      	nop
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000008 	.word	0x20000008
 8004a04:	080049c5 	.word	0x080049c5
 8004a08:	08006554 	.word	0x08006554

08004a0c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	e034      	b.n	8004a82 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a18:	491e      	ldr	r1, [pc, #120]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	491a      	ldr	r1, [pc, #104]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3304      	adds	r3, #4
 8004a38:	681c      	ldr	r4, [r3, #0]
 8004a3a:	4916      	ldr	r1, [pc, #88]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	3308      	adds	r3, #8
 8004a4a:	681d      	ldr	r5, [r3, #0]
 8004a4c:	4911      	ldr	r1, [pc, #68]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	681e      	ldr	r6, [r3, #0]
 8004a5e:	490d      	ldr	r1, [pc, #52]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3310      	adds	r3, #16
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	4633      	mov	r3, r6
 8004a74:	462a      	mov	r2, r5
 8004a76:	4621      	mov	r1, r4
 8004a78:	f000 f8b4 	bl	8004be4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <_cbSendTaskList+0x8c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3c5      	bcc.n	8004a18 <_cbSendTaskList+0xc>
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a94:	20012d9c 	.word	0x20012d9c
 8004a98:	20012e3c 	.word	0x20012e3c

08004a9c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004aa2:	f7fe fb91 	bl	80031c8 <xTaskGetTickCountFromISR>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ab0:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	4634      	mov	r4, r6
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	0162      	lsls	r2, r4, #5
 8004ac2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004ac6:	0159      	lsls	r1, r3, #5
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4614      	mov	r4, r2
 8004acc:	1b5b      	subs	r3, r3, r5
 8004ace:	eb64 0406 	sbc.w	r4, r4, r6
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	00a2      	lsls	r2, r4, #2
 8004adc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004ae0:	0099      	lsls	r1, r3, #2
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	195b      	adds	r3, r3, r5
 8004ae8:	eb44 0406 	adc.w	r4, r4, r6
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	00e2      	lsls	r2, r4, #3
 8004af6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004afa:	00d9      	lsls	r1, r3, #3
 8004afc:	460b      	mov	r3, r1
 8004afe:	4614      	mov	r4, r2
 8004b00:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004b04:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b22:	2205      	movs	r2, #5
 8004b24:	492b      	ldr	r1, [pc, #172]	; (8004bd4 <SYSVIEW_AddTask+0xc0>)
 8004b26:	68b8      	ldr	r0, [r7, #8]
 8004b28:	f001 fc4a 	bl	80063c0 <memcmp>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d04b      	beq.n	8004bca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b32:	4b29      	ldr	r3, [pc, #164]	; (8004bd8 <SYSVIEW_AddTask+0xc4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b07      	cmp	r3, #7
 8004b38:	d903      	bls.n	8004b42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b3a:	4828      	ldr	r0, [pc, #160]	; (8004bdc <SYSVIEW_AddTask+0xc8>)
 8004b3c:	f001 fbc0 	bl	80062c0 <SEGGER_SYSVIEW_Warn>
    return;
 8004b40:	e044      	b.n	8004bcc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b42:	4b25      	ldr	r3, [pc, #148]	; (8004bd8 <SYSVIEW_AddTask+0xc4>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4926      	ldr	r1, [pc, #152]	; (8004be0 <SYSVIEW_AddTask+0xcc>)
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <SYSVIEW_AddTask+0xc4>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4921      	ldr	r1, [pc, #132]	; (8004be0 <SYSVIEW_AddTask+0xcc>)
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	3304      	adds	r3, #4
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <SYSVIEW_AddTask+0xc4>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	491b      	ldr	r1, [pc, #108]	; (8004be0 <SYSVIEW_AddTask+0xcc>)
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <SYSVIEW_AddTask+0xc4>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	4916      	ldr	r1, [pc, #88]	; (8004be0 <SYSVIEW_AddTask+0xcc>)
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	330c      	adds	r3, #12
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <SYSVIEW_AddTask+0xc4>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4910      	ldr	r1, [pc, #64]	; (8004be0 <SYSVIEW_AddTask+0xcc>)
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	3310      	adds	r3, #16
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <SYSVIEW_AddTask+0xc4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <SYSVIEW_AddTask+0xc4>)
 8004bb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f80e 	bl	8004be4 <SYSVIEW_SendTaskInfo>
 8004bc8:	e000      	b.n	8004bcc <SYSVIEW_AddTask+0xb8>
    return;
 8004bca:	bf00      	nop

}
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	080064c4 	.word	0x080064c4
 8004bd8:	20012e3c 	.word	0x20012e3c
 8004bdc:	080064cc 	.word	0x080064cc
 8004be0:	20012d9c 	.word	0x20012d9c

08004be4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	2214      	movs	r2, #20
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fbfa 	bl	80063f4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 ff5d 	bl	8005ad8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c1e:	bf00      	nop
 8004c20:	3728      	adds	r7, #40	; 0x28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c2e:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <_DoInit+0x98>)
 8004c30:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2203      	movs	r2, #3
 8004c36:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <_DoInit+0x9c>)
 8004c42:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a20      	ldr	r2, [pc, #128]	; (8004cc8 <_DoInit+0xa0>)
 8004c48:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c50:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <_DoInit+0x9c>)
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <_DoInit+0xa4>)
 8004c6e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2210      	movs	r2, #16
 8004c74:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3307      	adds	r3, #7
 8004c8c:	4a10      	ldr	r2, [pc, #64]	; (8004cd0 <_DoInit+0xa8>)
 8004c8e:	6810      	ldr	r0, [r2, #0]
 8004c90:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c92:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a0e      	ldr	r2, [pc, #56]	; (8004cd4 <_DoInit+0xac>)
 8004c9a:	6810      	ldr	r0, [r2, #0]
 8004c9c:	6018      	str	r0, [r3, #0]
 8004c9e:	8891      	ldrh	r1, [r2, #4]
 8004ca0:	7992      	ldrb	r2, [r2, #6]
 8004ca2:	8099      	strh	r1, [r3, #4]
 8004ca4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ca6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cb0:	f3bf 8f5f 	dmb	sy
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	200143f0 	.word	0x200143f0
 8004cc4:	0800651c 	.word	0x0800651c
 8004cc8:	20012e40 	.word	0x20012e40
 8004ccc:	20013240 	.word	0x20013240
 8004cd0:	08006528 	.word	0x08006528
 8004cd4:	0800652c 	.word	0x0800652c

08004cd8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08c      	sub	sp, #48	; 0x30
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004cf2:	f7ff ff99 	bl	8004c28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	3360      	adds	r3, #96	; 0x60
 8004d02:	4a37      	ldr	r2, [pc, #220]	; (8004de0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d04:	4413      	add	r3, r2
 8004d06:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d92b      	bls.n	8004d7c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4293      	cmp	r3, r2
 8004d34:	bf28      	it	cs
 8004d36:	4613      	movcs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	4413      	add	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	6939      	ldr	r1, [r7, #16]
 8004d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d4a:	f001 fb48 	bl	80063de <memcpy>
    NumBytesRead += NumBytesRem;
 8004d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4413      	add	r3, r2
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d101      	bne.n	8004d7c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	bf28      	it	cs
 8004d8c:	4613      	movcs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d019      	beq.n	8004dca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	4413      	add	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	6939      	ldr	r1, [r7, #16]
 8004da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da6:	f001 fb1a 	bl	80063de <memcpy>
    NumBytesRead += NumBytesRem;
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	4413      	add	r3, r2
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3730      	adds	r7, #48	; 0x30
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	200143f0 	.word	0x200143f0

08004de4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004e00:	f7ff ff12 	bl	8004c28 <_DoInit>
  SEGGER_RTT_LOCK();
 8004e04:	f3ef 8311 	mrs	r3, BASEPRI
 8004e08:	f04f 0120 	mov.w	r1, #32
 8004e0c:	f381 8811 	msr	BASEPRI, r1
 8004e10:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e12:	4b35      	ldr	r3, [pc, #212]	; (8004ee8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e14:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004e1a:	6939      	ldr	r1, [r7, #16]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	4613      	mov	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4413      	add	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	440b      	add	r3, r1
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3301      	adds	r3, #1
 8004e36:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	dbeb      	blt.n	8004e1a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004e42:	e000      	b.n	8004e46 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004e44:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	da3f      	bge.n	8004ed0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004e50:	6939      	ldr	r1, [r7, #16]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	440b      	add	r3, r1
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e64:	6939      	ldr	r1, [r7, #16]
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	4413      	add	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	440b      	add	r3, r1
 8004e74:	3304      	adds	r3, #4
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	440b      	add	r3, r1
 8004e88:	3320      	adds	r3, #32
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e8e:	6939      	ldr	r1, [r7, #16]
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3328      	adds	r3, #40	; 0x28
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004ea2:	6939      	ldr	r1, [r7, #16]
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	440b      	add	r3, r1
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004eb6:	6939      	ldr	r1, [r7, #16]
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	440b      	add	r3, r1
 8004ec4:	332c      	adds	r3, #44	; 0x2c
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eca:	f3bf 8f5f 	dmb	sy
 8004ece:	e002      	b.n	8004ed6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004edc:	69fb      	ldr	r3, [r7, #28]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200143f0 	.word	0x200143f0

08004eec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004efa:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004efc:	623b      	str	r3, [r7, #32]
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004f08:	f7ff fe8e 	bl	8004c28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f0e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d82c      	bhi.n	8004f70 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004f16:	f3ef 8311 	mrs	r3, BASEPRI
 8004f1a:	f04f 0120 	mov.w	r1, #32
 8004f1e:	f381 8811 	msr	BASEPRI, r1
 8004f22:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4613      	mov	r3, r2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	3360      	adds	r3, #96	; 0x60
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2200      	movs	r2, #0
 8004f52:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f60:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6e:	e002      	b.n	8004f76 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3728      	adds	r7, #40	; 0x28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	200143f0 	.word	0x200143f0

08004f84 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00f      	beq.n	8004fba <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004f9a:	e002      	b.n	8004fa2 <_EncodeStr+0x1e>
      Len++;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f6      	bne.n	8004f9c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d901      	bls.n	8004fba <_EncodeStr+0x36>
      Len = Limit;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2bfe      	cmp	r3, #254	; 0xfe
 8004fbe:	d806      	bhi.n	8004fce <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	60fa      	str	r2, [r7, #12]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e011      	b.n	8004ff2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	60fa      	str	r2, [r7, #12]
 8004fd4:	22ff      	movs	r2, #255	; 0xff
 8004fd6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	60fa      	str	r2, [r7, #12]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	0a19      	lsrs	r1, r3, #8
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	60fa      	str	r2, [r7, #12]
 8004fee:	b2ca      	uxtb	r2, r1
 8004ff0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004ff6:	e00a      	b.n	800500e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	1c53      	adds	r3, r2, #1
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1c59      	adds	r1, r3, #1
 8005002:	60f9      	str	r1, [r7, #12]
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	701a      	strb	r2, [r3, #0]
    n++;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3301      	adds	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d3f0      	bcc.n	8004ff8 <_EncodeStr+0x74>
  }
  return pPayload;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005042:	4b33      	ldr	r3, [pc, #204]	; (8005110 <_HandleIncomingPacket+0xd4>)
 8005044:	7e1b      	ldrb	r3, [r3, #24]
 8005046:	4618      	mov	r0, r3
 8005048:	1cfb      	adds	r3, r7, #3
 800504a:	2201      	movs	r2, #1
 800504c:	4619      	mov	r1, r3
 800504e:	f7ff fe43 	bl	8004cd8 <SEGGER_RTT_ReadNoLock>
 8005052:	4603      	mov	r3, r0
 8005054:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	dd4d      	ble.n	80050f8 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	2b05      	cmp	r3, #5
 8005060:	d022      	beq.n	80050a8 <_HandleIncomingPacket+0x6c>
 8005062:	2b05      	cmp	r3, #5
 8005064:	dc0b      	bgt.n	800507e <_HandleIncomingPacket+0x42>
 8005066:	2b02      	cmp	r3, #2
 8005068:	d015      	beq.n	8005096 <_HandleIncomingPacket+0x5a>
 800506a:	2b02      	cmp	r3, #2
 800506c:	dc02      	bgt.n	8005074 <_HandleIncomingPacket+0x38>
 800506e:	2b01      	cmp	r3, #1
 8005070:	d00e      	beq.n	8005090 <_HandleIncomingPacket+0x54>
 8005072:	e034      	b.n	80050de <_HandleIncomingPacket+0xa2>
 8005074:	2b03      	cmp	r3, #3
 8005076:	d011      	beq.n	800509c <_HandleIncomingPacket+0x60>
 8005078:	2b04      	cmp	r3, #4
 800507a:	d012      	beq.n	80050a2 <_HandleIncomingPacket+0x66>
 800507c:	e02f      	b.n	80050de <_HandleIncomingPacket+0xa2>
 800507e:	2b07      	cmp	r3, #7
 8005080:	d018      	beq.n	80050b4 <_HandleIncomingPacket+0x78>
 8005082:	2b07      	cmp	r3, #7
 8005084:	db13      	blt.n	80050ae <_HandleIncomingPacket+0x72>
 8005086:	2b7f      	cmp	r3, #127	; 0x7f
 8005088:	d038      	beq.n	80050fc <_HandleIncomingPacket+0xc0>
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d015      	beq.n	80050ba <_HandleIncomingPacket+0x7e>
 800508e:	e026      	b.n	80050de <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005090:	f000 fba8 	bl	80057e4 <SEGGER_SYSVIEW_Start>
      break;
 8005094:	e037      	b.n	8005106 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005096:	f000 fc5f 	bl	8005958 <SEGGER_SYSVIEW_Stop>
      break;
 800509a:	e034      	b.n	8005106 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800509c:	f000 fe38 	bl	8005d10 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80050a0:	e031      	b.n	8005106 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80050a2:	f000 fdfd 	bl	8005ca0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80050a6:	e02e      	b.n	8005106 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80050a8:	f000 fc7c 	bl	80059a4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80050ac:	e02b      	b.n	8005106 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80050ae:	f001 f8c9 	bl	8006244 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80050b2:	e028      	b.n	8005106 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80050b4:	f001 f8a8 	bl	8006208 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80050b8:	e025      	b.n	8005106 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <_HandleIncomingPacket+0xd4>)
 80050bc:	7e1b      	ldrb	r3, [r3, #24]
 80050be:	4618      	mov	r0, r3
 80050c0:	1cfb      	adds	r3, r7, #3
 80050c2:	2201      	movs	r2, #1
 80050c4:	4619      	mov	r1, r3
 80050c6:	f7ff fe07 	bl	8004cd8 <SEGGER_RTT_ReadNoLock>
 80050ca:	4603      	mov	r3, r0
 80050cc:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	dd15      	ble.n	8005100 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f001 f816 	bl	8006108 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80050dc:	e010      	b.n	8005100 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	b25b      	sxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	da0e      	bge.n	8005104 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <_HandleIncomingPacket+0xd4>)
 80050e8:	7e1b      	ldrb	r3, [r3, #24]
 80050ea:	4618      	mov	r0, r3
 80050ec:	1cfb      	adds	r3, r7, #3
 80050ee:	2201      	movs	r2, #1
 80050f0:	4619      	mov	r1, r3
 80050f2:	f7ff fdf1 	bl	8004cd8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80050f6:	e005      	b.n	8005104 <_HandleIncomingPacket+0xc8>
    }
  }
 80050f8:	bf00      	nop
 80050fa:	e004      	b.n	8005106 <_HandleIncomingPacket+0xca>
      break;
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <_HandleIncomingPacket+0xca>
      break;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <_HandleIncomingPacket+0xca>
      break;
 8005104:	bf00      	nop
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20014258 	.word	0x20014258

08005114 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b08c      	sub	sp, #48	; 0x30
 8005118:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800511a:	2301      	movs	r3, #1
 800511c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	3301      	adds	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <_TrySendOverflowPacket+0xdc>)
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
 800512e:	e00b      	b.n	8005148 <_TrySendOverflowPacket+0x34>
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	b2da      	uxtb	r2, r3
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	62f9      	str	r1, [r7, #44]	; 0x2c
 800513a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	09db      	lsrs	r3, r3, #7
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	2b7f      	cmp	r3, #127	; 0x7f
 800514c:	d8f0      	bhi.n	8005130 <_TrySendOverflowPacket+0x1c>
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <_TrySendOverflowPacket+0xe0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005164:	4b22      	ldr	r3, [pc, #136]	; (80051f0 <_TrySendOverflowPacket+0xdc>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	623b      	str	r3, [r7, #32]
 8005176:	e00b      	b.n	8005190 <_TrySendOverflowPacket+0x7c>
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	1c59      	adds	r1, r3, #1
 8005180:	6279      	str	r1, [r7, #36]	; 0x24
 8005182:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	09db      	lsrs	r3, r3, #7
 800518e:	623b      	str	r3, [r7, #32]
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	2b7f      	cmp	r3, #127	; 0x7f
 8005194:	d8f0      	bhi.n	8005178 <_TrySendOverflowPacket+0x64>
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	627a      	str	r2, [r7, #36]	; 0x24
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80051a6:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <_TrySendOverflowPacket+0xdc>)
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	4618      	mov	r0, r3
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7fb f80a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051bc:	4603      	mov	r3, r0
 80051be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051c6:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <_TrySendOverflowPacket+0xdc>)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80051cc:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <_TrySendOverflowPacket+0xdc>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <_TrySendOverflowPacket+0xdc>)
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e004      	b.n	80051e4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <_TrySendOverflowPacket+0xdc>)
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	3301      	adds	r3, #1
 80051e0:	4a03      	ldr	r2, [pc, #12]	; (80051f0 <_TrySendOverflowPacket+0xdc>)
 80051e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80051e4:	693b      	ldr	r3, [r7, #16]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3730      	adds	r7, #48	; 0x30
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20014258 	.word	0x20014258
 80051f4:	e0001004 	.word	0xe0001004

080051f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005204:	4b6c      	ldr	r3, [pc, #432]	; (80053b8 <_SendPacket+0x1c0>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d010      	beq.n	800522e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800520c:	4b6a      	ldr	r3, [pc, #424]	; (80053b8 <_SendPacket+0x1c0>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80a3 	beq.w	800535c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005216:	4b68      	ldr	r3, [pc, #416]	; (80053b8 <_SendPacket+0x1c0>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d109      	bne.n	8005232 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800521e:	f7ff ff79 	bl	8005114 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005222:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <_SendPacket+0x1c0>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b01      	cmp	r3, #1
 8005228:	f040 809a 	bne.w	8005360 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800522c:	e001      	b.n	8005232 <_SendPacket+0x3a>
    goto Send;
 800522e:	bf00      	nop
 8005230:	e000      	b.n	8005234 <_SendPacket+0x3c>
Send:
 8005232:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b1f      	cmp	r3, #31
 8005238:	d809      	bhi.n	800524e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800523a:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <_SendPacket+0x1c0>)
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	f040 808b 	bne.w	8005364 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b17      	cmp	r3, #23
 8005252:	d807      	bhi.n	8005264 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3b01      	subs	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e03d      	b.n	80052e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b7f      	cmp	r3, #127	; 0x7f
 8005270:	d912      	bls.n	8005298 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	09da      	lsrs	r2, r3, #7
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3b01      	subs	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	3a01      	subs	r2, #1
 800528a:	60fa      	str	r2, [r7, #12]
 800528c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e006      	b.n	80052a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3b01      	subs	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b7f      	cmp	r3, #127	; 0x7f
 80052aa:	d912      	bls.n	80052d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	09da      	lsrs	r2, r3, #7
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	3a01      	subs	r2, #1
 80052c4:	60fa      	str	r2, [r7, #12]
 80052c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e006      	b.n	80052e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052e0:	4b36      	ldr	r3, [pc, #216]	; (80053bc <_SendPacket+0x1c4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052e6:	4b34      	ldr	r3, [pc, #208]	; (80053b8 <_SendPacket+0x1c0>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	623b      	str	r3, [r7, #32]
 80052f8:	e00b      	b.n	8005312 <_SendPacket+0x11a>
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	1c59      	adds	r1, r3, #1
 8005302:	6279      	str	r1, [r7, #36]	; 0x24
 8005304:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	09db      	lsrs	r3, r3, #7
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	2b7f      	cmp	r3, #127	; 0x7f
 8005316:	d8f0      	bhi.n	80052fa <_SendPacket+0x102>
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	627a      	str	r2, [r7, #36]	; 0x24
 800531e:	6a3a      	ldr	r2, [r7, #32]
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <_SendPacket+0x1c0>)
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	4618      	mov	r0, r3
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	461a      	mov	r2, r3
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	f7fa ff4a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800533c:	4603      	mov	r3, r0
 800533e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005346:	4a1c      	ldr	r2, [pc, #112]	; (80053b8 <_SendPacket+0x1c0>)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	60d3      	str	r3, [r2, #12]
 800534c:	e00b      	b.n	8005366 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800534e:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <_SendPacket+0x1c0>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	3301      	adds	r3, #1
 8005354:	b2da      	uxtb	r2, r3
 8005356:	4b18      	ldr	r3, [pc, #96]	; (80053b8 <_SendPacket+0x1c0>)
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e004      	b.n	8005366 <_SendPacket+0x16e>
    goto SendDone;
 800535c:	bf00      	nop
 800535e:	e002      	b.n	8005366 <_SendPacket+0x16e>
      goto SendDone;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <_SendPacket+0x16e>
      goto SendDone;
 8005364:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <_SendPacket+0x1c0>)
 8005368:	7e1b      	ldrb	r3, [r3, #24]
 800536a:	4619      	mov	r1, r3
 800536c:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <_SendPacket+0x1c8>)
 800536e:	460b      	mov	r3, r1
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	440b      	add	r3, r1
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4413      	add	r3, r2
 8005378:	336c      	adds	r3, #108	; 0x6c
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <_SendPacket+0x1c0>)
 800537e:	7e1b      	ldrb	r3, [r3, #24]
 8005380:	4618      	mov	r0, r3
 8005382:	490f      	ldr	r1, [pc, #60]	; (80053c0 <_SendPacket+0x1c8>)
 8005384:	4603      	mov	r3, r0
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4403      	add	r3, r0
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	440b      	add	r3, r1
 800538e:	3370      	adds	r3, #112	; 0x70
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d00b      	beq.n	80053ae <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <_SendPacket+0x1c0>)
 8005398:	789b      	ldrb	r3, [r3, #2]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <_SendPacket+0x1c0>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053a4:	f7ff fe4a 	bl	800503c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <_SendPacket+0x1c0>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80053ae:	bf00      	nop
 80053b0:	3728      	adds	r7, #40	; 0x28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20014258 	.word	0x20014258
 80053bc:	e0001004 	.word	0xe0001004
 80053c0:	200143f0 	.word	0x200143f0

080053c4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80053d2:	2300      	movs	r3, #0
 80053d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053d8:	4917      	ldr	r1, [pc, #92]	; (8005438 <SEGGER_SYSVIEW_Init+0x74>)
 80053da:	4818      	ldr	r0, [pc, #96]	; (800543c <SEGGER_SYSVIEW_Init+0x78>)
 80053dc:	f7ff fd02 	bl	8004de4 <SEGGER_RTT_AllocUpBuffer>
 80053e0:	4603      	mov	r3, r0
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	4b16      	ldr	r3, [pc, #88]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 80053e6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80053e8:	4b15      	ldr	r3, [pc, #84]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 80053ea:	785a      	ldrb	r2, [r3, #1]
 80053ec:	4b14      	ldr	r3, [pc, #80]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 80053ee:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 80053f2:	7e1b      	ldrb	r3, [r3, #24]
 80053f4:	4618      	mov	r0, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	2308      	movs	r3, #8
 80053fc:	4a11      	ldr	r2, [pc, #68]	; (8005444 <SEGGER_SYSVIEW_Init+0x80>)
 80053fe:	490f      	ldr	r1, [pc, #60]	; (800543c <SEGGER_SYSVIEW_Init+0x78>)
 8005400:	f7ff fd74 	bl	8004eec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800540a:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <SEGGER_SYSVIEW_Init+0x84>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005410:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005412:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005418:	4a09      	ldr	r2, [pc, #36]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005424:	4a06      	ldr	r2, [pc, #24]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20013250 	.word	0x20013250
 800543c:	08006534 	.word	0x08006534
 8005440:	20014258 	.word	0x20014258
 8005444:	20014250 	.word	0x20014250
 8005448:	e0001004 	.word	0xe0001004

0800544c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6113      	str	r3, [r2, #16]
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20014258 	.word	0x20014258

0800546c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005474:	f3ef 8311 	mrs	r3, BASEPRI
 8005478:	f04f 0120 	mov.w	r1, #32
 800547c:	f381 8811 	msr	BASEPRI, r1
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	4808      	ldr	r0, [pc, #32]	; (80054a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005484:	f7ff fdce 	bl	8005024 <_PreparePacket>
 8005488:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68b8      	ldr	r0, [r7, #8]
 8005490:	f7ff feb2 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f383 8811 	msr	BASEPRI, r3
}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20014288 	.word	0x20014288

080054a8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054b2:	f3ef 8311 	mrs	r3, BASEPRI
 80054b6:	f04f 0120 	mov.w	r1, #32
 80054ba:	f381 8811 	msr	BASEPRI, r1
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	4816      	ldr	r0, [pc, #88]	; (800551c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80054c2:	f7ff fdaf 	bl	8005024 <_PreparePacket>
 80054c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	e00b      	b.n	80054ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	1c59      	adds	r1, r3, #1
 80054de:	61f9      	str	r1, [r7, #28]
 80054e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	09db      	lsrs	r3, r3, #7
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b7f      	cmp	r3, #127	; 0x7f
 80054f2:	d8f0      	bhi.n	80054d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	61fa      	str	r2, [r7, #28]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	6938      	ldr	r0, [r7, #16]
 800550a:	f7ff fe75 	bl	80051f8 <_SendPacket>
  RECORD_END();
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f383 8811 	msr	BASEPRI, r3
}
 8005514:	bf00      	nop
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20014288 	.word	0x20014288

08005520 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800552c:	f3ef 8311 	mrs	r3, BASEPRI
 8005530:	f04f 0120 	mov.w	r1, #32
 8005534:	f381 8811 	msr	BASEPRI, r1
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	4825      	ldr	r0, [pc, #148]	; (80055d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800553c:	f7ff fd72 	bl	8005024 <_PreparePacket>
 8005540:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
 800554e:	e00b      	b.n	8005568 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	b2da      	uxtb	r2, r3
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	62f9      	str	r1, [r7, #44]	; 0x2c
 800555a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b7f      	cmp	r3, #127	; 0x7f
 800556c:	d8f0      	bhi.n	8005550 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	e00b      	b.n	80055a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	6279      	str	r1, [r7, #36]	; 0x24
 8005592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	09db      	lsrs	r3, r3, #7
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2b7f      	cmp	r3, #127	; 0x7f
 80055a4:	d8f0      	bhi.n	8005588 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	627a      	str	r2, [r7, #36]	; 0x24
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	69b8      	ldr	r0, [r7, #24]
 80055bc:	f7ff fe1c 	bl	80051f8 <_SendPacket>
  RECORD_END();
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f383 8811 	msr	BASEPRI, r3
}
 80055c6:	bf00      	nop
 80055c8:	3730      	adds	r7, #48	; 0x30
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20014288 	.word	0x20014288

080055d4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08e      	sub	sp, #56	; 0x38
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80055e2:	f3ef 8311 	mrs	r3, BASEPRI
 80055e6:	f04f 0120 	mov.w	r1, #32
 80055ea:	f381 8811 	msr	BASEPRI, r1
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	4832      	ldr	r0, [pc, #200]	; (80056bc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80055f2:	f7ff fd17 	bl	8005024 <_PreparePacket>
 80055f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
 8005604:	e00b      	b.n	800561e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	1c59      	adds	r1, r3, #1
 800560e:	6379      	str	r1, [r7, #52]	; 0x34
 8005610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2b7f      	cmp	r3, #127	; 0x7f
 8005622:	d8f0      	bhi.n	8005606 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	637a      	str	r2, [r7, #52]	; 0x34
 800562a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	62bb      	str	r3, [r7, #40]	; 0x28
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	2b7f      	cmp	r3, #127	; 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	e00b      	b.n	800568e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	1c59      	adds	r1, r3, #1
 800567e:	6279      	str	r1, [r7, #36]	; 0x24
 8005680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	2b7f      	cmp	r3, #127	; 0x7f
 8005692:	d8f0      	bhi.n	8005676 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	627a      	str	r2, [r7, #36]	; 0x24
 800569a:	6a3a      	ldr	r2, [r7, #32]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	69b8      	ldr	r0, [r7, #24]
 80056aa:	f7ff fda5 	bl	80051f8 <_SendPacket>
  RECORD_END();
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f383 8811 	msr	BASEPRI, r3
}
 80056b4:	bf00      	nop
 80056b6:	3738      	adds	r7, #56	; 0x38
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20014288 	.word	0x20014288

080056c0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b090      	sub	sp, #64	; 0x40
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056ce:	f3ef 8311 	mrs	r3, BASEPRI
 80056d2:	f04f 0120 	mov.w	r1, #32
 80056d6:	f381 8811 	msr	BASEPRI, r1
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	4840      	ldr	r0, [pc, #256]	; (80057e0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80056de:	f7ff fca1 	bl	8005024 <_PreparePacket>
 80056e2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80056f0:	e00b      	b.n	800570a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f8:	1c59      	adds	r1, r3, #1
 80056fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80056fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	09db      	lsrs	r3, r3, #7
 8005708:	63bb      	str	r3, [r7, #56]	; 0x38
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	2b7f      	cmp	r3, #127	; 0x7f
 800570e:	d8f0      	bhi.n	80056f2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
 8005728:	e00b      	b.n	8005742 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	b2da      	uxtb	r2, r3
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	1c59      	adds	r1, r3, #1
 8005732:	6379      	str	r1, [r7, #52]	; 0x34
 8005734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	09db      	lsrs	r3, r3, #7
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2b7f      	cmp	r3, #127	; 0x7f
 8005746:	d8f0      	bhi.n	800572a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	637a      	str	r2, [r7, #52]	; 0x34
 800574e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005760:	e00b      	b.n	800577a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	b2da      	uxtb	r2, r3
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800576c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	09db      	lsrs	r3, r3, #7
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	2b7f      	cmp	r3, #127	; 0x7f
 800577e:	d8f0      	bhi.n	8005762 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
 8005794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	e00b      	b.n	80057b2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	1c59      	adds	r1, r3, #1
 80057a2:	6279      	str	r1, [r7, #36]	; 0x24
 80057a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	2b7f      	cmp	r3, #127	; 0x7f
 80057b6:	d8f0      	bhi.n	800579a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	627a      	str	r2, [r7, #36]	; 0x24
 80057be:	6a3a      	ldr	r2, [r7, #32]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	6979      	ldr	r1, [r7, #20]
 80057cc:	69b8      	ldr	r0, [r7, #24]
 80057ce:	f7ff fd13 	bl	80051f8 <_SendPacket>
  RECORD_END();
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f383 8811 	msr	BASEPRI, r3
}
 80057d8:	bf00      	nop
 80057da:	3740      	adds	r7, #64	; 0x40
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20014288 	.word	0x20014288

080057e4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	; 0x30
 80057e8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80057ea:	4b58      	ldr	r3, [pc, #352]	; (800594c <SEGGER_SYSVIEW_Start+0x168>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80057f0:	f3ef 8311 	mrs	r3, BASEPRI
 80057f4:	f04f 0120 	mov.w	r1, #32
 80057f8:	f381 8811 	msr	BASEPRI, r1
 80057fc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80057fe:	4b53      	ldr	r3, [pc, #332]	; (800594c <SEGGER_SYSVIEW_Start+0x168>)
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	220a      	movs	r2, #10
 8005804:	4952      	ldr	r1, [pc, #328]	; (8005950 <SEGGER_SYSVIEW_Start+0x16c>)
 8005806:	4618      	mov	r0, r3
 8005808:	f7fa fce2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005812:	200a      	movs	r0, #10
 8005814:	f7ff fe2a 	bl	800546c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005818:	f3ef 8311 	mrs	r3, BASEPRI
 800581c:	f04f 0120 	mov.w	r1, #32
 8005820:	f381 8811 	msr	BASEPRI, r1
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	484b      	ldr	r0, [pc, #300]	; (8005954 <SEGGER_SYSVIEW_Start+0x170>)
 8005828:	f7ff fbfc 	bl	8005024 <_PreparePacket>
 800582c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005836:	4b45      	ldr	r3, [pc, #276]	; (800594c <SEGGER_SYSVIEW_Start+0x168>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
 800583c:	e00b      	b.n	8005856 <SEGGER_SYSVIEW_Start+0x72>
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	b2da      	uxtb	r2, r3
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	62bb      	str	r3, [r7, #40]	; 0x28
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	2b7f      	cmp	r3, #127	; 0x7f
 800585a:	d8f0      	bhi.n	800583e <SEGGER_SYSVIEW_Start+0x5a>
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
 8005870:	4b36      	ldr	r3, [pc, #216]	; (800594c <SEGGER_SYSVIEW_Start+0x168>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	e00b      	b.n	8005890 <SEGGER_SYSVIEW_Start+0xac>
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	b2da      	uxtb	r2, r3
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	1c59      	adds	r1, r3, #1
 8005880:	6279      	str	r1, [r7, #36]	; 0x24
 8005882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	09db      	lsrs	r3, r3, #7
 800588e:	623b      	str	r3, [r7, #32]
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	2b7f      	cmp	r3, #127	; 0x7f
 8005894:	d8f0      	bhi.n	8005878 <SEGGER_SYSVIEW_Start+0x94>
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	627a      	str	r2, [r7, #36]	; 0x24
 800589c:	6a3a      	ldr	r2, [r7, #32]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	4b28      	ldr	r3, [pc, #160]	; (800594c <SEGGER_SYSVIEW_Start+0x168>)
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	e00b      	b.n	80058ca <SEGGER_SYSVIEW_Start+0xe6>
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	1c59      	adds	r1, r3, #1
 80058ba:	61f9      	str	r1, [r7, #28]
 80058bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	09db      	lsrs	r3, r3, #7
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b7f      	cmp	r3, #127	; 0x7f
 80058ce:	d8f0      	bhi.n	80058b2 <SEGGER_SYSVIEW_Start+0xce>
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	61fa      	str	r2, [r7, #28]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	2300      	movs	r3, #0
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	e00b      	b.n	8005902 <SEGGER_SYSVIEW_Start+0x11e>
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	6179      	str	r1, [r7, #20]
 80058f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	09db      	lsrs	r3, r3, #7
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b7f      	cmp	r3, #127	; 0x7f
 8005906:	d8f0      	bhi.n	80058ea <SEGGER_SYSVIEW_Start+0x106>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	617a      	str	r2, [r7, #20]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005918:	2218      	movs	r2, #24
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff fc6b 	bl	80051f8 <_SendPacket>
      RECORD_END();
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <SEGGER_SYSVIEW_Start+0x168>)
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <SEGGER_SYSVIEW_Start+0x168>)
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005936:	f000 f9eb 	bl	8005d10 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800593a:	f000 f9b1 	bl	8005ca0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800593e:	f000 fc81 	bl	8006244 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005942:	bf00      	nop
 8005944:	3730      	adds	r7, #48	; 0x30
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20014258 	.word	0x20014258
 8005950:	0800655c 	.word	0x0800655c
 8005954:	20014288 	.word	0x20014288

08005958 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800595e:	f3ef 8311 	mrs	r3, BASEPRI
 8005962:	f04f 0120 	mov.w	r1, #32
 8005966:	f381 8811 	msr	BASEPRI, r1
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	480b      	ldr	r0, [pc, #44]	; (800599c <SEGGER_SYSVIEW_Stop+0x44>)
 800596e:	f7ff fb59 	bl	8005024 <_PreparePacket>
 8005972:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800597c:	220b      	movs	r2, #11
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6838      	ldr	r0, [r7, #0]
 8005982:	f7ff fc39 	bl	80051f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f383 8811 	msr	BASEPRI, r3
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20014288 	.word	0x20014288
 80059a0:	20014258 	.word	0x20014258

080059a4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08c      	sub	sp, #48	; 0x30
 80059a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059aa:	f3ef 8311 	mrs	r3, BASEPRI
 80059ae:	f04f 0120 	mov.w	r1, #32
 80059b2:	f381 8811 	msr	BASEPRI, r1
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	4845      	ldr	r0, [pc, #276]	; (8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80059ba:	f7ff fb33 	bl	8005024 <_PreparePacket>
 80059be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c8:	4b42      	ldr	r3, [pc, #264]	; (8005ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ce:	e00b      	b.n	80059e8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	09db      	lsrs	r3, r3, #7
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b7f      	cmp	r3, #127	; 0x7f
 80059ec:	d8f0      	bhi.n	80059d0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
 8005a02:	4b34      	ldr	r3, [pc, #208]	; (8005ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	623b      	str	r3, [r7, #32]
 8005a08:	e00b      	b.n	8005a22 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	1c59      	adds	r1, r3, #1
 8005a12:	6279      	str	r1, [r7, #36]	; 0x24
 8005a14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	09db      	lsrs	r3, r3, #7
 8005a20:	623b      	str	r3, [r7, #32]
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	2b7f      	cmp	r3, #127	; 0x7f
 8005a26:	d8f0      	bhi.n	8005a0a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a2e:	6a3a      	ldr	r2, [r7, #32]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	e00b      	b.n	8005a5c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	61f9      	str	r1, [r7, #28]
 8005a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	09db      	lsrs	r3, r3, #7
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a60:	d8f0      	bhi.n	8005a44 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	61fa      	str	r2, [r7, #28]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e00b      	b.n	8005a94 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	1c59      	adds	r1, r3, #1
 8005a84:	6179      	str	r1, [r7, #20]
 8005a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	09db      	lsrs	r3, r3, #7
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b7f      	cmp	r3, #127	; 0x7f
 8005a98:	d8f0      	bhi.n	8005a7c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	617a      	str	r2, [r7, #20]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005aaa:	2218      	movs	r2, #24
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	68b8      	ldr	r0, [r7, #8]
 8005ab0:	f7ff fba2 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ac2:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	4798      	blx	r3
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3730      	adds	r7, #48	; 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20014288 	.word	0x20014288
 8005ad4:	20014258 	.word	0x20014258

08005ad8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b092      	sub	sp, #72	; 0x48
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae4:	f04f 0120 	mov.w	r1, #32
 8005ae8:	f381 8811 	msr	BASEPRI, r1
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	486a      	ldr	r0, [pc, #424]	; (8005c98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005af0:	f7ff fa98 	bl	8005024 <_PreparePacket>
 8005af4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	647b      	str	r3, [r7, #68]	; 0x44
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b66      	ldr	r3, [pc, #408]	; (8005c9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	643b      	str	r3, [r7, #64]	; 0x40
 8005b0a:	e00b      	b.n	8005b24 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	6479      	str	r1, [r7, #68]	; 0x44
 8005b16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b20:	09db      	lsrs	r3, r3, #7
 8005b22:	643b      	str	r3, [r7, #64]	; 0x40
 8005b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b26:	2b7f      	cmp	r3, #127	; 0x7f
 8005b28:	d8f0      	bhi.n	8005b0c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b44:	e00b      	b.n	8005b5e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4c:	1c59      	adds	r1, r3, #1
 8005b4e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	09db      	lsrs	r3, r3, #7
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	2b7f      	cmp	r3, #127	; 0x7f
 8005b62:	d8f0      	bhi.n	8005b46 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b72:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fa01 	bl	8004f84 <_EncodeStr>
 8005b82:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b84:	2209      	movs	r2, #9
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	6938      	ldr	r0, [r7, #16]
 8005b8a:	f7ff fb35 	bl	80051f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b40      	ldr	r3, [pc, #256]	; (8005c9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba2:	e00b      	b.n	8005bbc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	1c59      	adds	r1, r3, #1
 8005bac:	6379      	str	r1, [r7, #52]	; 0x34
 8005bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	09db      	lsrs	r3, r3, #7
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc0:	d8f0      	bhi.n	8005ba4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	637a      	str	r2, [r7, #52]	; 0x34
 8005bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bdc:	e00b      	b.n	8005bf6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	09db      	lsrs	r3, r3, #7
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bfa:	d8f0      	bhi.n	8005bde <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	e00b      	b.n	8005c30 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	6279      	str	r1, [r7, #36]	; 0x24
 8005c22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	09db      	lsrs	r3, r3, #7
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	2b7f      	cmp	r3, #127	; 0x7f
 8005c34:	d8f0      	bhi.n	8005c18 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	e00b      	b.n	8005c68 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	1c59      	adds	r1, r3, #1
 8005c58:	61f9      	str	r1, [r7, #28]
 8005c5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	09db      	lsrs	r3, r3, #7
 8005c66:	61bb      	str	r3, [r7, #24]
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6c:	d8f0      	bhi.n	8005c50 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	61fa      	str	r2, [r7, #28]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c7e:	2215      	movs	r2, #21
 8005c80:	68f9      	ldr	r1, [r7, #12]
 8005c82:	6938      	ldr	r0, [r7, #16]
 8005c84:	f7ff fab8 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f383 8811 	msr	BASEPRI, r3
}
 8005c8e:	bf00      	nop
 8005c90:	3748      	adds	r7, #72	; 0x48
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20014288 	.word	0x20014288
 8005c9c:	20014258 	.word	0x20014258

08005ca0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005cb6:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4798      	blx	r3
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20014258 	.word	0x20014258

08005cc8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd4:	f04f 0120 	mov.w	r1, #32
 8005cd8:	f381 8811 	msr	BASEPRI, r1
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	480b      	ldr	r0, [pc, #44]	; (8005d0c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005ce0:	f7ff f9a0 	bl	8005024 <_PreparePacket>
 8005ce4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	6938      	ldr	r0, [r7, #16]
 8005cec:	f7ff f94a 	bl	8004f84 <_EncodeStr>
 8005cf0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005cf2:	220e      	movs	r2, #14
 8005cf4:	68f9      	ldr	r1, [r7, #12]
 8005cf6:	6938      	ldr	r0, [r7, #16]
 8005cf8:	f7ff fa7e 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f383 8811 	msr	BASEPRI, r3
}
 8005d02:	bf00      	nop
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20014288 	.word	0x20014288

08005d10 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d019      	beq.n	8005d52 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d014      	beq.n	8005d52 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4798      	blx	r3
 8005d30:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d34:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	f04f 0400 	mov.w	r4, #0
 8005d42:	0013      	movs	r3, r2
 8005d44:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d46:	461a      	mov	r2, r3
 8005d48:	4601      	mov	r1, r0
 8005d4a:	200d      	movs	r0, #13
 8005d4c:	f7ff fbe8 	bl	8005520 <SEGGER_SYSVIEW_RecordU32x2>
 8005d50:	e005      	b.n	8005d5e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4619      	mov	r1, r3
 8005d58:	200c      	movs	r0, #12
 8005d5a:	f7ff fba5 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20014258 	.word	0x20014258
 8005d6c:	e0001004 	.word	0xe0001004

08005d70 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d76:	f3ef 8311 	mrs	r3, BASEPRI
 8005d7a:	f04f 0120 	mov.w	r1, #32
 8005d7e:	f381 8811 	msr	BASEPRI, r1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	4819      	ldr	r0, [pc, #100]	; (8005dec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d86:	f7ff f94d 	bl	8005024 <_PreparePacket>
 8005d8a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005d90:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d98:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e00b      	b.n	8005dbc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	6179      	str	r1, [r7, #20]
 8005dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	09db      	lsrs	r3, r3, #7
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc0:	d8f0      	bhi.n	8005da4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	617a      	str	r2, [r7, #20]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	68b8      	ldr	r0, [r7, #8]
 8005dd8:	f7ff fa0e 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f383 8811 	msr	BASEPRI, r3
}
 8005de2:	bf00      	nop
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20014288 	.word	0x20014288
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfe:	f04f 0120 	mov.w	r1, #32
 8005e02:	f381 8811 	msr	BASEPRI, r1
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	4807      	ldr	r0, [pc, #28]	; (8005e28 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e0a:	f7ff f90b 	bl	8005024 <_PreparePacket>
 8005e0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005e10:	2203      	movs	r2, #3
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6838      	ldr	r0, [r7, #0]
 8005e16:	f7ff f9ef 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f383 8811 	msr	BASEPRI, r3
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20014288 	.word	0x20014288

08005e2c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e32:	f3ef 8311 	mrs	r3, BASEPRI
 8005e36:	f04f 0120 	mov.w	r1, #32
 8005e3a:	f381 8811 	msr	BASEPRI, r1
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	4807      	ldr	r0, [pc, #28]	; (8005e60 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e42:	f7ff f8ef 	bl	8005024 <_PreparePacket>
 8005e46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e48:	2212      	movs	r2, #18
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f7ff f9d3 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f383 8811 	msr	BASEPRI, r3
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20014288 	.word	0x20014288

08005e64 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6e:	f04f 0120 	mov.w	r1, #32
 8005e72:	f381 8811 	msr	BASEPRI, r1
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	4807      	ldr	r0, [pc, #28]	; (8005e98 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e7a:	f7ff f8d3 	bl	8005024 <_PreparePacket>
 8005e7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e80:	2211      	movs	r2, #17
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6838      	ldr	r0, [r7, #0]
 8005e86:	f7ff f9b7 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f383 8811 	msr	BASEPRI, r3
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20014288 	.word	0x20014288

08005e9c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea8:	f04f 0120 	mov.w	r1, #32
 8005eac:	f381 8811 	msr	BASEPRI, r1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	4819      	ldr	r0, [pc, #100]	; (8005f18 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005eb4:	f7ff f8b6 	bl	8005024 <_PreparePacket>
 8005eb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ebe:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	e00b      	b.n	8005eea <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	1c59      	adds	r1, r3, #1
 8005eda:	61f9      	str	r1, [r7, #28]
 8005edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	09db      	lsrs	r3, r3, #7
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b7f      	cmp	r3, #127	; 0x7f
 8005eee:	d8f0      	bhi.n	8005ed2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	61fa      	str	r2, [r7, #28]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f00:	2208      	movs	r2, #8
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	6938      	ldr	r0, [r7, #16]
 8005f06:	f7ff f977 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f383 8811 	msr	BASEPRI, r3
}
 8005f10:	bf00      	nop
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20014288 	.word	0x20014288
 8005f1c:	20014258 	.word	0x20014258

08005f20 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f28:	f3ef 8311 	mrs	r3, BASEPRI
 8005f2c:	f04f 0120 	mov.w	r1, #32
 8005f30:	f381 8811 	msr	BASEPRI, r1
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	4819      	ldr	r0, [pc, #100]	; (8005f9c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f38:	f7ff f874 	bl	8005024 <_PreparePacket>
 8005f3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f42:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	e00b      	b.n	8005f6e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	1c59      	adds	r1, r3, #1
 8005f5e:	61f9      	str	r1, [r7, #28]
 8005f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	09db      	lsrs	r3, r3, #7
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b7f      	cmp	r3, #127	; 0x7f
 8005f72:	d8f0      	bhi.n	8005f56 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	61fa      	str	r2, [r7, #28]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f84:	2204      	movs	r2, #4
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	6938      	ldr	r0, [r7, #16]
 8005f8a:	f7ff f935 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f383 8811 	msr	BASEPRI, r3
}
 8005f94:	bf00      	nop
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20014288 	.word	0x20014288
 8005fa0:	20014258 	.word	0x20014258

08005fa4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fac:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb0:	f04f 0120 	mov.w	r1, #32
 8005fb4:	f381 8811 	msr	BASEPRI, r1
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	4819      	ldr	r0, [pc, #100]	; (8006020 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005fbc:	f7ff f832 	bl	8005024 <_PreparePacket>
 8005fc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fc6:	4b17      	ldr	r3, [pc, #92]	; (8006024 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	e00b      	b.n	8005ff2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1c59      	adds	r1, r3, #1
 8005fe2:	61f9      	str	r1, [r7, #28]
 8005fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	09db      	lsrs	r3, r3, #7
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff6:	d8f0      	bhi.n	8005fda <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	61fa      	str	r2, [r7, #28]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006008:	2206      	movs	r2, #6
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6938      	ldr	r0, [r7, #16]
 800600e:	f7ff f8f3 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f383 8811 	msr	BASEPRI, r3
}
 8006018:	bf00      	nop
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20014288 	.word	0x20014288
 8006024:	20014258 	.word	0x20014258

08006028 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	; 0x28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006032:	f3ef 8311 	mrs	r3, BASEPRI
 8006036:	f04f 0120 	mov.w	r1, #32
 800603a:	f381 8811 	msr	BASEPRI, r1
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	4827      	ldr	r0, [pc, #156]	; (80060e0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006042:	f7fe ffef 	bl	8005024 <_PreparePacket>
 8006046:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800604c:	4b25      	ldr	r3, [pc, #148]	; (80060e4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	e00b      	b.n	8006078 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	b2da      	uxtb	r2, r3
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	1c59      	adds	r1, r3, #1
 8006068:	6279      	str	r1, [r7, #36]	; 0x24
 800606a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	09db      	lsrs	r3, r3, #7
 8006076:	623b      	str	r3, [r7, #32]
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	2b7f      	cmp	r3, #127	; 0x7f
 800607c:	d8f0      	bhi.n	8006060 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	627a      	str	r2, [r7, #36]	; 0x24
 8006084:	6a3a      	ldr	r2, [r7, #32]
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	e00b      	b.n	80060b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	1c59      	adds	r1, r3, #1
 80060a0:	61f9      	str	r1, [r7, #28]
 80060a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	09db      	lsrs	r3, r3, #7
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b7f      	cmp	r3, #127	; 0x7f
 80060b4:	d8f0      	bhi.n	8006098 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	61fa      	str	r2, [r7, #28]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80060c6:	2207      	movs	r2, #7
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	6938      	ldr	r0, [r7, #16]
 80060cc:	f7ff f894 	bl	80051f8 <_SendPacket>
  RECORD_END();
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f383 8811 	msr	BASEPRI, r3
}
 80060d6:	bf00      	nop
 80060d8:	3728      	adds	r7, #40	; 0x28
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20014288 	.word	0x20014288
 80060e4:	20014258 	.word	0x20014258

080060e8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80060f0:	4b04      	ldr	r3, [pc, #16]	; (8006104 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	1ad3      	subs	r3, r2, r3
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	20014258 	.word	0x20014258

08006108 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b08c      	sub	sp, #48	; 0x30
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006112:	4b3b      	ldr	r3, [pc, #236]	; (8006200 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d06d      	beq.n	80061f6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800611a:	4b39      	ldr	r3, [pc, #228]	; (8006200 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006120:	2300      	movs	r3, #0
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
 8006124:	e008      	b.n	8006138 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	3301      	adds	r3, #1
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613c:	429a      	cmp	r2, r3
 800613e:	d3f2      	bcc.n	8006126 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006140:	e000      	b.n	8006144 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006142:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d055      	beq.n	80061f6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800614a:	f3ef 8311 	mrs	r3, BASEPRI
 800614e:	f04f 0120 	mov.w	r1, #32
 8006152:	f381 8811 	msr	BASEPRI, r1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	482a      	ldr	r0, [pc, #168]	; (8006204 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800615a:	f7fe ff63 	bl	8005024 <_PreparePacket>
 800615e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	e00b      	b.n	8006186 <SEGGER_SYSVIEW_SendModule+0x7e>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	1c59      	adds	r1, r3, #1
 8006176:	6279      	str	r1, [r7, #36]	; 0x24
 8006178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	09db      	lsrs	r3, r3, #7
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2b7f      	cmp	r3, #127	; 0x7f
 800618a:	d8f0      	bhi.n	800616e <SEGGER_SYSVIEW_SendModule+0x66>
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	627a      	str	r2, [r7, #36]	; 0x24
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e00b      	b.n	80061c0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	61f9      	str	r1, [r7, #28]
 80061b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	09db      	lsrs	r3, r3, #7
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b7f      	cmp	r3, #127	; 0x7f
 80061c4:	d8f0      	bhi.n	80061a8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	61fa      	str	r2, [r7, #28]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2280      	movs	r2, #128	; 0x80
 80061dc:	4619      	mov	r1, r3
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7fe fed0 	bl	8004f84 <_EncodeStr>
 80061e4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80061e6:	2216      	movs	r2, #22
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	6938      	ldr	r0, [r7, #16]
 80061ec:	f7ff f804 	bl	80051f8 <_SendPacket>
      RECORD_END();
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80061f6:	bf00      	nop
 80061f8:	3730      	adds	r7, #48	; 0x30
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20014280 	.word	0x20014280
 8006204:	20014288 	.word	0x20014288

08006208 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00f      	beq.n	8006236 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f2      	bne.n	800621c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20014280 	.word	0x20014280

08006244 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800624a:	f3ef 8311 	mrs	r3, BASEPRI
 800624e:	f04f 0120 	mov.w	r1, #32
 8006252:	f381 8811 	msr	BASEPRI, r1
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	4817      	ldr	r0, [pc, #92]	; (80062b8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800625a:	f7fe fee3 	bl	8005024 <_PreparePacket>
 800625e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	4b14      	ldr	r3, [pc, #80]	; (80062bc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	e00b      	b.n	8006288 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	6179      	str	r1, [r7, #20]
 800627a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	09db      	lsrs	r3, r3, #7
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b7f      	cmp	r3, #127	; 0x7f
 800628c:	d8f0      	bhi.n	8006270 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	617a      	str	r2, [r7, #20]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800629e:	221b      	movs	r2, #27
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	68b8      	ldr	r0, [r7, #8]
 80062a4:	f7fe ffa8 	bl	80051f8 <_SendPacket>
  RECORD_END();
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f383 8811 	msr	BASEPRI, r3
}
 80062ae:	bf00      	nop
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20014288 	.word	0x20014288
 80062bc:	20014284 	.word	0x20014284

080062c0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062c8:	f3ef 8311 	mrs	r3, BASEPRI
 80062cc:	f04f 0120 	mov.w	r1, #32
 80062d0:	f381 8811 	msr	BASEPRI, r1
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	4827      	ldr	r0, [pc, #156]	; (8006374 <SEGGER_SYSVIEW_Warn+0xb4>)
 80062d8:	f7fe fea4 	bl	8005024 <_PreparePacket>
 80062dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062de:	2280      	movs	r2, #128	; 0x80
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	6938      	ldr	r0, [r7, #16]
 80062e4:	f7fe fe4e 	bl	8004f84 <_EncodeStr>
 80062e8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
 80062ee:	2301      	movs	r3, #1
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	e00b      	b.n	800630c <SEGGER_SYSVIEW_Warn+0x4c>
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	1c59      	adds	r1, r3, #1
 80062fc:	6279      	str	r1, [r7, #36]	; 0x24
 80062fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	09db      	lsrs	r3, r3, #7
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	2b7f      	cmp	r3, #127	; 0x7f
 8006310:	d8f0      	bhi.n	80062f4 <SEGGER_SYSVIEW_Warn+0x34>
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	627a      	str	r2, [r7, #36]	; 0x24
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	2300      	movs	r3, #0
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	e00b      	b.n	8006344 <SEGGER_SYSVIEW_Warn+0x84>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	1c59      	adds	r1, r3, #1
 8006334:	61f9      	str	r1, [r7, #28]
 8006336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	09db      	lsrs	r3, r3, #7
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b7f      	cmp	r3, #127	; 0x7f
 8006348:	d8f0      	bhi.n	800632c <SEGGER_SYSVIEW_Warn+0x6c>
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	61fa      	str	r2, [r7, #28]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800635a:	221a      	movs	r2, #26
 800635c:	68f9      	ldr	r1, [r7, #12]
 800635e:	6938      	ldr	r0, [r7, #16]
 8006360:	f7fe ff4a 	bl	80051f8 <_SendPacket>
  RECORD_END();
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f383 8811 	msr	BASEPRI, r3
}
 800636a:	bf00      	nop
 800636c:	3728      	adds	r7, #40	; 0x28
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20014288 	.word	0x20014288

08006378 <__libc_init_array>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4e0d      	ldr	r6, [pc, #52]	; (80063b0 <__libc_init_array+0x38>)
 800637c:	4c0d      	ldr	r4, [pc, #52]	; (80063b4 <__libc_init_array+0x3c>)
 800637e:	1ba4      	subs	r4, r4, r6
 8006380:	10a4      	asrs	r4, r4, #2
 8006382:	2500      	movs	r5, #0
 8006384:	42a5      	cmp	r5, r4
 8006386:	d109      	bne.n	800639c <__libc_init_array+0x24>
 8006388:	4e0b      	ldr	r6, [pc, #44]	; (80063b8 <__libc_init_array+0x40>)
 800638a:	4c0c      	ldr	r4, [pc, #48]	; (80063bc <__libc_init_array+0x44>)
 800638c:	f000 f83a 	bl	8006404 <_init>
 8006390:	1ba4      	subs	r4, r4, r6
 8006392:	10a4      	asrs	r4, r4, #2
 8006394:	2500      	movs	r5, #0
 8006396:	42a5      	cmp	r5, r4
 8006398:	d105      	bne.n	80063a6 <__libc_init_array+0x2e>
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a0:	4798      	blx	r3
 80063a2:	3501      	adds	r5, #1
 80063a4:	e7ee      	b.n	8006384 <__libc_init_array+0xc>
 80063a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063aa:	4798      	blx	r3
 80063ac:	3501      	adds	r5, #1
 80063ae:	e7f2      	b.n	8006396 <__libc_init_array+0x1e>
 80063b0:	08006570 	.word	0x08006570
 80063b4:	08006570 	.word	0x08006570
 80063b8:	08006570 	.word	0x08006570
 80063bc:	08006574 	.word	0x08006574

080063c0 <memcmp>:
 80063c0:	b530      	push	{r4, r5, lr}
 80063c2:	2400      	movs	r4, #0
 80063c4:	42a2      	cmp	r2, r4
 80063c6:	d101      	bne.n	80063cc <memcmp+0xc>
 80063c8:	2000      	movs	r0, #0
 80063ca:	e007      	b.n	80063dc <memcmp+0x1c>
 80063cc:	5d03      	ldrb	r3, [r0, r4]
 80063ce:	3401      	adds	r4, #1
 80063d0:	190d      	adds	r5, r1, r4
 80063d2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80063d6:	42ab      	cmp	r3, r5
 80063d8:	d0f4      	beq.n	80063c4 <memcmp+0x4>
 80063da:	1b58      	subs	r0, r3, r5
 80063dc:	bd30      	pop	{r4, r5, pc}

080063de <memcpy>:
 80063de:	b510      	push	{r4, lr}
 80063e0:	1e43      	subs	r3, r0, #1
 80063e2:	440a      	add	r2, r1
 80063e4:	4291      	cmp	r1, r2
 80063e6:	d100      	bne.n	80063ea <memcpy+0xc>
 80063e8:	bd10      	pop	{r4, pc}
 80063ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f2:	e7f7      	b.n	80063e4 <memcpy+0x6>

080063f4 <memset>:
 80063f4:	4402      	add	r2, r0
 80063f6:	4603      	mov	r3, r0
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d100      	bne.n	80063fe <memset+0xa>
 80063fc:	4770      	bx	lr
 80063fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006402:	e7f9      	b.n	80063f8 <memset+0x4>

08006404 <_init>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

08006410 <_fini>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr
