
xmas_crossing_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000719c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800732c  0800732c  0001732c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d0  080074d0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074d8  080074d8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080074e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a914  20000014  080074f4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a928  080074f4  0002a928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a3b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003387  00000000  00000000  00038a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  0003be08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003d198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242fd  00000000  00000000  0003e370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014a1f  00000000  00000000  0006266d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6500  00000000  00000000  0007708c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d58c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005094  00000000  00000000  0014d608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007314 	.word	0x08007314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007314 	.word	0x08007314

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80001de:	f100 0618 	add.w	r6, r0, #24
 80001e2:	6930      	ldr	r0, [r6, #16]
 80001e4:	68f7      	ldr	r7, [r6, #12]
 80001e6:	6875      	ldr	r5, [r6, #4]
 80001e8:	4287      	cmp	r7, r0
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
 80001ec:	68b3      	ldr	r3, [r6, #8]
 80001ee:	1bdc      	subs	r4, r3, r7
 80001f0:	1e63      	subs	r3, r4, #1
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
 80001f6:	197d      	adds	r5, r7, r5
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
 8000204:	3a01      	subs	r2, #1
 8000206:	d005      	beq.n	8000214 <_CSDone>
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
 8000210:	3a01      	subs	r2, #1
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
 8000214:	f3bf 8f5f 	dmb	sy
 8000218:	60f0      	str	r0, [r6, #12]
 800021a:	2001      	movs	r0, #1
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
 8000220:	18c0      	adds	r0, r0, r3
 8000222:	4290      	cmp	r0, r2
 8000224:	d319      	bcc.n	800025a <_Case3>
 8000226:	1978      	adds	r0, r7, r5
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
 8000232:	3c01      	subs	r4, #1
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
 8000236:	1c14      	adds	r4, r2, #0
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
 8000246:	f3bf 8f5f 	dmb	sy
 800024a:	60f4      	str	r4, [r6, #12]
 800024c:	2001      	movs	r0, #1
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
 8000252:	1bc0      	subs	r0, r0, r7
 8000254:	3801      	subs	r0, #1
 8000256:	4290      	cmp	r0, r2
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
 800025a:	2000      	movs	r0, #0
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
 800025e:	4770      	bx	lr
 8000260:	2001a880 	.word	0x2001a880

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b972 	b.w	8000560 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14b      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	d967      	bls.n	8000378 <__udivmoddi4+0xe4>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0720 	rsb	r7, r2, #32
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ba:	4095      	lsls	r5, r2
 80002bc:	ea47 0803 	orr.w	r8, r7, r3
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002cc:	fa1f fc85 	uxth.w	ip, r5
 80002d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d8:	fb07 f10c 	mul.w	r1, r7, ip
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18eb      	adds	r3, r5, r3
 80002e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e6:	f080 811b 	bcs.w	8000520 <__udivmoddi4+0x28c>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8118 	bls.w	8000520 <__udivmoddi4+0x28c>
 80002f0:	3f02      	subs	r7, #2
 80002f2:	442b      	add	r3, r5
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fc0c 	mul.w	ip, r0, ip
 8000308:	45a4      	cmp	ip, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8107 	bcs.w	8000524 <__udivmoddi4+0x290>
 8000316:	45a4      	cmp	ip, r4
 8000318:	f240 8104 	bls.w	8000524 <__udivmoddi4+0x290>
 800031c:	3802      	subs	r0, #2
 800031e:	442c      	add	r4, r5
 8000320:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000324:	eba4 040c 	sub.w	r4, r4, ip
 8000328:	2700      	movs	r7, #0
 800032a:	b11e      	cbz	r6, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c6 4300 	strd	r4, r3, [r6]
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0xbe>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80eb 	beq.w	800051a <__udivmoddi4+0x286>
 8000344:	2700      	movs	r7, #0
 8000346:	e9c6 0100 	strd	r0, r1, [r6]
 800034a:	4638      	mov	r0, r7
 800034c:	4639      	mov	r1, r7
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f783 	clz	r7, r3
 8000356:	2f00      	cmp	r7, #0
 8000358:	d147      	bne.n	80003ea <__udivmoddi4+0x156>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xd0>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80fa 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0303 	sbc.w	r3, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	4698      	mov	r8, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0e0      	beq.n	8000334 <__udivmoddi4+0xa0>
 8000372:	e9c6 4800 	strd	r4, r8, [r6]
 8000376:	e7dd      	b.n	8000334 <__udivmoddi4+0xa0>
 8000378:	b902      	cbnz	r2, 800037c <__udivmoddi4+0xe8>
 800037a:	deff      	udf	#255	; 0xff
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	2a00      	cmp	r2, #0
 8000382:	f040 808f 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000386:	1b49      	subs	r1, r1, r5
 8000388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800038c:	fa1f f885 	uxth.w	r8, r5
 8000390:	2701      	movs	r7, #1
 8000392:	fbb1 fcfe 	udiv	ip, r1, lr
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fb0e 111c 	mls	r1, lr, ip, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb08 f10c 	mul.w	r1, r8, ip
 80003a4:	4299      	cmp	r1, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a8:	18eb      	adds	r3, r5, r3
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4299      	cmp	r1, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1a59      	subs	r1, r3, r1
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x14c>
 80003d0:	192c      	adds	r4, r5, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x14a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80b6 	bhi.w	800054a <__udivmoddi4+0x2b6>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e79f      	b.n	800032a <__udivmoddi4+0x96>
 80003ea:	f1c7 0c20 	rsb	ip, r7, #32
 80003ee:	40bb      	lsls	r3, r7
 80003f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f8:	fa01 f407 	lsl.w	r4, r1, r7
 80003fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000400:	fa21 f30c 	lsr.w	r3, r1, ip
 8000404:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000408:	4325      	orrs	r5, r4
 800040a:	fbb3 f9f8 	udiv	r9, r3, r8
 800040e:	0c2c      	lsrs	r4, r5, #16
 8000410:	fb08 3319 	mls	r3, r8, r9, r3
 8000414:	fa1f fa8e 	uxth.w	sl, lr
 8000418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800041c:	fb09 f40a 	mul.w	r4, r9, sl
 8000420:	429c      	cmp	r4, r3
 8000422:	fa02 f207 	lsl.w	r2, r2, r7
 8000426:	fa00 f107 	lsl.w	r1, r0, r7
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1e 0303 	adds.w	r3, lr, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	f080 8087 	bcs.w	8000546 <__udivmoddi4+0x2b2>
 8000438:	429c      	cmp	r4, r3
 800043a:	f240 8084 	bls.w	8000546 <__udivmoddi4+0x2b2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4473      	add	r3, lr
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	b2ad      	uxth	r5, r5
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000454:	fb00 fa0a 	mul.w	sl, r0, sl
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1e 0404 	adds.w	r4, lr, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	d26b      	bcs.n	800053e <__udivmoddi4+0x2aa>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d969      	bls.n	800053e <__udivmoddi4+0x2aa>
 800046a:	3802      	subs	r0, #2
 800046c:	4474      	add	r4, lr
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c2      	mov	sl, r8
 800047e:	464b      	mov	r3, r9
 8000480:	d354      	bcc.n	800052c <__udivmoddi4+0x298>
 8000482:	d051      	beq.n	8000528 <__udivmoddi4+0x294>
 8000484:	2e00      	cmp	r6, #0
 8000486:	d069      	beq.n	800055c <__udivmoddi4+0x2c8>
 8000488:	ebb1 050a 	subs.w	r5, r1, sl
 800048c:	eb64 0403 	sbc.w	r4, r4, r3
 8000490:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000494:	40fd      	lsrs	r5, r7
 8000496:	40fc      	lsrs	r4, r7
 8000498:	ea4c 0505 	orr.w	r5, ip, r5
 800049c:	e9c6 5400 	strd	r5, r4, [r6]
 80004a0:	2700      	movs	r7, #0
 80004a2:	e747      	b.n	8000334 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ac:	4095      	lsls	r5, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	fa21 f303 	lsr.w	r3, r1, r3
 80004b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ba:	4338      	orrs	r0, r7
 80004bc:	0c01      	lsrs	r1, r0, #16
 80004be:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c2:	fa1f f885 	uxth.w	r8, r5
 80004c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb07 f308 	mul.w	r3, r7, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x256>
 80004da:	1869      	adds	r1, r5, r1
 80004dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e0:	d22f      	bcs.n	8000542 <__udivmoddi4+0x2ae>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d92d      	bls.n	8000542 <__udivmoddi4+0x2ae>
 80004e6:	3f02      	subs	r7, #2
 80004e8:	4429      	add	r1, r5
 80004ea:	1acb      	subs	r3, r1, r3
 80004ec:	b281      	uxth	r1, r0
 80004ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb00 f308 	mul.w	r3, r0, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x27e>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f100 3cff 	add.w	ip, r0, #4294967295
 8000508:	d217      	bcs.n	800053a <__udivmoddi4+0x2a6>
 800050a:	428b      	cmp	r3, r1
 800050c:	d915      	bls.n	800053a <__udivmoddi4+0x2a6>
 800050e:	3802      	subs	r0, #2
 8000510:	4429      	add	r1, r5
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000518:	e73b      	b.n	8000392 <__udivmoddi4+0xfe>
 800051a:	4637      	mov	r7, r6
 800051c:	4630      	mov	r0, r6
 800051e:	e709      	b.n	8000334 <__udivmoddi4+0xa0>
 8000520:	4607      	mov	r7, r0
 8000522:	e6e7      	b.n	80002f4 <__udivmoddi4+0x60>
 8000524:	4618      	mov	r0, r3
 8000526:	e6fb      	b.n	8000320 <__udivmoddi4+0x8c>
 8000528:	4541      	cmp	r1, r8
 800052a:	d2ab      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 800052c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000530:	eb69 020e 	sbc.w	r2, r9, lr
 8000534:	3801      	subs	r0, #1
 8000536:	4613      	mov	r3, r2
 8000538:	e7a4      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053a:	4660      	mov	r0, ip
 800053c:	e7e9      	b.n	8000512 <__udivmoddi4+0x27e>
 800053e:	4618      	mov	r0, r3
 8000540:	e795      	b.n	800046e <__udivmoddi4+0x1da>
 8000542:	4667      	mov	r7, ip
 8000544:	e7d1      	b.n	80004ea <__udivmoddi4+0x256>
 8000546:	4681      	mov	r9, r0
 8000548:	e77c      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054a:	3802      	subs	r0, #2
 800054c:	442c      	add	r4, r5
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0x14c>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	442b      	add	r3, r5
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	4638      	mov	r0, r7
 800055a:	e708      	b.n	800036e <__udivmoddi4+0xda>
 800055c:	4637      	mov	r7, r6
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0xa0>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <software_timers_init>:

/* User Created Timer Handles
 * Must have a matching prototype!
 */
void software_timers_init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af02      	add	r7, sp, #8
	xTimers[0] = xTimerCreate(
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <software_timers_init+0x88>)
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000576:	481e      	ldr	r0, [pc, #120]	; (80005f0 <software_timers_init+0x8c>)
 8000578:	f004 f9bc 	bl	80048f4 <xTimerCreate>
 800057c:	4602      	mov	r2, r0
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <software_timers_init+0x90>)
 8000580:	601a      	str	r2, [r3, #0]
			pdMS_TO_TICKS(sensor_minimum_trigger_time_ms),
			pdFALSE,
			( void * ) 0,
			sensor1_cond_tim_callback );

	xTimers[1] = xTimerCreate(
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <software_timers_init+0x94>)
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800058e:	481b      	ldr	r0, [pc, #108]	; (80005fc <software_timers_init+0x98>)
 8000590:	f004 f9b0 	bl	80048f4 <xTimerCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <software_timers_init+0x90>)
 8000598:	605a      	str	r2, [r3, #4]
			pdMS_TO_TICKS(sensor_minimum_trigger_time_ms),
			pdFALSE,
			( void * ) 0,
			sensor2_cond_tim_callback );

	xTimers[2] = xTimerCreate(
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <software_timers_init+0x9c>)
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <software_timers_init+0xa0>)
 80005a8:	f004 f9a4 	bl	80048f4 <xTimerCreate>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <software_timers_init+0x90>)
 80005b0:	609a      	str	r2, [r3, #8]
			pdFALSE,
			( void * ) 0,
			CLC_train_exit_timeout_ballback );

	/* Make sure each timer created successfully */
	for ( uint8_t i=0 ; i<NUM_TIMERS ; ++i )
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	e012      	b.n	80005de <software_timers_init+0x7a>
	{
		configASSERT( xTimers[i] != NULL )
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <software_timers_init+0x90>)
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d109      	bne.n	80005d8 <software_timers_init+0x74>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c8:	f383 8811 	msr	BASEPRI, r3
 80005cc:	f3bf 8f6f 	isb	sy
 80005d0:	f3bf 8f4f 	dsb	sy
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	e7fe      	b.n	80005d6 <software_timers_init+0x72>
	for ( uint8_t i=0 ; i<NUM_TIMERS ; ++i )
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9e9      	bls.n	80005b8 <software_timers_init+0x54>
	}

}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	08000609 	.word	0x08000609
 80005f0:	0800732c 	.word	0x0800732c
 80005f4:	2001a770 	.word	0x2001a770
 80005f8:	0800061f 	.word	0x0800061f
 80005fc:	08007348 	.word	0x08007348
 8000600:	08000635 	.word	0x08000635
 8000604:	08007364 	.word	0x08007364

08000608 <sensor1_cond_tim_callback>:

void sensor1_cond_tim_callback( TimerHandle_t sensor1_cond_tim_handle )
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	sensor_read_set_sensor1_cond_timer_state( timer_expired );
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f88b 	bl	800072c <sensor_read_set_sensor1_cond_timer_state>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <sensor2_cond_tim_callback>:

void sensor2_cond_tim_callback( TimerHandle_t sensor2_cond_tim_handle )
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	sensor_read_set_sensor2_cond_timer_state( timer_expired );
 8000626:	2003      	movs	r0, #3
 8000628:	f000 f890 	bl	800074c <sensor_read_set_sensor2_cond_timer_state>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <CLC_train_exit_timeout_ballback>:

void CLC_train_exit_timeout_ballback( TimerHandle_t train_exit_timeout_handle )
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	CLC_train_set_exit_timeout( timer_expired );
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f8bd 	bl	80007bc <CLC_train_set_exit_timeout>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <vTask_IntersectionCtrl>:
#include "intersection_ctrl.h"

extern TIM_HandleTypeDef htim3;

void vTask_IntersectionCtrl(void* params)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;         // will hold the timestamp at which the task was last unblocked

	// Initialize the xLastWakeTime variable with the current time;
	xLastWakeTime = xTaskGetTickCount();
 8000654:	f003 fcd4 	bl	8004000 <xTaskGetTickCount>
 8000658:	4603      	mov	r3, r0
 800065a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		if ( state_machine_get_state() == CLC_train_crossing )
 800065c:	f000 f8a2 	bl	80007a4 <state_machine_get_state>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d116      	bne.n	8000694 <vTask_IntersectionCtrl+0x48>
		{
			HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);	/* Red Led On*/
 8000666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066a:	4813      	ldr	r0, [pc, #76]	; (80006b8 <vTask_IntersectionCtrl+0x6c>)
 800066c:	f000 fba5 	bl	8000dba <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <vTask_IntersectionCtrl+0x6c>)
 8000678:	f000 fb86 	bl	8000d88 <HAL_GPIO_WritePin>

			/* Rotate 135 degrees? */
			htim3.Instance->CCR1 = 18;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <vTask_IntersectionCtrl+0x70>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2212      	movs	r2, #18
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

			/* HAL_Delay and vTaskDelay same behaviour */
//			HAL_Delay(750);
			vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(750) );
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	f240 21ee 	movw	r1, #750	; 0x2ee
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fb2b 	bl	8003ce8 <xTaskDelayUntil>
 8000692:	e7e3      	b.n	800065c <vTask_IntersectionCtrl+0x10>
		}
		else
		{
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);	/* Green Led On*/
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <vTask_IntersectionCtrl+0x6c>)
 800069c:	f000 fb74 	bl	8000d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <vTask_IntersectionCtrl+0x6c>)
 80006a8:	f000 fb6e 	bl	8000d88 <HAL_GPIO_WritePin>

			/* Rotate 45 degrees? */
			htim3.Instance->CCR1 = 13;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <vTask_IntersectionCtrl+0x70>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	220d      	movs	r2, #13
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
		if ( state_machine_get_state() == CLC_train_crossing )
 80006b4:	e7d2      	b.n	800065c <vTask_IntersectionCtrl+0x10>
 80006b6:	bf00      	nop
 80006b8:	40020c00 	.word	0x40020c00
 80006bc:	2001a780 	.word	0x2001a780

080006c0 <vTask_SensorRead>:

static timer_state sensor1_cond_timer_state = timer_not_started;
static timer_state sensor2_cond_timer_state = timer_not_started;

void vTask_SensorRead(void* params)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
		 * LOW = train detected
		 *
		 * Applies signal conditioning
		*/
//		sensor1_reading = sensor_read_sensor1_conditioned();
		sensor1_reading = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <vTask_SensorRead+0x2c>)
 80006cc:	f000 fb44 	bl	8000d58 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <vTask_SensorRead+0x30>)
 80006d6:	701a      	strb	r2, [r3, #0]
//		sensor2_reading = sensor_read_sensor2_conditioned();
		sensor2_reading = HAL_GPIO_ReadPin(Sensor2_GPIO_Port, Sensor2_Pin);
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <vTask_SensorRead+0x34>)
 80006dc:	f000 fb3c 	bl	8000d58 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <vTask_SensorRead+0x38>)
 80006e6:	701a      	strb	r2, [r3, #0]
		sensor1_reading = HAL_GPIO_ReadPin(Sensor1_GPIO_Port, Sensor1_Pin);
 80006e8:	e7ee      	b.n	80006c8 <vTask_SensorRead+0x8>
 80006ea:	bf00      	nop
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	20000030 	.word	0x20000030
 80006f4:	40021000 	.word	0x40021000
 80006f8:	20000031 	.word	0x20000031

080006fc <sensor_read_get_sensor1_reading>:

	}
}

uint8_t sensor_read_get_sensor1_reading(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	return sensor1_reading;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <sensor_read_get_sensor1_reading+0x14>)
 8000702:	781b      	ldrb	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000030 	.word	0x20000030

08000714 <sensor_read_get_sensor2_reading>:

uint8_t sensor_read_get_sensor2_reading(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	return sensor2_reading;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <sensor_read_get_sensor2_reading+0x14>)
 800071a:	781b      	ldrb	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000031 	.word	0x20000031

0800072c <sensor_read_set_sensor1_cond_timer_state>:
{
	return exit_sensor;
}

void sensor_read_set_sensor1_cond_timer_state(timer_state state)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	sensor1_cond_timer_state = state;
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <sensor_read_set_sensor1_cond_timer_state+0x1c>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	7013      	strb	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	20000032 	.word	0x20000032

0800074c <sensor_read_set_sensor2_cond_timer_state>:

void sensor_read_set_sensor2_cond_timer_state(timer_state state)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	sensor2_cond_timer_state = state;
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <sensor_read_set_sensor2_cond_timer_state+0x1c>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	7013      	strb	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	20000033 	.word	0x20000033

0800076c <vTask_StateMachine>:

static uint8_t CLC_current_state = CLC_train_not_present;
static uint8_t CLC_train_exit_timeout_timer_state = timer_not_started;

void vTask_StateMachine(void* params)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Wait for the next cycle
//		vTaskDelayUntil(&xLastWakeTime, xFrequency);

		uint8_t sens1 = sensor_read_get_sensor1_reading();
 8000774:	f7ff ffc2 	bl	80006fc <sensor_read_get_sensor1_reading>
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]
		uint8_t sens2 = sensor_read_get_sensor2_reading();
 800077c:	f7ff ffca 	bl	8000714 <sensor_read_get_sensor2_reading>
 8000780:	4603      	mov	r3, r0
 8000782:	73bb      	strb	r3, [r7, #14]

		if ( sens1 == LOW )
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d102      	bne.n	8000790 <vTask_StateMachine+0x24>
		{
			CLC_current_state = CLC_train_crossing;
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <vTask_StateMachine+0x34>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
		}
		if ( sens2 == LOW )
 8000790:	7bbb      	ldrb	r3, [r7, #14]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ee      	bne.n	8000774 <vTask_StateMachine+0x8>
		{
			CLC_current_state = CLC_train_exit;
 8000796:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <vTask_StateMachine+0x34>)
 8000798:	2202      	movs	r2, #2
 800079a:	701a      	strb	r2, [r3, #0]
	{
 800079c:	e7ea      	b.n	8000774 <vTask_StateMachine+0x8>
 800079e:	bf00      	nop
 80007a0:	20000034 	.word	0x20000034

080007a4 <state_machine_get_state>:
//		}
	}
}

uint8_t state_machine_get_state(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	return CLC_current_state;
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <state_machine_get_state+0x14>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000034 	.word	0x20000034

080007bc <CLC_train_set_exit_timeout>:

void CLC_train_set_exit_timeout( uint8_t exit_timeout )
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	CLC_train_exit_timeout_timer_state = timer_expired;
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <CLC_train_set_exit_timeout+0x1c>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	701a      	strb	r2, [r3, #0]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	20000035 	.word	0x20000035

080007dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_Init+0x40>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <HAL_Init+0x40>)
 80007e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_Init+0x40>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_Init+0x40>)
 80007f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_Init+0x40>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_Init+0x40>)
 80007fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f8d8 	bl	80009ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	2000      	movs	r0, #0
 800080c:	f002 fa46 	bl	8002c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f002 f9aa 	bl	8002b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023c00 	.word	0x40023c00

08000820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x20>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_IncTick+0x24>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_IncTick+0x24>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000004 	.word	0x20000004
 8000844:	2001a77c 	.word	0x2001a77c

08000848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HAL_GetTick+0x14>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2001a77c 	.word	0x2001a77c

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db0b      	blt.n	80008ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 021f 	and.w	r2, r3, #31
 80008dc:	4907      	ldr	r1, [pc, #28]	; (80008fc <__NVIC_EnableIRQ+0x38>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	095b      	lsrs	r3, r3, #5
 80008e4:	2001      	movs	r0, #1
 80008e6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000e100 	.word	0xe000e100

08000900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db0a      	blt.n	800092a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	490c      	ldr	r1, [pc, #48]	; (800094c <__NVIC_SetPriority+0x4c>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	0112      	lsls	r2, r2, #4
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	440b      	add	r3, r1
 8000924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000928:	e00a      	b.n	8000940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4908      	ldr	r1, [pc, #32]	; (8000950 <__NVIC_SetPriority+0x50>)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	3b04      	subs	r3, #4
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	440b      	add	r3, r1
 800093e:	761a      	strb	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	bf28      	it	cs
 8000972:	2304      	movcs	r3, #4
 8000974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3304      	adds	r3, #4
 800097a:	2b06      	cmp	r3, #6
 800097c:	d902      	bls.n	8000984 <NVIC_EncodePriority+0x30>
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3b03      	subs	r3, #3
 8000982:	e000      	b.n	8000986 <NVIC_EncodePriority+0x32>
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43da      	mvns	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43d9      	mvns	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	4313      	orrs	r3, r2
         );
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3724      	adds	r7, #36	; 0x24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff4c 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e2:	f7ff ff61 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 80009e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	6978      	ldr	r0, [r7, #20]
 80009ee:	f7ff ffb1 	bl	8000954 <NVIC_EncodePriority>
 80009f2:	4602      	mov	r2, r0
 80009f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff80 	bl	8000900 <__NVIC_SetPriority>
}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff54 	bl	80008c4 <__NVIC_EnableIRQ>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	e16b      	b.n	8000d18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a40:	2201      	movs	r2, #1
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	f040 815a 	bne.w	8000d12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d00b      	beq.n	8000a7e <HAL_GPIO_Init+0x5a>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d007      	beq.n	8000a7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a72:	2b11      	cmp	r3, #17
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b12      	cmp	r3, #18
 8000a7c:	d130      	bne.n	8000ae0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2203      	movs	r2, #3
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4013      	ands	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	091b      	lsrs	r3, r3, #4
 8000aca:	f003 0201 	and.w	r2, r3, #1
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	2203      	movs	r2, #3
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0xfc>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b12      	cmp	r3, #18
 8000b1e:	d123      	bne.n	8000b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	08da      	lsrs	r2, r3, #3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3208      	adds	r2, #8
 8000b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	220f      	movs	r2, #15
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4013      	ands	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	08da      	lsrs	r2, r3, #3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3208      	adds	r2, #8
 8000b62:	69b9      	ldr	r1, [r7, #24]
 8000b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0203 	and.w	r2, r3, #3
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 80b4 	beq.w	8000d12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <HAL_GPIO_Init+0x308>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a5e      	ldr	r2, [pc, #376]	; (8000d2c <HAL_GPIO_Init+0x308>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <HAL_GPIO_Init+0x308>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc6:	4a5a      	ldr	r2, [pc, #360]	; (8000d30 <HAL_GPIO_Init+0x30c>)
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d02b      	beq.n	8000c4a <HAL_GPIO_Init+0x226>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a50      	ldr	r2, [pc, #320]	; (8000d38 <HAL_GPIO_Init+0x314>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d025      	beq.n	8000c46 <HAL_GPIO_Init+0x222>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a4f      	ldr	r2, [pc, #316]	; (8000d3c <HAL_GPIO_Init+0x318>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d01f      	beq.n	8000c42 <HAL_GPIO_Init+0x21e>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a4e      	ldr	r2, [pc, #312]	; (8000d40 <HAL_GPIO_Init+0x31c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d019      	beq.n	8000c3e <HAL_GPIO_Init+0x21a>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a4d      	ldr	r2, [pc, #308]	; (8000d44 <HAL_GPIO_Init+0x320>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d013      	beq.n	8000c3a <HAL_GPIO_Init+0x216>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <HAL_GPIO_Init+0x324>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d00d      	beq.n	8000c36 <HAL_GPIO_Init+0x212>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a4b      	ldr	r2, [pc, #300]	; (8000d4c <HAL_GPIO_Init+0x328>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d007      	beq.n	8000c32 <HAL_GPIO_Init+0x20e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a4a      	ldr	r2, [pc, #296]	; (8000d50 <HAL_GPIO_Init+0x32c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_GPIO_Init+0x20a>
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	e00e      	b.n	8000c4c <HAL_GPIO_Init+0x228>
 8000c2e:	2308      	movs	r3, #8
 8000c30:	e00c      	b.n	8000c4c <HAL_GPIO_Init+0x228>
 8000c32:	2306      	movs	r3, #6
 8000c34:	e00a      	b.n	8000c4c <HAL_GPIO_Init+0x228>
 8000c36:	2305      	movs	r3, #5
 8000c38:	e008      	b.n	8000c4c <HAL_GPIO_Init+0x228>
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x228>
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e004      	b.n	8000c4c <HAL_GPIO_Init+0x228>
 8000c42:	2302      	movs	r3, #2
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_Init+0x228>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <HAL_GPIO_Init+0x228>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	f002 0203 	and.w	r2, r2, #3
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	4093      	lsls	r3, r2
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c5c:	4934      	ldr	r1, [pc, #208]	; (8000d30 <HAL_GPIO_Init+0x30c>)
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c6a:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c8e:	4a31      	ldr	r2, [pc, #196]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c94:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cb8:	4a26      	ldr	r2, [pc, #152]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d0c:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3301      	adds	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	2b0f      	cmp	r3, #15
 8000d1c:	f67f ae90 	bls.w	8000a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d20:	bf00      	nop
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40013800 	.word	0x40013800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020c00 	.word	0x40020c00
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40021400 	.word	0x40021400
 8000d4c:	40021800 	.word	0x40021800
 8000d50:	40021c00 	.word	0x40021c00
 8000d54:	40013c00 	.word	0x40013c00

08000d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e001      	b.n	8000d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000da4:	e003      	b.n	8000dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	041a      	lsls	r2, r3, #16
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	619a      	str	r2, [r3, #24]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	401a      	ands	r2, r3
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d104      	bne.n	8000dde <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	041a      	lsls	r2, r3, #16
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e25b      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d075      	beq.n	8000efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e0e:	4ba3      	ldr	r3, [pc, #652]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d00c      	beq.n	8000e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e1a:	4ba0      	ldr	r3, [pc, #640]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d112      	bne.n	8000e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e26:	4b9d      	ldr	r3, [pc, #628]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e32:	d10b      	bne.n	8000e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	4b99      	ldr	r3, [pc, #612]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d05b      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x108>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d157      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e236      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e54:	d106      	bne.n	8000e64 <HAL_RCC_OscConfig+0x74>
 8000e56:	4b91      	ldr	r3, [pc, #580]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a90      	ldr	r2, [pc, #576]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e01d      	b.n	8000ea0 <HAL_RCC_OscConfig+0xb0>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x98>
 8000e6e:	4b8b      	ldr	r3, [pc, #556]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a8a      	ldr	r2, [pc, #552]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b88      	ldr	r3, [pc, #544]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a87      	ldr	r2, [pc, #540]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e00b      	b.n	8000ea0 <HAL_RCC_OscConfig+0xb0>
 8000e88:	4b84      	ldr	r3, [pc, #528]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a83      	ldr	r2, [pc, #524]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b81      	ldr	r3, [pc, #516]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a80      	ldr	r2, [pc, #512]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d013      	beq.n	8000ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fcce 	bl	8000848 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb0:	f7ff fcca 	bl	8000848 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b64      	cmp	r3, #100	; 0x64
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e1fb      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec2:	4b76      	ldr	r3, [pc, #472]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f0      	beq.n	8000eb0 <HAL_RCC_OscConfig+0xc0>
 8000ece:	e014      	b.n	8000efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fcba 	bl	8000848 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fcb6 	bl	8000848 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b64      	cmp	r3, #100	; 0x64
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e1e7      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eea:	4b6c      	ldr	r3, [pc, #432]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0xe8>
 8000ef6:	e000      	b.n	8000efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d063      	beq.n	8000fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f06:	4b65      	ldr	r3, [pc, #404]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00b      	beq.n	8000f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f12:	4b62      	ldr	r3, [pc, #392]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d11c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f1e:	4b5f      	ldr	r3, [pc, #380]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d116      	bne.n	8000f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <HAL_RCC_OscConfig+0x152>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d001      	beq.n	8000f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e1bb      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f42:	4b56      	ldr	r3, [pc, #344]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4952      	ldr	r1, [pc, #328]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f56:	e03a      	b.n	8000fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d020      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <HAL_RCC_OscConfig+0x2b0>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f66:	f7ff fc6f 	bl	8000848 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fc6b 	bl	8000848 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e19c      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8c:	4b43      	ldr	r3, [pc, #268]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4940      	ldr	r1, [pc, #256]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	600b      	str	r3, [r1, #0]
 8000fa0:	e015      	b.n	8000fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa2:	4b3f      	ldr	r3, [pc, #252]	; (80010a0 <HAL_RCC_OscConfig+0x2b0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc4e 	bl	8000848 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc4a 	bl	8000848 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e17b      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc2:	4b36      	ldr	r3, [pc, #216]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d030      	beq.n	800103c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d016      	beq.n	8001010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_RCC_OscConfig+0x2b4>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fc2e 	bl	8000848 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc2a 	bl	8000848 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e15b      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8001004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x200>
 800100e:	e015      	b.n	800103c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_RCC_OscConfig+0x2b4>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001016:	f7ff fc17 	bl	8000848 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101e:	f7ff fc13 	bl	8000848 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e144      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8001032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80a0 	beq.w	800118a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10f      	bne.n	800107a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_RCC_OscConfig+0x2ac>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_RCC_OscConfig+0x2b8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d121      	bne.n	80010ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_RCC_OscConfig+0x2b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_RCC_OscConfig+0x2b8>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fbd9 	bl	8000848 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	e011      	b.n	80010be <HAL_RCC_OscConfig+0x2ce>
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	42470000 	.word	0x42470000
 80010a4:	42470e80 	.word	0x42470e80
 80010a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ac:	f7ff fbcc 	bl	8000848 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e0fd      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010be:	4b81      	ldr	r3, [pc, #516]	; (80012c4 <HAL_RCC_OscConfig+0x4d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d106      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2f0>
 80010d2:	4b7d      	ldr	r3, [pc, #500]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 80010d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d6:	4a7c      	ldr	r2, [pc, #496]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6713      	str	r3, [r2, #112]	; 0x70
 80010de:	e01c      	b.n	800111a <HAL_RCC_OscConfig+0x32a>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d10c      	bne.n	8001102 <HAL_RCC_OscConfig+0x312>
 80010e8:	4b77      	ldr	r3, [pc, #476]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 80010ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ec:	4a76      	ldr	r2, [pc, #472]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6713      	str	r3, [r2, #112]	; 0x70
 80010f4:	4b74      	ldr	r3, [pc, #464]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 80010f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f8:	4a73      	ldr	r2, [pc, #460]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001100:	e00b      	b.n	800111a <HAL_RCC_OscConfig+0x32a>
 8001102:	4b71      	ldr	r3, [pc, #452]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001106:	4a70      	ldr	r2, [pc, #448]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001108:	f023 0301 	bic.w	r3, r3, #1
 800110c:	6713      	str	r3, [r2, #112]	; 0x70
 800110e:	4b6e      	ldr	r3, [pc, #440]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001112:	4a6d      	ldr	r2, [pc, #436]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001114:	f023 0304 	bic.w	r3, r3, #4
 8001118:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d015      	beq.n	800114e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001122:	f7ff fb91 	bl	8000848 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	e00a      	b.n	8001140 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff fb8d 	bl	8000848 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e0bc      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001140:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ee      	beq.n	800112a <HAL_RCC_OscConfig+0x33a>
 800114c:	e014      	b.n	8001178 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fb7b 	bl	8000848 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fb77 	bl	8000848 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	; 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e0a6      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116c:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 800116e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ee      	bne.n	8001156 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d105      	bne.n	800118a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117e:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8092 	beq.w	80012b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001194:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d05c      	beq.n	800125a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d141      	bne.n	800122c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a8:	4b48      	ldr	r3, [pc, #288]	; (80012cc <HAL_RCC_OscConfig+0x4dc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fb4b 	bl	8000848 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b6:	f7ff fb47 	bl	8000848 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e078      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f0      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69da      	ldr	r2, [r3, #28]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	019b      	lsls	r3, r3, #6
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	085b      	lsrs	r3, r3, #1
 80011ec:	3b01      	subs	r3, #1
 80011ee:	041b      	lsls	r3, r3, #16
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	061b      	lsls	r3, r3, #24
 80011f8:	4933      	ldr	r1, [pc, #204]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <HAL_RCC_OscConfig+0x4dc>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb20 	bl	8000848 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff fb1c 	bl	8000848 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e04d      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x41c>
 800122a:	e045      	b.n	80012b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_RCC_OscConfig+0x4dc>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fb09 	bl	8000848 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800123a:	f7ff fb05 	bl	8000848 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e036      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0x44a>
 8001258:	e02e      	b.n	80012b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e029      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_RCC_OscConfig+0x4d8>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	429a      	cmp	r2, r3
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001284:	429a      	cmp	r2, r3
 8001286:	d115      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800128e:	4013      	ands	r3, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001294:	4293      	cmp	r3, r2
 8001296:	d10d      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d106      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	42470060 	.word	0x42470060

080012d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0cc      	b.n	800147e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <HAL_RCC_ClockConfig+0x1b8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d90c      	bls.n	800130c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_RCC_ClockConfig+0x1b8>)
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fa:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_RCC_ClockConfig+0x1b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d001      	beq.n	800130c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e0b8      	b.n	800147e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d020      	beq.n	800135a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001324:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4a58      	ldr	r2, [pc, #352]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800132e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800133c:	4b53      	ldr	r3, [pc, #332]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a52      	ldr	r2, [pc, #328]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001348:	4b50      	ldr	r3, [pc, #320]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	494d      	ldr	r1, [pc, #308]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	4313      	orrs	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d044      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d107      	bne.n	800137e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d119      	bne.n	80013ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e07f      	b.n	800147e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d003      	beq.n	800138e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800138a:	2b03      	cmp	r3, #3
 800138c:	d107      	bne.n	800139e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d109      	bne.n	80013ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e06f      	b.n	800147e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e067      	b.n	800147e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f023 0203 	bic.w	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4934      	ldr	r1, [pc, #208]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c0:	f7ff fa42 	bl	8000848 <HAL_GetTick>
 80013c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c6:	e00a      	b.n	80013de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c8:	f7ff fa3e 	bl	8000848 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e04f      	b.n	800147e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013de:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 020c 	and.w	r2, r3, #12
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d1eb      	bne.n	80013c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_RCC_ClockConfig+0x1b8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d20c      	bcs.n	8001418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_RCC_ClockConfig+0x1b8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d001      	beq.n	8001418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e032      	b.n	800147e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4916      	ldr	r1, [pc, #88]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d009      	beq.n	8001456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	490e      	ldr	r1, [pc, #56]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	4313      	orrs	r3, r2
 8001454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001456:	f000 f821 	bl	800149c <HAL_RCC_GetSysClockFreq>
 800145a:	4601      	mov	r1, r0
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	5cd3      	ldrb	r3, [r2, r3]
 800146a:	fa21 f303 	lsr.w	r3, r1, r3
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_ClockConfig+0x1c8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f001 fc10 	bl	8002c9c <HAL_InitTick>

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023c00 	.word	0x40023c00
 800148c:	40023800 	.word	0x40023800
 8001490:	080074a4 	.word	0x080074a4
 8001494:	20000008 	.word	0x20000008
 8001498:	20000000 	.word	0x20000000

0800149c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014b2:	4b63      	ldr	r3, [pc, #396]	; (8001640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d007      	beq.n	80014ce <HAL_RCC_GetSysClockFreq+0x32>
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d008      	beq.n	80014d4 <HAL_RCC_GetSysClockFreq+0x38>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 80b4 	bne.w	8001630 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4b5e      	ldr	r3, [pc, #376]	; (8001644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80014ca:	60bb      	str	r3, [r7, #8]
       break;
 80014cc:	e0b3      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80014d0:	60bb      	str	r3, [r7, #8]
      break;
 80014d2:	e0b0      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d4:	4b5a      	ldr	r3, [pc, #360]	; (8001640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014de:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d04a      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ea:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	099b      	lsrs	r3, r3, #6
 80014f0:	f04f 0400 	mov.w	r4, #0
 80014f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	ea03 0501 	and.w	r5, r3, r1
 8001500:	ea04 0602 	and.w	r6, r4, r2
 8001504:	4629      	mov	r1, r5
 8001506:	4632      	mov	r2, r6
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f04f 0400 	mov.w	r4, #0
 8001510:	0154      	lsls	r4, r2, #5
 8001512:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001516:	014b      	lsls	r3, r1, #5
 8001518:	4619      	mov	r1, r3
 800151a:	4622      	mov	r2, r4
 800151c:	1b49      	subs	r1, r1, r5
 800151e:	eb62 0206 	sbc.w	r2, r2, r6
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	f04f 0400 	mov.w	r4, #0
 800152a:	0194      	lsls	r4, r2, #6
 800152c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001530:	018b      	lsls	r3, r1, #6
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	eb64 0402 	sbc.w	r4, r4, r2
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	00e2      	lsls	r2, r4, #3
 8001542:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001546:	00d9      	lsls	r1, r3, #3
 8001548:	460b      	mov	r3, r1
 800154a:	4614      	mov	r4, r2
 800154c:	195b      	adds	r3, r3, r5
 800154e:	eb44 0406 	adc.w	r4, r4, r6
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	0262      	lsls	r2, r4, #9
 800155c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001560:	0259      	lsls	r1, r3, #9
 8001562:	460b      	mov	r3, r1
 8001564:	4614      	mov	r4, r2
 8001566:	4618      	mov	r0, r3
 8001568:	4621      	mov	r1, r4
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f04f 0400 	mov.w	r4, #0
 8001570:	461a      	mov	r2, r3
 8001572:	4623      	mov	r3, r4
 8001574:	f7fe fe76 	bl	8000264 <__aeabi_uldivmod>
 8001578:	4603      	mov	r3, r0
 800157a:	460c      	mov	r4, r1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	e049      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	099b      	lsrs	r3, r3, #6
 8001586:	f04f 0400 	mov.w	r4, #0
 800158a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	ea03 0501 	and.w	r5, r3, r1
 8001596:	ea04 0602 	and.w	r6, r4, r2
 800159a:	4629      	mov	r1, r5
 800159c:	4632      	mov	r2, r6
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f04f 0400 	mov.w	r4, #0
 80015a6:	0154      	lsls	r4, r2, #5
 80015a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015ac:	014b      	lsls	r3, r1, #5
 80015ae:	4619      	mov	r1, r3
 80015b0:	4622      	mov	r2, r4
 80015b2:	1b49      	subs	r1, r1, r5
 80015b4:	eb62 0206 	sbc.w	r2, r2, r6
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	f04f 0400 	mov.w	r4, #0
 80015c0:	0194      	lsls	r4, r2, #6
 80015c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015c6:	018b      	lsls	r3, r1, #6
 80015c8:	1a5b      	subs	r3, r3, r1
 80015ca:	eb64 0402 	sbc.w	r4, r4, r2
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	00e2      	lsls	r2, r4, #3
 80015d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015dc:	00d9      	lsls	r1, r3, #3
 80015de:	460b      	mov	r3, r1
 80015e0:	4614      	mov	r4, r2
 80015e2:	195b      	adds	r3, r3, r5
 80015e4:	eb44 0406 	adc.w	r4, r4, r6
 80015e8:	f04f 0100 	mov.w	r1, #0
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	02a2      	lsls	r2, r4, #10
 80015f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015f6:	0299      	lsls	r1, r3, #10
 80015f8:	460b      	mov	r3, r1
 80015fa:	4614      	mov	r4, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	4621      	mov	r1, r4
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f04f 0400 	mov.w	r4, #0
 8001606:	461a      	mov	r2, r3
 8001608:	4623      	mov	r3, r4
 800160a:	f7fe fe2b 	bl	8000264 <__aeabi_uldivmod>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	0c1b      	lsrs	r3, r3, #16
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	3301      	adds	r3, #1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	60bb      	str	r3, [r7, #8]
      break;
 800162e:	e002      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001632:	60bb      	str	r3, [r7, #8]
      break;
 8001634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001636:	68bb      	ldr	r3, [r7, #8]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	00f42400 	.word	0x00f42400
 8001648:	007a1200 	.word	0x007a1200

0800164c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_RCC_GetHCLKFreq+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001668:	f7ff fff0 	bl	800164c <HAL_RCC_GetHCLKFreq>
 800166c:	4601      	mov	r1, r0
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	0a9b      	lsrs	r3, r3, #10
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	080074b4 	.word	0x080074b4

0800168c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	220f      	movs	r2, #15
 800169a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_RCC_GetClockConfig+0x5c>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 0203 	and.w	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_RCC_GetClockConfig+0x5c>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_RCC_GetClockConfig+0x5c>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_GetClockConfig+0x5c>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_RCC_GetClockConfig+0x60>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 020f 	and.w	r2, r3, #15
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e01d      	b.n	800173e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f001 fa4e 	bl	8002bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3304      	adds	r3, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f000 fb4e 	bl	8001dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0201 	orr.w	r2, r2, #1
 800175c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b06      	cmp	r3, #6
 800176e:	d007      	beq.n	8001780 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e01d      	b.n	80017dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d106      	bne.n	80017ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f815 	bl	80017e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3304      	adds	r3, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4610      	mov	r0, r2
 80017ce:	f000 faff 	bl	8001dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fdca 	bl	80023a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_TIM_PWM_Start+0x74>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_TIM_PWM_Start+0x2c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_TIM_PWM_Start+0x78>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_TIM_PWM_Start+0x30>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_TIM_PWM_Start+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d007      	beq.n	800183e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b06      	cmp	r3, #6
 800184e:	d007      	beq.n	8001860 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40010000 	.word	0x40010000
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b02      	cmp	r3, #2
 8001888:	d122      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b02      	cmp	r3, #2
 8001896:	d11b      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0202 	mvn.w	r2, #2
 80018a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fa6b 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 80018bc:	e005      	b.n	80018ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fa5d 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fa6e 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d122      	bne.n	8001924 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d11b      	bne.n	8001924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0204 	mvn.w	r2, #4
 80018f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2202      	movs	r2, #2
 80018fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fa41 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001910:	e005      	b.n	800191e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fa33 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fa44 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b08      	cmp	r3, #8
 8001930:	d122      	bne.n	8001978 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b08      	cmp	r3, #8
 800193e:	d11b      	bne.n	8001978 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0208 	mvn.w	r2, #8
 8001948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2204      	movs	r2, #4
 800194e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fa17 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001964:	e005      	b.n	8001972 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fa09 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fa1a 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b10      	cmp	r3, #16
 8001984:	d122      	bne.n	80019cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b10      	cmp	r3, #16
 8001992:	d11b      	bne.n	80019cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f06f 0210 	mvn.w	r2, #16
 800199c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2208      	movs	r2, #8
 80019a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f9ed 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 80019b8:	e005      	b.n	80019c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f9df 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f9f0 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10e      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0201 	mvn.w	r2, #1
 80019f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f001 f89e 	bl	8002b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	2b80      	cmp	r3, #128	; 0x80
 8001a04:	d10e      	bne.n	8001a24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a10:	2b80      	cmp	r3, #128	; 0x80
 8001a12:	d107      	bne.n	8001a24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fd6c 	bl	80024fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2e:	2b40      	cmp	r3, #64	; 0x40
 8001a30:	d10e      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3c:	2b40      	cmp	r3, #64	; 0x40
 8001a3e:	d107      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f9b5 	bl	8001dba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0320 	and.w	r3, r3, #32
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d10e      	bne.n	8001a7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d107      	bne.n	8001a7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0220 	mvn.w	r2, #32
 8001a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fd36 	bl	80024e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0b4      	b.n	8001c08 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	f200 809f 	bhi.w	8001bf4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001af1 	.word	0x08001af1
 8001ac0:	08001bf5 	.word	0x08001bf5
 8001ac4:	08001bf5 	.word	0x08001bf5
 8001ac8:	08001bf5 	.word	0x08001bf5
 8001acc:	08001b31 	.word	0x08001b31
 8001ad0:	08001bf5 	.word	0x08001bf5
 8001ad4:	08001bf5 	.word	0x08001bf5
 8001ad8:	08001bf5 	.word	0x08001bf5
 8001adc:	08001b73 	.word	0x08001b73
 8001ae0:	08001bf5 	.word	0x08001bf5
 8001ae4:	08001bf5 	.word	0x08001bf5
 8001ae8:	08001bf5 	.word	0x08001bf5
 8001aec:	08001bb3 	.word	0x08001bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fa0a 	bl	8001f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0208 	orr.w	r2, r2, #8
 8001b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0204 	bic.w	r2, r2, #4
 8001b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6999      	ldr	r1, [r3, #24]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	619a      	str	r2, [r3, #24]
      break;
 8001b2e:	e062      	b.n	8001bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fa5a 	bl	8001ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6999      	ldr	r1, [r3, #24]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	021a      	lsls	r2, r3, #8
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	619a      	str	r2, [r3, #24]
      break;
 8001b70:	e041      	b.n	8001bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 faaf 	bl	80020dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69da      	ldr	r2, [r3, #28]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0208 	orr.w	r2, r2, #8
 8001b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0204 	bic.w	r2, r2, #4
 8001b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69d9      	ldr	r1, [r3, #28]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	61da      	str	r2, [r3, #28]
      break;
 8001bb0:	e021      	b.n	8001bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fb03 	bl	80021c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69da      	ldr	r2, [r3, #28]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69d9      	ldr	r1, [r3, #28]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	021a      	lsls	r2, r3, #8
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	61da      	str	r2, [r3, #28]
      break;
 8001bf2:	e000      	b.n	8001bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001bf4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_TIM_ConfigClockSource+0x18>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0a6      	b.n	8001d76 <HAL_TIM_ConfigClockSource+0x166>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d067      	beq.n	8001d30 <HAL_TIM_ConfigClockSource+0x120>
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d80b      	bhi.n	8001c7c <HAL_TIM_ConfigClockSource+0x6c>
 8001c64:	2b10      	cmp	r3, #16
 8001c66:	d073      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d802      	bhi.n	8001c72 <HAL_TIM_ConfigClockSource+0x62>
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d06f      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001c70:	e078      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d06c      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
 8001c76:	2b30      	cmp	r3, #48	; 0x30
 8001c78:	d06a      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001c7a:	e073      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c7c:	2b70      	cmp	r3, #112	; 0x70
 8001c7e:	d00d      	beq.n	8001c9c <HAL_TIM_ConfigClockSource+0x8c>
 8001c80:	2b70      	cmp	r3, #112	; 0x70
 8001c82:	d804      	bhi.n	8001c8e <HAL_TIM_ConfigClockSource+0x7e>
 8001c84:	2b50      	cmp	r3, #80	; 0x50
 8001c86:	d033      	beq.n	8001cf0 <HAL_TIM_ConfigClockSource+0xe0>
 8001c88:	2b60      	cmp	r3, #96	; 0x60
 8001c8a:	d041      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001c8c:	e06a      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c92:	d066      	beq.n	8001d62 <HAL_TIM_ConfigClockSource+0x152>
 8001c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c98:	d017      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001c9a:	e063      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f000 fb5a 	bl	8002364 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	609a      	str	r2, [r3, #8]
      break;
 8001cc8:	e04c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f000 fb43 	bl	8002364 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cec:	609a      	str	r2, [r3, #8]
      break;
 8001cee:	e039      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f000 fab7 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2150      	movs	r1, #80	; 0x50
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fb10 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 8001d0e:	e029      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f000 fad6 	bl	80022ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2160      	movs	r1, #96	; 0x60
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fb00 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 8001d2e:	e019      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f000 fa97 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 faf0 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 8001d4e:	e009      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 fae7 	bl	800232e <TIM_ITRx_SetConfig>
      break;
 8001d60:	e000      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d00f      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <TIM_Base_SetConfig+0x118>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00b      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <TIM_Base_SetConfig+0x11c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <TIM_Base_SetConfig+0x120>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d003      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d108      	bne.n	8001e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d027      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <TIM_Base_SetConfig+0x118>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d023      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <TIM_Base_SetConfig+0x11c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <TIM_Base_SetConfig+0x120>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d017      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <TIM_Base_SetConfig+0x128>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <TIM_Base_SetConfig+0x12c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <TIM_Base_SetConfig+0x130>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <TIM_Base_SetConfig+0x134>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <TIM_Base_SetConfig+0x138>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <TIM_Base_SetConfig+0x13c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d103      	bne.n	8001ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	615a      	str	r2, [r3, #20]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40014800 	.word	0x40014800
 8001f04:	40001800 	.word	0x40001800
 8001f08:	40001c00 	.word	0x40001c00
 8001f0c:	40002000 	.word	0x40002000

08001f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	f023 0201 	bic.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f023 0302 	bic.w	r3, r3, #2
 8001f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <TIM_OC1_SetConfig+0xd8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <TIM_OC1_SetConfig+0x64>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <TIM_OC1_SetConfig+0xdc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10c      	bne.n	8001f8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f023 0308 	bic.w	r3, r3, #8
 8001f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <TIM_OC1_SetConfig+0xd8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d003      	beq.n	8001f9e <TIM_OC1_SetConfig+0x8e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <TIM_OC1_SetConfig+0xdc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d111      	bne.n	8001fc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	621a      	str	r2, [r3, #32]
}
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010400 	.word	0x40010400

08001ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	f023 0210 	bic.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800201e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f023 0320 	bic.w	r3, r3, #32
 800203a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <TIM_OC2_SetConfig+0xe4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d003      	beq.n	8002058 <TIM_OC2_SetConfig+0x68>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <TIM_OC2_SetConfig+0xe8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d10d      	bne.n	8002074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800205e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <TIM_OC2_SetConfig+0xe4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_OC2_SetConfig+0x94>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <TIM_OC2_SetConfig+0xe8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d113      	bne.n	80020ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800208a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	621a      	str	r2, [r3, #32]
}
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40010400 	.word	0x40010400

080020dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a21      	ldr	r2, [pc, #132]	; (80021bc <TIM_OC3_SetConfig+0xe0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d003      	beq.n	8002142 <TIM_OC3_SetConfig+0x66>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <TIM_OC3_SetConfig+0xe4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10d      	bne.n	800215e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	4313      	orrs	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800215c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <TIM_OC3_SetConfig+0xe0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <TIM_OC3_SetConfig+0x92>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <TIM_OC3_SetConfig+0xe4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d113      	bne.n	8002196 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800217c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	621a      	str	r2, [r3, #32]
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40010400 	.word	0x40010400

080021c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800220e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	031b      	lsls	r3, r3, #12
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <TIM_OC4_SetConfig+0xa4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_OC4_SetConfig+0x68>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <TIM_OC4_SetConfig+0xa8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d109      	bne.n	8002240 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	621a      	str	r2, [r3, #32]
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40010400 	.word	0x40010400

08002270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	f023 0201 	bic.w	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800229a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f023 030a 	bic.w	r3, r3, #10
 80022ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	621a      	str	r2, [r3, #32]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f023 0210 	bic.w	r2, r3, #16
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	031b      	lsls	r3, r3, #12
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800230a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	f043 0307 	orr.w	r3, r3, #7
 8002350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800237e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	431a      	orrs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2201      	movs	r2, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	401a      	ands	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	621a      	str	r2, [r3, #32]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002404:	2302      	movs	r3, #2
 8002406:	e05a      	b.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a21      	ldr	r2, [pc, #132]	; (80024cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d01d      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d018      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00e      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a18      	ldr	r2, [pc, #96]	; (80024dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10c      	bne.n	80024ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800
 80024d8:	40000c00 	.word	0x40000c00
 80024dc:	40010400 	.word	0x40010400
 80024e0:	40014000 	.word	0x40014000
 80024e4:	40001800 	.word	0x40001800

080024e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002516:	f7fe f961 	bl	80007dc <HAL_Init>

  /* USER CODE BEGIN Init */

  // Enable the cycle counter
  DWT_CTRL |= (1<<0);
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <main+0xd4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <main+0xd4>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6013      	str	r3, [r2, #0]
  // start segger sys view
  SEGGER_SYSVIEW_Conf();
 8002526:	f003 f9e3 	bl	80058f0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800252a:	f004 f8e3 	bl	80066f4 <SEGGER_SYSVIEW_Start>

  software_timers_init();
 800252e:	f7fe f819 	bl	8000564 <software_timers_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002532:	f000 f867 	bl	8002604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002536:	f000 f995 	bl	8002864 <MX_GPIO_Init>
  MX_TIM1_Init();
 800253a:	f000 f8cd 	bl	80026d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800253e:	f000 f91b 	bl	8002778 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // start servo
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002542:	2100      	movs	r1, #0
 8002544:	4828      	ldr	r0, [pc, #160]	; (80025e8 <main+0xd8>)
 8002546:	f7ff f957 	bl	80017f8 <HAL_TIM_PWM_Start>

  /* Create tasks - dynamically allocate memory to heap */
  status = xTaskCreate(vTask_IntersectionCtrl,"Task_IntersectionCtrl",100,NULL,2,NULL);
 800254a:	2300      	movs	r3, #0
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	2302      	movs	r3, #2
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2300      	movs	r3, #0
 8002554:	2264      	movs	r2, #100	; 0x64
 8002556:	4925      	ldr	r1, [pc, #148]	; (80025ec <main+0xdc>)
 8002558:	4825      	ldr	r0, [pc, #148]	; (80025f0 <main+0xe0>)
 800255a:	f001 fa63 	bl	8003a24 <xTaskCreate>
 800255e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d009      	beq.n	800257a <main+0x6a>
 8002566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	e7fe      	b.n	8002578 <main+0x68>
  status = xTaskCreate(vTask_SensorRead,"Task_SensorRead",300,NULL,2,NULL);
 800257a:	2300      	movs	r3, #0
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	2302      	movs	r3, #2
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002588:	491a      	ldr	r1, [pc, #104]	; (80025f4 <main+0xe4>)
 800258a:	481b      	ldr	r0, [pc, #108]	; (80025f8 <main+0xe8>)
 800258c:	f001 fa4a 	bl	8003a24 <xTaskCreate>
 8002590:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d009      	beq.n	80025ac <main+0x9c>
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	e7fe      	b.n	80025aa <main+0x9a>
  status = xTaskCreate(vTask_StateMachine,"Task_StateMachine",200,NULL,2,NULL);
 80025ac:	2300      	movs	r3, #0
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	2302      	movs	r3, #2
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	22c8      	movs	r2, #200	; 0xc8
 80025b8:	4910      	ldr	r1, [pc, #64]	; (80025fc <main+0xec>)
 80025ba:	4811      	ldr	r0, [pc, #68]	; (8002600 <main+0xf0>)
 80025bc:	f001 fa32 	bl	8003a24 <xTaskCreate>
 80025c0:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d009      	beq.n	80025dc <main+0xcc>
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	e7fe      	b.n	80025da <main+0xca>

  vTaskStartScheduler();
 80025dc:	f001 fc02 	bl	8003de4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <main+0xd0>
 80025e2:	bf00      	nop
 80025e4:	e0001000 	.word	0xe0001000
 80025e8:	2001a780 	.word	0x2001a780
 80025ec:	08007384 	.word	0x08007384
 80025f0:	0800064d 	.word	0x0800064d
 80025f4:	0800739c 	.word	0x0800739c
 80025f8:	080006c1 	.word	0x080006c1
 80025fc:	080073ac 	.word	0x080073ac
 8002600:	0800076d 	.word	0x0800076d

08002604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b094      	sub	sp, #80	; 0x50
 8002608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800260a:	f107 0320 	add.w	r3, r7, #32
 800260e:	2230      	movs	r2, #48	; 0x30
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fe76 	bl	8007304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <SystemClock_Config+0xcc>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a27      	ldr	r2, [pc, #156]	; (80026d0 <SystemClock_Config+0xcc>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <SystemClock_Config+0xcc>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <SystemClock_Config+0xd0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <SystemClock_Config+0xd0>)
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <SystemClock_Config+0xd0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002664:	2301      	movs	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002668:	2310      	movs	r3, #16
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266c:	2302      	movs	r3, #2
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002670:	2300      	movs	r3, #0
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002674:	2308      	movs	r3, #8
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002678:	2332      	movs	r3, #50	; 0x32
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800267c:	2304      	movs	r3, #4
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002680:	2307      	movs	r3, #7
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002684:	f107 0320 	add.w	r3, r7, #32
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fbb1 	bl	8000df0 <HAL_RCC_OscConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002694:	f000 fa60 	bl	8002b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002698:	230f      	movs	r3, #15
 800269a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800269c:	2302      	movs	r3, #2
 800269e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80026a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80026aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fe0a 	bl	80012d0 <HAL_RCC_ClockConfig>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80026c2:	f000 fa49 	bl	8002b58 <Error_Handler>
  }
}
 80026c6:	bf00      	nop
 80026c8:	3750      	adds	r7, #80	; 0x50
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40007000 	.word	0x40007000

080026d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ec:	463b      	mov	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026f4:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <MX_TIM1_Init+0x98>)
 80026f6:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <MX_TIM1_Init+0x9c>)
 80026f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 62500-1;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <MX_TIM1_Init+0x98>)
 80026fc:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002700:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <MX_TIM1_Init+0x98>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <MX_TIM1_Init+0x98>)
 800270a:	2231      	movs	r2, #49	; 0x31
 800270c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <MX_TIM1_Init+0x98>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <MX_TIM1_Init+0x98>)
 8002716:	2200      	movs	r2, #0
 8002718:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <MX_TIM1_Init+0x98>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002720:	4813      	ldr	r0, [pc, #76]	; (8002770 <MX_TIM1_Init+0x98>)
 8002722:	f7fe ffe5 	bl	80016f0 <HAL_TIM_Base_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800272c:	f000 fa14 	bl	8002b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002734:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	4619      	mov	r1, r3
 800273c:	480c      	ldr	r0, [pc, #48]	; (8002770 <MX_TIM1_Init+0x98>)
 800273e:	f7ff fa67 	bl	8001c10 <HAL_TIM_ConfigClockSource>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002748:	f000 fa06 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002754:	463b      	mov	r3, r7
 8002756:	4619      	mov	r1, r3
 8002758:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_TIM1_Init+0x98>)
 800275a:	f7ff fe49 	bl	80023f0 <HAL_TIMEx_MasterConfigSynchronization>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002764:	f000 f9f8 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	2001a7c0 	.word	0x2001a7c0
 8002774:	40010000 	.word	0x40010000

08002778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08e      	sub	sp, #56	; 0x38
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278c:	f107 0320 	add.w	r3, r7, #32
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
 80027a4:	615a      	str	r2, [r3, #20]
 80027a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <MX_TIM3_Init+0xe4>)
 80027aa:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 625.0-1;
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <MX_TIM3_Init+0xe4>)
 80027b0:	f44f 721c 	mov.w	r2, #624	; 0x270
 80027b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <MX_TIM3_Init+0xe4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <MX_TIM3_Init+0xe4>)
 80027be:	22c8      	movs	r2, #200	; 0xc8
 80027c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <MX_TIM3_Init+0xe4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <MX_TIM3_Init+0xe4>)
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ce:	4823      	ldr	r0, [pc, #140]	; (800285c <MX_TIM3_Init+0xe4>)
 80027d0:	f7fe ff8e 	bl	80016f0 <HAL_TIM_Base_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80027da:	f000 f9bd 	bl	8002b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e8:	4619      	mov	r1, r3
 80027ea:	481c      	ldr	r0, [pc, #112]	; (800285c <MX_TIM3_Init+0xe4>)
 80027ec:	f7ff fa10 	bl	8001c10 <HAL_TIM_ConfigClockSource>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80027f6:	f000 f9af 	bl	8002b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027fa:	4818      	ldr	r0, [pc, #96]	; (800285c <MX_TIM3_Init+0xe4>)
 80027fc:	f7fe ffc7 	bl	800178e <HAL_TIM_PWM_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002806:	f000 f9a7 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	4619      	mov	r1, r3
 8002818:	4810      	ldr	r0, [pc, #64]	; (800285c <MX_TIM3_Init+0xe4>)
 800281a:	f7ff fde9 	bl	80023f0 <HAL_TIMEx_MasterConfigSynchronization>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002824:	f000 f998 	bl	8002b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002828:	2360      	movs	r3, #96	; 0x60
 800282a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 800282c:	230f      	movs	r3, #15
 800282e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2200      	movs	r2, #0
 800283c:	4619      	mov	r1, r3
 800283e:	4807      	ldr	r0, [pc, #28]	; (800285c <MX_TIM3_Init+0xe4>)
 8002840:	f7ff f920 	bl	8001a84 <HAL_TIM_PWM_ConfigChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800284a:	f000 f985 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800284e:	4803      	ldr	r0, [pc, #12]	; (800285c <MX_TIM3_Init+0xe4>)
 8002850:	f000 f9ea 	bl	8002c28 <HAL_TIM_MspPostInit>

}
 8002854:	bf00      	nop
 8002856:	3738      	adds	r7, #56	; 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2001a780 	.word	0x2001a780
 8002860:	40000400 	.word	0x40000400

08002864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	4ba6      	ldr	r3, [pc, #664]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4aa5      	ldr	r2, [pc, #660]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 8002884:	f043 0310 	orr.w	r3, r3, #16
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4ba3      	ldr	r3, [pc, #652]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	4b9f      	ldr	r3, [pc, #636]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a9e      	ldr	r2, [pc, #632]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b9c      	ldr	r3, [pc, #624]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b98      	ldr	r3, [pc, #608]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a97      	ldr	r2, [pc, #604]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b95      	ldr	r3, [pc, #596]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a90      	ldr	r2, [pc, #576]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b8e      	ldr	r3, [pc, #568]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b8a      	ldr	r3, [pc, #552]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a89      	ldr	r2, [pc, #548]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b87      	ldr	r3, [pc, #540]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	4b83      	ldr	r3, [pc, #524]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a82      	ldr	r2, [pc, #520]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b80      	ldr	r3, [pc, #512]	; (8002b18 <MX_GPIO_Init+0x2b4>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	2108      	movs	r1, #8
 8002926:	487d      	ldr	r0, [pc, #500]	; (8002b1c <MX_GPIO_Init+0x2b8>)
 8002928:	f7fe fa2e 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800292c:	2201      	movs	r2, #1
 800292e:	2101      	movs	r1, #1
 8002930:	487b      	ldr	r0, [pc, #492]	; (8002b20 <MX_GPIO_Init+0x2bc>)
 8002932:	f7fe fa29 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002936:	2200      	movs	r2, #0
 8002938:	f24f 0110 	movw	r1, #61456	; 0xf010
 800293c:	4879      	ldr	r0, [pc, #484]	; (8002b24 <MX_GPIO_Init+0x2c0>)
 800293e:	f7fe fa23 	bl	8000d88 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002942:	2308      	movs	r3, #8
 8002944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002946:	2301      	movs	r3, #1
 8002948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	4870      	ldr	r0, [pc, #448]	; (8002b1c <MX_GPIO_Init+0x2b8>)
 800295a:	f7fe f863 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800295e:	2301      	movs	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002962:	2301      	movs	r3, #1
 8002964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	486a      	ldr	r0, [pc, #424]	; (8002b20 <MX_GPIO_Init+0x2bc>)
 8002976:	f7fe f855 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800297a:	2308      	movs	r3, #8
 800297c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800298a:	2305      	movs	r3, #5
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800298e:	f107 031c 	add.w	r3, r7, #28
 8002992:	4619      	mov	r1, r3
 8002994:	4862      	ldr	r0, [pc, #392]	; (8002b20 <MX_GPIO_Init+0x2bc>)
 8002996:	f7fe f845 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800299a:	2301      	movs	r3, #1
 800299c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800299e:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <MX_GPIO_Init+0x2c4>)
 80029a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	485f      	ldr	r0, [pc, #380]	; (8002b2c <MX_GPIO_Init+0x2c8>)
 80029ae:	f7fe f839 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80029b2:	2310      	movs	r3, #16
 80029b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029c2:	2306      	movs	r3, #6
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	4619      	mov	r1, r3
 80029cc:	4857      	ldr	r0, [pc, #348]	; (8002b2c <MX_GPIO_Init+0x2c8>)
 80029ce:	f7fe f829 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80029d2:	23e0      	movs	r3, #224	; 0xe0
 80029d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029e2:	2305      	movs	r3, #5
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	484f      	ldr	r0, [pc, #316]	; (8002b2c <MX_GPIO_Init+0x2c8>)
 80029ee:	f7fe f819 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80029f2:	2304      	movs	r3, #4
 80029f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80029fe:	f107 031c 	add.w	r3, r7, #28
 8002a02:	4619      	mov	r1, r3
 8002a04:	484a      	ldr	r0, [pc, #296]	; (8002b30 <MX_GPIO_Init+0x2cc>)
 8002a06:	f7fe f80d 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor2_Pin;
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor2_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	483f      	ldr	r0, [pc, #252]	; (8002b1c <MX_GPIO_Init+0x2b8>)
 8002a1e:	f7fe f801 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a34:	2305      	movs	r3, #5
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	483c      	ldr	r0, [pc, #240]	; (8002b30 <MX_GPIO_Init+0x2cc>)
 8002a40:	f7fd fff0 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002a44:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002a48:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a56:	f107 031c 	add.w	r3, r7, #28
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4831      	ldr	r0, [pc, #196]	; (8002b24 <MX_GPIO_Init+0x2c0>)
 8002a5e:	f7fd ffe1 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002a62:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a74:	2306      	movs	r3, #6
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4828      	ldr	r0, [pc, #160]	; (8002b20 <MX_GPIO_Init+0x2bc>)
 8002a80:	f7fd ffd0 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002a84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a96:	230a      	movs	r3, #10
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	f107 031c 	add.w	r3, r7, #28
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4822      	ldr	r0, [pc, #136]	; (8002b2c <MX_GPIO_Init+0x2c8>)
 8002aa2:	f7fd ffbf 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor1_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor1_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 031c 	add.w	r3, r7, #28
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	481a      	ldr	r0, [pc, #104]	; (8002b24 <MX_GPIO_Init+0x2c0>)
 8002aba:	f7fd ffb3 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002aca:	f107 031c 	add.w	r3, r7, #28
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4814      	ldr	r0, [pc, #80]	; (8002b24 <MX_GPIO_Init+0x2c0>)
 8002ad2:	f7fd ffa7 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002ad6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002adc:	2312      	movs	r3, #18
 8002ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	4619      	mov	r1, r3
 8002af2:	480f      	ldr	r0, [pc, #60]	; (8002b30 <MX_GPIO_Init+0x2cc>)
 8002af4:	f7fd ff96 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <MX_GPIO_Init+0x2c4>)
 8002afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4804      	ldr	r0, [pc, #16]	; (8002b1c <MX_GPIO_Init+0x2b8>)
 8002b0c:	f7fd ff8a 	bl	8000a24 <HAL_GPIO_Init>

}
 8002b10:	bf00      	nop
 8002b12:	3730      	adds	r7, #48	; 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	10120000 	.word	0x10120000
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020400 	.word	0x40020400

08002b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b46:	f7fd fe6b 	bl	8000820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40000c00 	.word	0x40000c00

08002b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_MspInit+0x4c>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <HAL_MspInit+0x4c>)
 8002b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_MspInit+0x4c>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_MspInit+0x4c>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_MspInit+0x4c>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_MspInit+0x4c>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8002ba6:	f002 fb03 	bl	80051b0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_TIM_Base_MspInit+0x64>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002be6:	e012      	b.n	8002c0e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_TIM_Base_MspInit+0x6c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10d      	bne.n	8002c0e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40000400 	.word	0x40000400

08002c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <HAL_TIM_MspPostInit+0x68>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d11d      	bne.n	8002c86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_TIM_MspPostInit+0x6c>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <HAL_TIM_MspPostInit+0x6c>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_TIM_MspPostInit+0x6c>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c66:	2340      	movs	r3, #64	; 0x40
 8002c68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c76:	2302      	movs	r3, #2
 8002c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4805      	ldr	r0, [pc, #20]	; (8002c98 <HAL_TIM_MspPostInit+0x70>)
 8002c82:	f7fd fecf 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c86:	bf00      	nop
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40020800 	.word	0x40020800

08002c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	; 0x30
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8002cac:	2200      	movs	r2, #0
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	2032      	movs	r0, #50	; 0x32
 8002cb2:	f7fd fe8d 	bl	80009d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8002cb6:	2032      	movs	r0, #50	; 0x32
 8002cb8:	f7fd fea6 	bl	8000a08 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_InitTick+0xa4>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_InitTick+0xa4>)
 8002cc6:	f043 0308 	orr.w	r3, r3, #8
 8002cca:	6413      	str	r3, [r2, #64]	; 0x40
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_InitTick+0xa4>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cd8:	f107 0210 	add.w	r2, r7, #16
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fcd2 	bl	800168c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ce8:	f7fe fcbc 	bl	8001664 <HAL_RCC_GetPCLK1Freq>
 8002cec:	4603      	mov	r3, r0
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <HAL_InitTick+0xa8>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0c9b      	lsrs	r3, r3, #18
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_InitTick+0xac>)
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_InitTick+0xb0>)
 8002d04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_InitTick+0xac>)
 8002d08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d0c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002d0e:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_InitTick+0xac>)
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_InitTick+0xac>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_InitTick+0xac>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002d20:	4809      	ldr	r0, [pc, #36]	; (8002d48 <HAL_InitTick+0xac>)
 8002d22:	f7fe fce5 	bl	80016f0 <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d104      	bne.n	8002d36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002d2c:	4806      	ldr	r0, [pc, #24]	; (8002d48 <HAL_InitTick+0xac>)
 8002d2e:	f7fe fd0a 	bl	8001746 <HAL_TIM_Base_Start_IT>
 8002d32:	4603      	mov	r3, r0
 8002d34:	e000      	b.n	8002d38 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3730      	adds	r7, #48	; 0x30
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	431bde83 	.word	0x431bde83
 8002d48:	2001a800 	.word	0x2001a800
 8002d4c:	40000c00 	.word	0x40000c00

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <HardFault_Handler+0x4>

08002d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <MemManage_Handler+0x4>

08002d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <BusFault_Handler+0x4>

08002d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <UsageFault_Handler+0x4>

08002d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <TIM5_IRQHandler+0x10>)
 8002d8a:	f7fe fd73 	bl	8001874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2001a800 	.word	0x2001a800

08002d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <SystemInit+0x28>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <SystemInit+0x28>)
 8002da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <SystemInit+0x28>)
 8002dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db2:	609a      	str	r2, [r3, #8]
#endif
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <Reset_Handler>:
 8002dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dfc <LoopFillZerobss+0x14>
 8002dc8:	2100      	movs	r1, #0
 8002dca:	e003      	b.n	8002dd4 <LoopCopyDataInit>

08002dcc <CopyDataInit>:
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <LoopFillZerobss+0x18>)
 8002dce:	585b      	ldr	r3, [r3, r1]
 8002dd0:	5043      	str	r3, [r0, r1]
 8002dd2:	3104      	adds	r1, #4

08002dd4 <LoopCopyDataInit>:
 8002dd4:	480b      	ldr	r0, [pc, #44]	; (8002e04 <LoopFillZerobss+0x1c>)
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <LoopFillZerobss+0x20>)
 8002dd8:	1842      	adds	r2, r0, r1
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3f6      	bcc.n	8002dcc <CopyDataInit>
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <LoopFillZerobss+0x24>)
 8002de0:	e002      	b.n	8002de8 <LoopFillZerobss>

08002de2 <FillZerobss>:
 8002de2:	2300      	movs	r3, #0
 8002de4:	f842 3b04 	str.w	r3, [r2], #4

08002de8 <LoopFillZerobss>:
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <LoopFillZerobss+0x28>)
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d3f9      	bcc.n	8002de2 <FillZerobss>
 8002dee:	f7ff ffd3 	bl	8002d98 <SystemInit>
 8002df2:	f004 fa49 	bl	8007288 <__libc_init_array>
 8002df6:	f7ff fb8b 	bl	8002510 <main>
 8002dfa:	4770      	bx	lr
 8002dfc:	20020000 	.word	0x20020000
 8002e00:	080074e0 	.word	0x080074e0
 8002e04:	20000000 	.word	0x20000000
 8002e08:	20000014 	.word	0x20000014
 8002e0c:	20000014 	.word	0x20000014
 8002e10:	2001a928 	.word	0x2001a928

08002e14 <ADC_IRQHandler>:
 8002e14:	e7fe      	b.n	8002e14 <ADC_IRQHandler>

08002e16 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f103 0208 	add.w	r2, r3, #8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f103 0208 	add.w	r2, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 0208 	add.w	r2, r3, #8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d103      	bne.n	8002ed8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e00c      	b.n	8002ef2 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3308      	adds	r3, #8
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e002      	b.n	8002ee6 <vListInsert+0x2e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d2f6      	bcs.n	8002ee0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	601a      	str	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6892      	ldr	r2, [r2, #8]
 8002f40:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6852      	ldr	r2, [r2, #4]
 8002f4a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d103      	bne.n	8002f5e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1e5a      	subs	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <xQueueGenericReset+0x28>
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	e7fe      	b.n	8002fa6 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002fa8:	f002 f97c 	bl	80052a4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	68f9      	ldr	r1, [r7, #12]
 8002fdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	441a      	add	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	22ff      	movs	r2, #255	; 0xff
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	22ff      	movs	r2, #255	; 0xff
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d114      	bne.n	8003028 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01a      	beq.n	800303c <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3310      	adds	r3, #16
 800300a:	4618      	mov	r0, r3
 800300c:	f001 f990 	bl	8004330 <xTaskRemoveFromEventList>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d012      	beq.n	800303c <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <xQueueGenericReset+0xcc>)
 8003018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	e009      	b.n	800303c <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3310      	adds	r3, #16
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fef2 	bl	8002e16 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3324      	adds	r3, #36	; 0x24
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff feed 	bl	8002e16 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800303c:	f002 f960 	bl	8005300 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003040:	2301      	movs	r3, #1
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	; 0x30
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <xQueueGenericCreate+0x28>
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	e7fe      	b.n	8003076 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <xQueueGenericCreate+0x46>
 8003088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	429a      	cmp	r2, r3
 8003094:	d101      	bne.n	800309a <xQueueGenericCreate+0x4a>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <xQueueGenericCreate+0x4c>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <xQueueGenericCreate+0x64>
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e7fe      	b.n	80030b2 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80030ba:	d909      	bls.n	80030d0 <xQueueGenericCreate+0x80>
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	e7fe      	b.n	80030ce <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	3350      	adds	r3, #80	; 0x50
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 fa05 	bl	80054e4 <pvPortMalloc>
 80030da:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3350      	adds	r3, #80	; 0x50
 80030ea:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030ec:	79fa      	ldrb	r2, [r7, #7]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4613      	mov	r3, r2
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f805 	bl	8003108 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80030fe:	6a3b      	ldr	r3, [r7, #32]
    }
 8003100:	4618      	mov	r0, r3
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e002      	b.n	800312a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003136:	2101      	movs	r1, #1
 8003138:	69b8      	ldr	r0, [r7, #24]
 800313a:	f7ff ff21 	bl	8002f80 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	2073      	movs	r0, #115	; 0x73
 800314e:	f003 f9c9 	bl	80064e4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b090      	sub	sp, #64	; 0x40
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800316a:	2300      	movs	r3, #0
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <xQueueGenericSend+0x30>
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
 800318a:	e7fe      	b.n	800318a <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <xQueueGenericSend+0x3e>
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <xQueueGenericSend+0x42>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <xQueueGenericSend+0x44>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <xQueueGenericSend+0x5c>
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	e7fe      	b.n	80031b6 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d103      	bne.n	80031c6 <xQueueGenericSend+0x6a>
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <xQueueGenericSend+0x6e>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <xQueueGenericSend+0x70>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <xQueueGenericSend+0x88>
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	623b      	str	r3, [r7, #32]
 80031e2:	e7fe      	b.n	80031e2 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031e4:	f001 fa40 	bl	8004668 <xTaskGetSchedulerState>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <xQueueGenericSend+0x98>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <xQueueGenericSend+0x9c>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <xQueueGenericSend+0x9e>
 80031f8:	2300      	movs	r3, #0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <xQueueGenericSend+0xb6>
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	e7fe      	b.n	8003210 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003212:	f002 f847 	bl	80052a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <xQueueGenericSend+0xcc>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d136      	bne.n	8003296 <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fee4 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	460b      	mov	r3, r1
 800323a:	4601      	mov	r1, r0
 800323c:	205a      	movs	r0, #90	; 0x5a
 800323e:	f003 f9c7 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003248:	f000 fa78 	bl	800373c <prvCopyDataToQueue>
 800324c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d010      	beq.n	8003278 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	3324      	adds	r3, #36	; 0x24
 800325a:	4618      	mov	r0, r3
 800325c:	f001 f868 	bl	8004330 <xTaskRemoveFromEventList>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d013      	beq.n	800328e <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003266:	4b4d      	ldr	r3, [pc, #308]	; (800339c <xQueueGenericSend+0x240>)
 8003268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	e00a      	b.n	800328e <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <xQueueGenericSend+0x240>)
 8003280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800328e:	f002 f837 	bl	8005300 <vPortExitCritical>
                return pdPASS;
 8003292:	2301      	movs	r3, #1
 8003294:	e07d      	b.n	8003392 <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d110      	bne.n	80032be <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800329c:	f002 f830 	bl	8005300 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 fea8 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	460b      	mov	r3, r1
 80032b2:	4601      	mov	r1, r0
 80032b4:	205a      	movs	r0, #90	; 0x5a
 80032b6:	f003 f98b 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e069      	b.n	8003392 <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 f897 	bl	80043fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80032d2:	f002 f815 	bl	8005300 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032d6:	f000 fde5 	bl	8003ea4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032da:	f001 ffe3 	bl	80052a4 <vPortEnterCritical>
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d103      	bne.n	80032f4 <xQueueGenericSend+0x198>
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032fa:	b25b      	sxtb	r3, r3
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d103      	bne.n	800330a <xQueueGenericSend+0x1ae>
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800330a:	f001 fff9 	bl	8005300 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800330e:	1d3a      	adds	r2, r7, #4
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f001 f886 	bl	8004428 <xTaskCheckForTimeOut>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d124      	bne.n	800336c <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003324:	f000 fb02 	bl	800392c <prvIsQueueFull>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	3310      	adds	r3, #16
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f000 ffa8 	bl	800428c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800333c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333e:	f000 fa8d 	bl	800385c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003342:	f000 fdbd 	bl	8003ec0 <xTaskResumeAll>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f47f af62 	bne.w	8003212 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <xQueueGenericSend+0x240>)
 8003350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	e758      	b.n	8003212 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003362:	f000 fa7b 	bl	800385c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003366:	f000 fdab 	bl	8003ec0 <xTaskResumeAll>
 800336a:	e752      	b.n	8003212 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800336c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336e:	f000 fa75 	bl	800385c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003372:	f000 fda5 	bl	8003ec0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fe3d 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	460b      	mov	r3, r1
 8003388:	4601      	mov	r1, r0
 800338a:	205a      	movs	r0, #90	; 0x5a
 800338c:	f003 f920 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003390:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003392:	4618      	mov	r0, r3
 8003394:	3738      	adds	r7, #56	; 0x38
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b090      	sub	sp, #64	; 0x40
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <xQueueGenericSendFromISR+0x2c>
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ca:	e7fe      	b.n	80033ca <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <xQueueGenericSendFromISR+0x3a>
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <xQueueGenericSendFromISR+0x3e>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <xQueueGenericSendFromISR+0x40>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <xQueueGenericSendFromISR+0x58>
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e7fe      	b.n	80033f6 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d103      	bne.n	8003406 <xQueueGenericSendFromISR+0x66>
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <xQueueGenericSendFromISR+0x6a>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <xQueueGenericSendFromISR+0x6c>
 800340a:	2300      	movs	r3, #0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <xQueueGenericSendFromISR+0x84>
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	623b      	str	r3, [r7, #32]
 8003422:	e7fe      	b.n	8003422 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003424:	f002 f820 	bl	8005468 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003428:	f3ef 8211 	mrs	r2, BASEPRI
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003440:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <xQueueGenericSendFromISR+0xb6>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d147      	bne.n	80034e6 <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800345c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fdc5 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 800346e:	4601      	mov	r1, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	461a      	mov	r2, r3
 8003474:	2060      	movs	r0, #96	; 0x60
 8003476:	f002 ffdb 	bl	8006430 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003480:	f000 f95c 	bl	800373c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003484:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d112      	bne.n	80034b4 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d024      	beq.n	80034e0 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	4618      	mov	r0, r3
 800349c:	f000 ff48 	bl	8004330 <xTaskRemoveFromEventList>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01c      	beq.n	80034e0 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d019      	beq.n	80034e0 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e015      	b.n	80034e0 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80034b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80034b8:	2b7f      	cmp	r3, #127	; 0x7f
 80034ba:	d109      	bne.n	80034d0 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e7fe      	b.n	80034ce <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034d4:	3301      	adds	r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	b25a      	sxtb	r2, r3
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80034e0:	2301      	movs	r3, #1
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80034e4:	e00b      	b.n	80034fe <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 fd85 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 80034ee:	4601      	mov	r1, r0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	461a      	mov	r2, r3
 80034f4:	2060      	movs	r0, #96	; 0x60
 80034f6:	f002 ff9b 	bl	8006430 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800350a:	4618      	mov	r0, r3
 800350c:	3740      	adds	r7, #64	; 0x40
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b08f      	sub	sp, #60	; 0x3c
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003520:	2300      	movs	r3, #0
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <xQueueReceive+0x2e>
        __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	e7fe      	b.n	8003540 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <xQueueReceive+0x3c>
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <xQueueReceive+0x40>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <xQueueReceive+0x42>
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <xQueueReceive+0x5a>
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	e7fe      	b.n	800356c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800356e:	f001 f87b 	bl	8004668 <xTaskGetSchedulerState>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <xQueueReceive+0x6a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <xQueueReceive+0x6e>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <xQueueReceive+0x70>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <xQueueReceive+0x88>
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e7fe      	b.n	800359a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800359c:	f001 fe82 	bl	80052a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d031      	beq.n	8003610 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035b0:	f000 f92e 	bl	8003810 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 fd1e 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 80035bc:	4604      	mov	r4, r0
 80035be:	2000      	movs	r0, #0
 80035c0:	f003 fd1a 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 80035c4:	4601      	mov	r1, r0
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	2301      	movs	r3, #1
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	460a      	mov	r2, r1
 80035d0:	4621      	mov	r1, r4
 80035d2:	205c      	movs	r0, #92	; 0x5c
 80035d4:	f002 fffc 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00f      	beq.n	8003608 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	3310      	adds	r3, #16
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fe9f 	bl	8004330 <xTaskRemoveFromEventList>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80035f8:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <xQueueReceive+0x224>)
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003608:	f001 fe7a 	bl	8005300 <vPortExitCritical>
                return pdPASS;
 800360c:	2301      	movs	r3, #1
 800360e:	e08e      	b.n	800372e <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d115      	bne.n	8003642 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003616:	f001 fe73 	bl	8005300 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fceb 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 8003622:	4604      	mov	r4, r0
 8003624:	2000      	movs	r0, #0
 8003626:	f003 fce7 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 800362a:	4601      	mov	r1, r0
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	2301      	movs	r3, #1
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	460a      	mov	r2, r1
 8003636:	4621      	mov	r1, r4
 8003638:	205c      	movs	r0, #92	; 0x5c
 800363a:	f002 ffc9 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800363e:	2300      	movs	r3, #0
 8003640:	e075      	b.n	800372e <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fed5 	bl	80043fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003652:	2301      	movs	r3, #1
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003656:	f001 fe53 	bl	8005300 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800365a:	f000 fc23 	bl	8003ea4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800365e:	f001 fe21 	bl	80052a4 <vPortEnterCritical>
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003668:	b25b      	sxtb	r3, r3
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d103      	bne.n	8003678 <xQueueReceive+0x164>
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367e:	b25b      	sxtb	r3, r3
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d103      	bne.n	800368e <xQueueReceive+0x17a>
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800368e:	f001 fe37 	bl	8005300 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003692:	1d3a      	adds	r2, r7, #4
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fec4 	bl	8004428 <xTaskCheckForTimeOut>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d124      	bne.n	80036f0 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036a8:	f000 f92a 	bl	8003900 <prvIsQueueEmpty>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d018      	beq.n	80036e4 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	3324      	adds	r3, #36	; 0x24
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fde6 	bl	800428c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80036c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c2:	f000 f8cb 	bl	800385c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80036c6:	f000 fbfb 	bl	8003ec0 <xTaskResumeAll>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f af65 	bne.w	800359c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80036d2:	4b19      	ldr	r3, [pc, #100]	; (8003738 <xQueueReceive+0x224>)
 80036d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	e75b      	b.n	800359c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80036e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e6:	f000 f8b9 	bl	800385c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80036ea:	f000 fbe9 	bl	8003ec0 <xTaskResumeAll>
 80036ee:	e755      	b.n	800359c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80036f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036f2:	f000 f8b3 	bl	800385c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80036f6:	f000 fbe3 	bl	8003ec0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fc:	f000 f900 	bl	8003900 <prvIsQueueEmpty>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	f43f af4a 	beq.w	800359c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	4618      	mov	r0, r3
 800370c:	f003 fc74 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 8003710:	4604      	mov	r4, r0
 8003712:	2000      	movs	r0, #0
 8003714:	f003 fc70 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 8003718:	4601      	mov	r1, r0
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	2301      	movs	r3, #1
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	460a      	mov	r2, r1
 8003724:	4621      	mov	r1, r4
 8003726:	205c      	movs	r0, #92	; 0x5c
 8003728:	f002 ff52 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800372c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800372e:	4618      	mov	r0, r3
 8003730:	3734      	adds	r7, #52	; 0x34
 8003732:	46bd      	mov	sp, r7
 8003734:	bd90      	pop	{r4, r7, pc}
 8003736:	bf00      	nop
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10d      	bne.n	8003776 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d14d      	bne.n	80037fe <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 ff9c 	bl	80046a4 <xTaskPriorityDisinherit>
 800376c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	e043      	b.n	80037fe <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d119      	bne.n	80037b0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6858      	ldr	r0, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	461a      	mov	r2, r3
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	f003 fdb1 	bl	80072ee <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	441a      	add	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d32b      	bcc.n	80037fe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	e026      	b.n	80037fe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68d8      	ldr	r0, [r3, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	461a      	mov	r2, r3
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	f003 fd97 	bl	80072ee <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	425b      	negs	r3, r3
 80037ca:	441a      	add	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d207      	bcs.n	80037ec <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	425b      	negs	r3, r3
 80037e6:	441a      	add	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d105      	bne.n	80037fe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003806:	697b      	ldr	r3, [r7, #20]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d018      	beq.n	8003854 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	441a      	add	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d303      	bcc.n	8003844 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68d9      	ldr	r1, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	461a      	mov	r2, r3
 800384e:	6838      	ldr	r0, [r7, #0]
 8003850:	f003 fd4d 	bl	80072ee <memcpy>
    }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003864:	f001 fd1e 	bl	80052a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800386e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003870:	e011      	b.n	8003896 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d012      	beq.n	80038a0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3324      	adds	r3, #36	; 0x24
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fd56 	bl	8004330 <xTaskRemoveFromEventList>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800388a:	f000 fe31 	bl	80044f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	3b01      	subs	r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800389a:	2b00      	cmp	r3, #0
 800389c:	dce9      	bgt.n	8003872 <prvUnlockQueue+0x16>
 800389e:	e000      	b.n	80038a2 <prvUnlockQueue+0x46>
                        break;
 80038a0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	22ff      	movs	r2, #255	; 0xff
 80038a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80038aa:	f001 fd29 	bl	8005300 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80038ae:	f001 fcf9 	bl	80052a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80038ba:	e011      	b.n	80038e0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3310      	adds	r3, #16
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fd31 	bl	8004330 <xTaskRemoveFromEventList>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80038d4:	f000 fe0c 	bl	80044f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	3b01      	subs	r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80038e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	dce9      	bgt.n	80038bc <prvUnlockQueue+0x60>
 80038e8:	e000      	b.n	80038ec <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80038ea:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80038f4:	f001 fd04 	bl	8005300 <vPortExitCritical>
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003908:	f001 fccc 	bl	80052a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003914:	2301      	movs	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e001      	b.n	800391e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800391e:	f001 fcef 	bl	8005300 <vPortExitCritical>

    return xReturn;
 8003922:	68fb      	ldr	r3, [r7, #12]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003934:	f001 fcb6 	bl	80052a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	429a      	cmp	r2, r3
 8003942:	d102      	bne.n	800394a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003944:	2301      	movs	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e001      	b.n	800394e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800394e:	f001 fcd7 	bl	8005300 <vPortExitCritical>

    return xReturn;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e01e      	b.n	80039aa <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800396c:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <vQueueAddToRegistry+0x5c>)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d115      	bne.n	80039a4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003978:	490f      	ldr	r1, [pc, #60]	; (80039b8 <vQueueAddToRegistry+0x5c>)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003982:	4a0d      	ldr	r2, [pc, #52]	; (80039b8 <vQueueAddToRegistry+0x5c>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4618      	mov	r0, r3
 8003992:	f003 fb31 	bl	8006ff8 <SEGGER_SYSVIEW_ShrinkId>
 8003996:	4601      	mov	r1, r0
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	2071      	movs	r0, #113	; 0x71
 800399e:	f002 fd47 	bl	8006430 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80039a2:	e005      	b.n	80039b0 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b07      	cmp	r3, #7
 80039ae:	d9dd      	bls.n	800396c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	2001a840 	.word	0x2001a840

080039bc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80039cc:	f001 fc6a 	bl	80052a4 <vPortEnterCritical>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d103      	bne.n	80039e6 <vQueueWaitForMessageRestricted+0x2a>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d103      	bne.n	80039fc <vQueueWaitForMessageRestricted+0x40>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039fc:	f001 fc80 	bl	8005300 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fc5f 	bl	80042d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f7ff ff20 	bl	800385c <prvUnlockQueue>
    }
 8003a1c:	bf00      	nop
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af04      	add	r7, sp, #16
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fd53 	bl	80054e4 <pvPortMalloc>
 8003a3e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00e      	beq.n	8003a64 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a46:	2058      	movs	r0, #88	; 0x58
 8003a48:	f001 fd4c 	bl	80054e4 <pvPortMalloc>
 8003a4c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5a:	e005      	b.n	8003a68 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003a5c:	6978      	ldr	r0, [r7, #20]
 8003a5e:	f001 fe1d 	bl	800569c <vPortFree>
 8003a62:	e001      	b.n	8003a68 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d013      	beq.n	8003a96 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	2300      	movs	r3, #0
 8003a72:	9303      	str	r3, [sp, #12]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	9302      	str	r3, [sp, #8]
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f80e 	bl	8003aa6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003a8a:	69f8      	ldr	r0, [r7, #28]
 8003a8c:	f000 f8a0 	bl	8003bd0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003a90:	2301      	movs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e002      	b.n	8003a9c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
    }
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b088      	sub	sp, #32
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	461a      	mov	r2, r3
 8003abe:	21a5      	movs	r1, #165	; 0xa5
 8003ac0:	f003 fc20 	bl	8007304 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f023 0307 	bic.w	r3, r3, #7
 8003adc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <prvInitialiseNewTask+0x56>
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e7fe      	b.n	8003afa <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01f      	beq.n	8003b42 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e012      	b.n	8003b2e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	7819      	ldrb	r1, [r3, #0]
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	3334      	adds	r3, #52	; 0x34
 8003b18:	460a      	mov	r2, r1
 8003b1a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	d9e9      	bls.n	8003b08 <prvInitialiseNewTask+0x62>
 8003b34:	e000      	b.n	8003b38 <prvInitialiseNewTask+0x92>
            {
                break;
 8003b36:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b40:	e003      	b.n	8003b4a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d901      	bls.n	8003b54 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b50:	2304      	movs	r3, #4
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	2200      	movs	r2, #0
 8003b64:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff f973 	bl	8002e56 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	3318      	adds	r3, #24
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff f96e 	bl	8002e56 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	f1c3 0205 	rsb	r2, r3, #5
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	3350      	adds	r3, #80	; 0x50
 8003b94:	2204      	movs	r2, #4
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 fbb3 	bl	8007304 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	3354      	adds	r3, #84	; 0x54
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fbac 	bl	8007304 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	69b8      	ldr	r0, [r7, #24]
 8003bb2:	f001 f9d7 	bl	8004f64 <pxPortInitialiseStack>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bc8:	bf00      	nop
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003bd0:	b5b0      	push	{r4, r5, r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003bd8:	f001 fb64 	bl	80052a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <prvAddNewTaskToReadyList+0xfc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <prvAddNewTaskToReadyList+0xfc>)
 8003be4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003be6:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <prvAddNewTaskToReadyList+0x100>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003bee:	4a38      	ldr	r2, [pc, #224]	; (8003cd0 <prvAddNewTaskToReadyList+0x100>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bf4:	4b35      	ldr	r3, [pc, #212]	; (8003ccc <prvAddNewTaskToReadyList+0xfc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d110      	bne.n	8003c1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003bfc:	f000 fc9c 	bl	8004538 <prvInitialiseTaskLists>
 8003c00:	e00d      	b.n	8003c1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003c02:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <prvAddNewTaskToReadyList+0x104>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <prvAddNewTaskToReadyList+0x100>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d802      	bhi.n	8003c1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003c18:	4a2d      	ldr	r2, [pc, #180]	; (8003cd0 <prvAddNewTaskToReadyList+0x100>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003c1e:	4b2e      	ldr	r3, [pc, #184]	; (8003cd8 <prvAddNewTaskToReadyList+0x108>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <prvAddNewTaskToReadyList+0x108>)
 8003c26:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <prvAddNewTaskToReadyList+0x108>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <prvAddNewTaskToReadyList+0x94>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 f8b7 	bl	8006dac <SEGGER_SYSVIEW_OnTaskCreate>
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	461d      	mov	r5, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461c      	mov	r4, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	1ae3      	subs	r3, r4, r3
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	462b      	mov	r3, r5
 8003c60:	f001 fee0 	bl	8005a24 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 f924 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <prvAddNewTaskToReadyList+0x10c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <prvAddNewTaskToReadyList+0x10c>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <prvAddNewTaskToReadyList+0x110>)
 8003c8c:	441a      	add	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4610      	mov	r0, r2
 8003c96:	f7ff f8eb 	bl	8002e70 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003c9a:	f001 fb31 	bl	8005300 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <prvAddNewTaskToReadyList+0x104>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00e      	beq.n	8003cc4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <prvAddNewTaskToReadyList+0x100>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d207      	bcs.n	8003cc4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <prvAddNewTaskToReadyList+0x114>)
 8003cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bdb0      	pop	{r4, r5, r7, pc}
 8003ccc:	20000110 	.word	0x20000110
 8003cd0:	20000038 	.word	0x20000038
 8003cd4:	2000011c 	.word	0x2000011c
 8003cd8:	2000012c 	.word	0x2000012c
 8003cdc:	20000118 	.word	0x20000118
 8003ce0:	2000003c 	.word	0x2000003c
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <xTaskDelayUntil+0x28>
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e7fe      	b.n	8003d0e <xTaskDelayUntil+0x26>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <xTaskDelayUntil+0x42>
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	e7fe      	b.n	8003d28 <xTaskDelayUntil+0x40>
        configASSERT( uxSchedulerSuspended == 0 );
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <xTaskDelayUntil+0xf0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <xTaskDelayUntil+0x5e>
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e7fe      	b.n	8003d44 <xTaskDelayUntil+0x5c>

        vTaskSuspendAll();
 8003d46:	f000 f8ad 	bl	8003ea4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <xTaskDelayUntil+0xf4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a3a      	ldr	r2, [r7, #32]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d20b      	bcs.n	8003d7c <xTaskDelayUntil+0x94>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d211      	bcs.n	8003d92 <xTaskDelayUntil+0xaa>
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90d      	bls.n	8003d92 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8003d76:	2301      	movs	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	e00a      	b.n	8003d92 <xTaskDelayUntil+0xaa>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d303      	bcc.n	8003d8e <xTaskDelayUntil+0xa6>
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d901      	bls.n	8003d92 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003d9e:	2024      	movs	r0, #36	; 0x24
 8003da0:	f002 faec 	bl	800637c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fcf7 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003db2:	f000 f885 	bl	8003ec0 <xTaskResumeAll>
 8003db6:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8003dbe:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <xTaskDelayUntil+0xf8>)
 8003dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3728      	adds	r7, #40	; 0x28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000138 	.word	0x20000138
 8003ddc:	20000114 	.word	0x20000114
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <vTaskStartScheduler+0xa0>)
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	2282      	movs	r2, #130	; 0x82
 8003df6:	4924      	ldr	r1, [pc, #144]	; (8003e88 <vTaskStartScheduler+0xa4>)
 8003df8:	4824      	ldr	r0, [pc, #144]	; (8003e8c <vTaskStartScheduler+0xa8>)
 8003dfa:	f7ff fe13 	bl	8003a24 <xTaskCreate>
 8003dfe:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d102      	bne.n	8003e0c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003e06:	f000 fd43 	bl	8004890 <xTimerCreateTimerTask>
 8003e0a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d123      	bne.n	8003e5a <vTaskStartScheduler+0x76>
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <vTaskStartScheduler+0xac>)
 8003e26:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <vTaskStartScheduler+0xb0>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <vTaskStartScheduler+0xb4>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003e38:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <vTaskStartScheduler+0xb8>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <vTaskStartScheduler+0xa0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d102      	bne.n	8003e4a <vTaskStartScheduler+0x66>
 8003e44:	f002 ff96 	bl	8006d74 <SEGGER_SYSVIEW_OnIdle>
 8003e48:	e004      	b.n	8003e54 <vTaskStartScheduler+0x70>
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <vTaskStartScheduler+0xb8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f002 ffee 	bl	8006e30 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003e54:	f001 f90e 	bl	8005074 <xPortStartScheduler>
 8003e58:	e00d      	b.n	8003e76 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d109      	bne.n	8003e76 <vTaskStartScheduler+0x92>
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	e7fe      	b.n	8003e74 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <vTaskStartScheduler+0xbc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000134 	.word	0x20000134
 8003e88:	080073c0 	.word	0x080073c0
 8003e8c:	08004509 	.word	0x08004509
 8003e90:	20000130 	.word	0x20000130
 8003e94:	2000011c 	.word	0x2000011c
 8003e98:	20000114 	.word	0x20000114
 8003e9c:	20000038 	.word	0x20000038
 8003ea0:	2000000c 	.word	0x2000000c

08003ea4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <vTaskSuspendAll+0x18>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a03      	ldr	r2, [pc, #12]	; (8003ebc <vTaskSuspendAll+0x18>)
 8003eb0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000138 	.word	0x20000138

08003ec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <xTaskResumeAll+0x11c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <xTaskResumeAll+0x2a>
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	e7fe      	b.n	8003ee8 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003eea:	f001 f9db 	bl	80052a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003eee:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <xTaskResumeAll+0x11c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	4a39      	ldr	r2, [pc, #228]	; (8003fdc <xTaskResumeAll+0x11c>)
 8003ef6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef8:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <xTaskResumeAll+0x11c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d165      	bne.n	8003fcc <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f00:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <xTaskResumeAll+0x120>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d061      	beq.n	8003fcc <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f08:	e032      	b.n	8003f70 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <xTaskResumeAll+0x124>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3318      	adds	r3, #24
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff f807 	bl	8002f2a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f802 	bl	8002f2a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 ffc3 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <xTaskResumeAll+0x128>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <xTaskResumeAll+0x128>)
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4a27      	ldr	r2, [pc, #156]	; (8003fec <xTaskResumeAll+0x12c>)
 8003f4e:	441a      	add	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f7fe ff8a 	bl	8002e70 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <xTaskResumeAll+0x130>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <xTaskResumeAll+0x134>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <xTaskResumeAll+0x124>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1c8      	bne.n	8003f0a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f7e:	f000 fb57 	bl	8004630 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f82:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <xTaskResumeAll+0x138>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f8e:	f000 f859 	bl	8004044 <xTaskIncrementTick>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8003f98:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <xTaskResumeAll+0x134>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f1      	bne.n	8003f8e <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <xTaskResumeAll+0x138>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <xTaskResumeAll+0x134>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <xTaskResumeAll+0x13c>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003fcc:	f001 f998 	bl	8005300 <vPortExitCritical>

    return xAlreadyYielded;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000138 	.word	0x20000138
 8003fe0:	20000110 	.word	0x20000110
 8003fe4:	200000d0 	.word	0x200000d0
 8003fe8:	20000118 	.word	0x20000118
 8003fec:	2000003c 	.word	0x2000003c
 8003ff0:	20000038 	.word	0x20000038
 8003ff4:	20000124 	.word	0x20000124
 8003ff8:	20000120 	.word	0x20000120
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <xTaskGetTickCount+0x1c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800400c:	687b      	ldr	r3, [r7, #4]
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000114 	.word	0x20000114

08004020 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004026:	f001 fa1f 	bl	8005468 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <xTaskGetTickCountFromISR+0x20>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004034:	683b      	ldr	r3, [r7, #0]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000114 	.word	0x20000114

08004044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800404e:	4b50      	ldr	r3, [pc, #320]	; (8004190 <xTaskIncrementTick+0x14c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f040 8091 	bne.w	800417a <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004058:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <xTaskIncrementTick+0x150>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004060:	4a4c      	ldr	r2, [pc, #304]	; (8004194 <xTaskIncrementTick+0x150>)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d11f      	bne.n	80040ac <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800406c:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <xTaskIncrementTick+0x154>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <xTaskIncrementTick+0x46>
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	e7fe      	b.n	8004088 <xTaskIncrementTick+0x44>
 800408a:	4b43      	ldr	r3, [pc, #268]	; (8004198 <xTaskIncrementTick+0x154>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	4b42      	ldr	r3, [pc, #264]	; (800419c <xTaskIncrementTick+0x158>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a40      	ldr	r2, [pc, #256]	; (8004198 <xTaskIncrementTick+0x154>)
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4a40      	ldr	r2, [pc, #256]	; (800419c <xTaskIncrementTick+0x158>)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <xTaskIncrementTick+0x15c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	4a3e      	ldr	r2, [pc, #248]	; (80041a0 <xTaskIncrementTick+0x15c>)
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	f000 fac2 	bl	8004630 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80040ac:	4b3d      	ldr	r3, [pc, #244]	; (80041a4 <xTaskIncrementTick+0x160>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d34c      	bcc.n	8004150 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040b6:	4b38      	ldr	r3, [pc, #224]	; (8004198 <xTaskIncrementTick+0x154>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c0:	4b38      	ldr	r3, [pc, #224]	; (80041a4 <xTaskIncrementTick+0x160>)
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	601a      	str	r2, [r3, #0]
                    break;
 80040c8:	e042      	b.n	8004150 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ca:	4b33      	ldr	r3, [pc, #204]	; (8004198 <xTaskIncrementTick+0x154>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d203      	bcs.n	80040ea <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80040e2:	4a30      	ldr	r2, [pc, #192]	; (80041a4 <xTaskIncrementTick+0x160>)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040e8:	e032      	b.n	8004150 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe ff1b 	bl	8002f2a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	3318      	adds	r3, #24
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe ff12 	bl	8002f2a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4618      	mov	r0, r3
 800410a:	f002 fed3 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	2201      	movs	r2, #1
 8004114:	409a      	lsls	r2, r3
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <xTaskIncrementTick+0x164>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <xTaskIncrementTick+0x164>)
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <xTaskIncrementTick+0x168>)
 800412e:	441a      	add	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f7fe fe9a 	bl	8002e70 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <xTaskIncrementTick+0x16c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	429a      	cmp	r2, r3
 8004148:	d3b5      	bcc.n	80040b6 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800414a:	2301      	movs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800414e:	e7b2      	b.n	80040b6 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004150:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <xTaskIncrementTick+0x16c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	4915      	ldr	r1, [pc, #84]	; (80041ac <xTaskIncrementTick+0x168>)
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d901      	bls.n	800416c <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <xTaskIncrementTick+0x170>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e004      	b.n	8004184 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <xTaskIncrementTick+0x174>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <xTaskIncrementTick+0x174>)
 8004182:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004184:	697b      	ldr	r3, [r7, #20]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000138 	.word	0x20000138
 8004194:	20000114 	.word	0x20000114
 8004198:	200000c8 	.word	0x200000c8
 800419c:	200000cc 	.word	0x200000cc
 80041a0:	20000128 	.word	0x20000128
 80041a4:	20000130 	.word	0x20000130
 80041a8:	20000118 	.word	0x20000118
 80041ac:	2000003c 	.word	0x2000003c
 80041b0:	20000038 	.word	0x20000038
 80041b4:	20000124 	.word	0x20000124
 80041b8:	20000120 	.word	0x20000120

080041bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041c2:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <vTaskSwitchContext+0xb8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80041ca:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <vTaskSwitchContext+0xbc>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80041d0:	e04c      	b.n	800426c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <vTaskSwitchContext+0xbc>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d8:	4b28      	ldr	r3, [pc, #160]	; (800427c <vTaskSwitchContext+0xc0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	fab3 f383 	clz	r3, r3
 80041e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80041e6:	7afb      	ldrb	r3, [r7, #11]
 80041e8:	f1c3 031f 	rsb	r3, r3, #31
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	4924      	ldr	r1, [pc, #144]	; (8004280 <vTaskSwitchContext+0xc4>)
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <vTaskSwitchContext+0x5a>
        __asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	e7fe      	b.n	8004214 <vTaskSwitchContext+0x58>
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4a17      	ldr	r2, [pc, #92]	; (8004280 <vTaskSwitchContext+0xc4>)
 8004222:	4413      	add	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3308      	adds	r3, #8
 8004238:	429a      	cmp	r2, r3
 800423a:	d104      	bne.n	8004246 <vTaskSwitchContext+0x8a>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <vTaskSwitchContext+0xc8>)
 800424e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <vTaskSwitchContext+0xc8>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <vTaskSwitchContext+0xcc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d102      	bne.n	8004262 <vTaskSwitchContext+0xa6>
 800425c:	f002 fd8a 	bl	8006d74 <SEGGER_SYSVIEW_OnIdle>
}
 8004260:	e004      	b.n	800426c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <vTaskSwitchContext+0xc8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f002 fde2 	bl	8006e30 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800426c:	bf00      	nop
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000138 	.word	0x20000138
 8004278:	20000124 	.word	0x20000124
 800427c:	20000118 	.word	0x20000118
 8004280:	2000003c 	.word	0x2000003c
 8004284:	20000038 	.word	0x20000038
 8004288:	20000134 	.word	0x20000134

0800428c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d109      	bne.n	80042b0 <vTaskPlaceOnEventList+0x24>
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e7fe      	b.n	80042ae <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <vTaskPlaceOnEventList+0x44>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3318      	adds	r3, #24
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fe fdfd 	bl	8002eb8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042be:	2101      	movs	r1, #1
 80042c0:	6838      	ldr	r0, [r7, #0]
 80042c2:	f000 fa6d 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000038 	.word	0x20000038

080042d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <vTaskPlaceOnEventListRestricted+0x26>
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e7fe      	b.n	80042f8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <vTaskPlaceOnEventListRestricted+0x58>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3318      	adds	r3, #24
 8004300:	4619      	mov	r1, r3
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7fe fdb4 	bl	8002e70 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004314:	2024      	movs	r0, #36	; 0x24
 8004316:	f002 f831 	bl	800637c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	68b8      	ldr	r0, [r7, #8]
 800431e:	f000 fa3f 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
    }
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000038 	.word	0x20000038

08004330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <xTaskRemoveFromEventList+0x2a>
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e7fe      	b.n	8004358 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3318      	adds	r3, #24
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fde3 	bl	8002f2a <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004364:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <xTaskRemoveFromEventList+0xb4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d120      	bne.n	80043ae <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe fdda 	bl	8002f2a <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4618      	mov	r0, r3
 800437a:	f002 fd9b 	bl	8006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	2201      	movs	r2, #1
 8004384:	409a      	lsls	r2, r3
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <xTaskRemoveFromEventList+0xb8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4313      	orrs	r3, r2
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <xTaskRemoveFromEventList+0xb8>)
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <xTaskRemoveFromEventList+0xbc>)
 800439e:	441a      	add	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7fe fd62 	bl	8002e70 <vListInsertEnd>
 80043ac:	e005      	b.n	80043ba <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3318      	adds	r3, #24
 80043b2:	4619      	mov	r1, r3
 80043b4:	480e      	ldr	r0, [pc, #56]	; (80043f0 <xTaskRemoveFromEventList+0xc0>)
 80043b6:	f7fe fd5b 	bl	8002e70 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <xTaskRemoveFromEventList+0xc4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d905      	bls.n	80043d4 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <xTaskRemoveFromEventList+0xc8>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e001      	b.n	80043d8 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80043d8:	697b      	ldr	r3, [r7, #20]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000138 	.word	0x20000138
 80043e8:	20000118 	.word	0x20000118
 80043ec:	2000003c 	.word	0x2000003c
 80043f0:	200000d0 	.word	0x200000d0
 80043f4:	20000038 	.word	0x20000038
 80043f8:	20000124 	.word	0x20000124

080043fc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <vTaskInternalSetTimeOutState+0x24>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <vTaskInternalSetTimeOutState+0x28>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	605a      	str	r2, [r3, #4]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20000128 	.word	0x20000128
 8004424:	20000114 	.word	0x20000114

08004428 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <xTaskCheckForTimeOut+0x24>
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	e7fe      	b.n	800444a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <xTaskCheckForTimeOut+0x3e>
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e7fe      	b.n	8004464 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8004466:	f000 ff1d 	bl	80052a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800446a:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <xTaskCheckForTimeOut+0xc0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d102      	bne.n	800448a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e026      	b.n	80044d8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <xTaskCheckForTimeOut+0xc4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d00a      	beq.n	80044ac <xTaskCheckForTimeOut+0x84>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	429a      	cmp	r2, r3
 800449e:	d305      	bcc.n	80044ac <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e015      	b.n	80044d8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d20b      	bcs.n	80044ce <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad2      	subs	r2, r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff ff9a 	bl	80043fc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e004      	b.n	80044d8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80044d8:	f000 ff12 	bl	8005300 <vPortExitCritical>

    return xReturn;
 80044dc:	69fb      	ldr	r3, [r7, #28]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000114 	.word	0x20000114
 80044ec:	20000128 	.word	0x20000128

080044f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <vTaskMissedYield+0x14>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	20000124 	.word	0x20000124

08004508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004510:	f000 f852 	bl	80045b8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <prvIdleTask+0x28>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d9f9      	bls.n	8004510 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <prvIdleTask+0x2c>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800452c:	e7f0      	b.n	8004510 <prvIdleTask+0x8>
 800452e:	bf00      	nop
 8004530:	2000003c 	.word	0x2000003c
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800453e:	2300      	movs	r3, #0
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	e00c      	b.n	800455e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4a12      	ldr	r2, [pc, #72]	; (8004598 <prvInitialiseTaskLists+0x60>)
 8004550:	4413      	add	r3, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fc5f 	bl	8002e16 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3301      	adds	r3, #1
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d9ef      	bls.n	8004544 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004564:	480d      	ldr	r0, [pc, #52]	; (800459c <prvInitialiseTaskLists+0x64>)
 8004566:	f7fe fc56 	bl	8002e16 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800456a:	480d      	ldr	r0, [pc, #52]	; (80045a0 <prvInitialiseTaskLists+0x68>)
 800456c:	f7fe fc53 	bl	8002e16 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004570:	480c      	ldr	r0, [pc, #48]	; (80045a4 <prvInitialiseTaskLists+0x6c>)
 8004572:	f7fe fc50 	bl	8002e16 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004576:	480c      	ldr	r0, [pc, #48]	; (80045a8 <prvInitialiseTaskLists+0x70>)
 8004578:	f7fe fc4d 	bl	8002e16 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800457c:	480b      	ldr	r0, [pc, #44]	; (80045ac <prvInitialiseTaskLists+0x74>)
 800457e:	f7fe fc4a 	bl	8002e16 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <prvInitialiseTaskLists+0x78>)
 8004584:	4a05      	ldr	r2, [pc, #20]	; (800459c <prvInitialiseTaskLists+0x64>)
 8004586:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <prvInitialiseTaskLists+0x7c>)
 800458a:	4a05      	ldr	r2, [pc, #20]	; (80045a0 <prvInitialiseTaskLists+0x68>)
 800458c:	601a      	str	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2000003c 	.word	0x2000003c
 800459c:	200000a0 	.word	0x200000a0
 80045a0:	200000b4 	.word	0x200000b4
 80045a4:	200000d0 	.word	0x200000d0
 80045a8:	200000e4 	.word	0x200000e4
 80045ac:	200000fc 	.word	0x200000fc
 80045b0:	200000c8 	.word	0x200000c8
 80045b4:	200000cc 	.word	0x200000cc

080045b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045be:	e019      	b.n	80045f4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80045c0:	f000 fe70 	bl	80052a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <prvCheckTasksWaitingTermination+0x4c>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fcaa 	bl	8002f2a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <prvCheckTasksWaitingTermination+0x50>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <prvCheckTasksWaitingTermination+0x50>)
 80045de:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	4a09      	ldr	r2, [pc, #36]	; (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045e8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80045ea:	f000 fe89 	bl	8005300 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f80e 	bl	8004610 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e1      	bne.n	80045c0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	200000e4 	.word	0x200000e4
 8004608:	20000110 	.word	0x20000110
 800460c:	200000f8 	.word	0x200000f8

08004610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f83d 	bl	800569c <vPortFree>
                vPortFree( pxTCB );
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f001 f83a 	bl	800569c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <prvResetNextTaskUnblockTime+0x30>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <prvResetNextTaskUnblockTime+0x34>)
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004646:	e005      	b.n	8004654 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <prvResetNextTaskUnblockTime+0x30>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <prvResetNextTaskUnblockTime+0x34>)
 8004652:	6013      	str	r3, [r2, #0]
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	200000c8 	.word	0x200000c8
 8004664:	20000130 	.word	0x20000130

08004668 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <xTaskGetSchedulerState+0x34>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004676:	2301      	movs	r3, #1
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	e008      	b.n	800468e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <xTaskGetSchedulerState+0x38>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004684:	2302      	movs	r3, #2
 8004686:	607b      	str	r3, [r7, #4]
 8004688:	e001      	b.n	800468e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800468a:	2300      	movs	r3, #0
 800468c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800468e:	687b      	ldr	r3, [r7, #4]
    }
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	2000011c 	.word	0x2000011c
 80046a0:	20000138 	.word	0x20000138

080046a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d066      	beq.n	8004788 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <xTaskPriorityDisinherit+0xf0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d009      	beq.n	80046d8 <xTaskPriorityDisinherit+0x34>
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e7fe      	b.n	80046d6 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <xTaskPriorityDisinherit+0x50>
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	e7fe      	b.n	80046f2 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	1e5a      	subs	r2, r3, #1
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	429a      	cmp	r2, r3
 8004708:	d03e      	beq.n	8004788 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d13a      	bne.n	8004788 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	3304      	adds	r3, #4
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fc07 	bl	8002f2a <uxListRemove>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	2201      	movs	r2, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43da      	mvns	r2, r3
 800472e:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <xTaskPriorityDisinherit+0xf4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4013      	ands	r3, r2
 8004734:	4a18      	ldr	r2, [pc, #96]	; (8004798 <xTaskPriorityDisinherit+0xf4>)
 8004736:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4619      	mov	r1, r3
 800473c:	204a      	movs	r0, #74	; 0x4a
 800473e:	f001 fe3b 	bl	80063b8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	f1c3 0205 	rsb	r2, r3, #5
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	2201      	movs	r2, #1
 800475c:	409a      	lsls	r2, r3
 800475e:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <xTaskPriorityDisinherit+0xf4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <xTaskPriorityDisinherit+0xf4>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4a09      	ldr	r2, [pc, #36]	; (800479c <xTaskPriorityDisinherit+0xf8>)
 8004776:	441a      	add	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fe fb76 	bl	8002e70 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004788:	697b      	ldr	r3, [r7, #20]
    }
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000038 	.word	0x20000038
 8004798:	20000118 	.word	0x20000118
 800479c:	2000003c 	.word	0x2000003c

080047a0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80047aa:	4b32      	ldr	r3, [pc, #200]	; (8004874 <prvAddCurrentTaskToDelayedList+0xd4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b0:	4b31      	ldr	r3, [pc, #196]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fbb7 	bl	8002f2a <uxListRemove>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	2201      	movs	r2, #1
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43da      	mvns	r2, r3
 80047d0:	4b2a      	ldr	r3, [pc, #168]	; (800487c <prvAddCurrentTaskToDelayedList+0xdc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4013      	ands	r3, r2
 80047d6:	4a29      	ldr	r2, [pc, #164]	; (800487c <prvAddCurrentTaskToDelayedList+0xdc>)
 80047d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d110      	bne.n	8004804 <prvAddCurrentTaskToDelayedList+0x64>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80047e8:	4b23      	ldr	r3, [pc, #140]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	211b      	movs	r1, #27
 80047ee:	4618      	mov	r0, r3
 80047f0:	f002 fba2 	bl	8006f38 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f4:	4b20      	ldr	r3, [pc, #128]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4619      	mov	r1, r3
 80047fc:	4820      	ldr	r0, [pc, #128]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe0>)
 80047fe:	f7fe fb37 	bl	8002e70 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004802:	e032      	b.n	800486a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	429a      	cmp	r2, r3
 800481a:	d20f      	bcs.n	800483c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800481c:	4b16      	ldr	r3, [pc, #88]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2104      	movs	r1, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f002 fb88 	bl	8006f38 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <prvAddCurrentTaskToDelayedList+0xe4>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3304      	adds	r3, #4
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f7fe fb3f 	bl	8002eb8 <vListInsert>
}
 800483a:	e016      	b.n	800486a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800483c:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2104      	movs	r1, #4
 8004842:	4618      	mov	r0, r3
 8004844:	f002 fb78 	bl	8006f38 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <prvAddCurrentTaskToDelayedList+0xe8>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <prvAddCurrentTaskToDelayedList+0xd8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3304      	adds	r3, #4
 8004852:	4619      	mov	r1, r3
 8004854:	4610      	mov	r0, r2
 8004856:	f7fe fb2f 	bl	8002eb8 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <prvAddCurrentTaskToDelayedList+0xec>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	429a      	cmp	r2, r3
 8004862:	d202      	bcs.n	800486a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004864:	4a09      	ldr	r2, [pc, #36]	; (800488c <prvAddCurrentTaskToDelayedList+0xec>)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6013      	str	r3, [r2, #0]
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000114 	.word	0x20000114
 8004878:	20000038 	.word	0x20000038
 800487c:	20000118 	.word	0x20000118
 8004880:	200000fc 	.word	0x200000fc
 8004884:	200000cc 	.word	0x200000cc
 8004888:	200000c8 	.word	0x200000c8
 800488c:	20000130 	.word	0x20000130

08004890 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800489a:	f000 fb2d 	bl	8004ef8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <xTimerCreateTimerTask+0x54>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <xTimerCreateTimerTask+0x58>)
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	2302      	movs	r3, #2
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2300      	movs	r3, #0
 80048b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048b4:	490d      	ldr	r1, [pc, #52]	; (80048ec <xTimerCreateTimerTask+0x5c>)
 80048b6:	480e      	ldr	r0, [pc, #56]	; (80048f0 <xTimerCreateTimerTask+0x60>)
 80048b8:	f7ff f8b4 	bl	8003a24 <xTaskCreate>
 80048bc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d109      	bne.n	80048d8 <xTimerCreateTimerTask+0x48>
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	e7fe      	b.n	80048d6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 80048d8:	687b      	ldr	r3, [r7, #4]
    }
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000016c 	.word	0x2000016c
 80048e8:	20000170 	.word	0x20000170
 80048ec:	080073c8 	.word	0x080073c8
 80048f0:	08004add 	.word	0x08004add

080048f4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004902:	202c      	movs	r0, #44	; 0x2c
 8004904:	f000 fdee 	bl	80054e4 <pvPortMalloc>
 8004908:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f805 	bl	8004936 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800492c:	697b      	ldr	r3, [r7, #20]
        }
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <prvInitialiseNewTimer+0x28>
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e7fe      	b.n	800495c <prvInitialiseNewTimer+0x26>

        if( pxNewTimer != NULL )
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01e      	beq.n	80049a2 <prvInitialiseNewTimer+0x6c>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8004964:	f000 fac8 	bl	8004ef8 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	6a3a      	ldr	r2, [r7, #32]
 800497e:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fa66 	bl	8002e56 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <prvInitialiseNewTimer+0x6c>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	b2da      	uxtb	r2, r3
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80049a2:	bf00      	nop
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <xTimerGenericCommand+0x2c>
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	623b      	str	r3, [r7, #32]
 80049d6:	e7fe      	b.n	80049d6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <xTimerGenericCommand+0x94>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02a      	beq.n	8004a36 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	dc18      	bgt.n	8004a24 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049f2:	f7ff fe39 	bl	8004668 <xTaskGetSchedulerState>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d109      	bne.n	8004a10 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049fc:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <xTimerGenericCommand+0x94>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	f107 0114 	add.w	r1, r7, #20
 8004a04:	2300      	movs	r3, #0
 8004a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a08:	f7fe fba8 	bl	800315c <xQueueGenericSend>
 8004a0c:	6278      	str	r0, [r7, #36]	; 0x24
 8004a0e:	e012      	b.n	8004a36 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <xTimerGenericCommand+0x94>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	f107 0114 	add.w	r1, r7, #20
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f7fe fb9e 	bl	800315c <xQueueGenericSend>
 8004a20:	6278      	str	r0, [r7, #36]	; 0x24
 8004a22:	e008      	b.n	8004a36 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <xTimerGenericCommand+0x94>)
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	f107 0114 	add.w	r1, r7, #20
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	f7fe fcb6 	bl	80033a0 <xQueueGenericSendFromISR>
 8004a34:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	; 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	2000016c 	.word	0x2000016c

08004a44 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4e:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <prvProcessExpiredTimer+0x94>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fa64 	bl	8002f2a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d021      	beq.n	8004ab4 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	18d1      	adds	r1, r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	6978      	ldr	r0, [r7, #20]
 8004a7e:	f000 f8d1 	bl	8004c24 <prvInsertTimerInActiveList>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01e      	beq.n	8004ac6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	2100      	movs	r1, #0
 8004a92:	6978      	ldr	r0, [r7, #20]
 8004a94:	f7ff ff8a 	bl	80049ac <xTimerGenericCommand>
 8004a98:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d112      	bne.n	8004ac6 <prvProcessExpiredTimer+0x82>
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e7fe      	b.n	8004ab2 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	6978      	ldr	r0, [r7, #20]
 8004acc:	4798      	blx	r3
    }
 8004ace:	bf00      	nop
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000164 	.word	0x20000164

08004adc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 f857 	bl	8004b9c <prvGetNextExpireTime>
 8004aee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4619      	mov	r1, r3
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f803 	bl	8004b00 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004afa:	f000 f8d5 	bl	8004ca8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004afe:	e7f1      	b.n	8004ae4 <prvTimerTask+0x8>

08004b00 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b0a:	f7ff f9cb 	bl	8003ea4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b0e:	f107 0308 	add.w	r3, r7, #8
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 f866 	bl	8004be4 <prvSampleTimeNow>
 8004b18:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d130      	bne.n	8004b82 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <prvProcessTimerOrBlockTask+0x3c>
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d806      	bhi.n	8004b3c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b2e:	f7ff f9c7 	bl	8003ec0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ff85 	bl	8004a44 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b3a:	e024      	b.n	8004b86 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <prvProcessTimerOrBlockTask+0x90>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <prvProcessTimerOrBlockTask+0x50>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <prvProcessTimerOrBlockTask+0x52>
 8004b50:	2300      	movs	r3, #0
 8004b52:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <prvProcessTimerOrBlockTask+0x94>)
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7fe ff2b 	bl	80039bc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b66:	f7ff f9ab 	bl	8003ec0 <xTaskResumeAll>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <prvProcessTimerOrBlockTask+0x98>)
 8004b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
    }
 8004b80:	e001      	b.n	8004b86 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004b82:	f7ff f99d 	bl	8003ec0 <xTaskResumeAll>
    }
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000168 	.word	0x20000168
 8004b94:	2000016c 	.word	0x2000016c
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <prvGetNextExpireTime+0x44>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <prvGetNextExpireTime+0x16>
 8004bae:	2201      	movs	r2, #1
 8004bb0:	e000      	b.n	8004bb4 <prvGetNextExpireTime+0x18>
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d105      	bne.n	8004bcc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <prvGetNextExpireTime+0x44>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e001      	b.n	8004bd0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
    }
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000164 	.word	0x20000164

08004be4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004bec:	f7ff fa08 	bl	8004000 <xTaskGetTickCount>
 8004bf0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <prvSampleTimeNow+0x3c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d205      	bcs.n	8004c08 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004bfc:	f000 f918 	bl	8004e30 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e002      	b.n	8004c0e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c0e:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <prvSampleTimeNow+0x3c>)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c14:	68fb      	ldr	r3, [r7, #12]
    }
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000174 	.word	0x20000174

08004c24 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d812      	bhi.n	8004c70 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e01b      	b.n	8004c96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <prvInsertTimerInActiveList+0x7c>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f7fe f925 	bl	8002eb8 <vListInsert>
 8004c6e:	e012      	b.n	8004c96 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d206      	bcs.n	8004c86 <prvInsertTimerInActiveList+0x62>
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004c80:	2301      	movs	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e007      	b.n	8004c96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c86:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <prvInsertTimerInActiveList+0x80>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7fe f911 	bl	8002eb8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004c96:	697b      	ldr	r3, [r7, #20]
    }
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000168 	.word	0x20000168
 8004ca4:	20000164 	.word	0x20000164

08004ca8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cae:	e0ac      	b.n	8004e0a <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f2c0 80a8 	blt.w	8004e08 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe f92e 	bl	8002f2a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff87 	bl	8004be4 <prvSampleTimeNow>
 8004cd6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b09      	cmp	r3, #9
 8004cdc:	f200 8095 	bhi.w	8004e0a <prvProcessReceivedCommands+0x162>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <prvProcessReceivedCommands+0x40>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d11 	.word	0x08004d11
 8004cf4:	08004d83 	.word	0x08004d83
 8004cf8:	08004d97 	.word	0x08004d97
 8004cfc:	08004ddf 	.word	0x08004ddf
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d11 	.word	0x08004d11
 8004d08:	08004d83 	.word	0x08004d83
 8004d0c:	08004d97 	.word	0x08004d97
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	18d1      	adds	r1, r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a3a      	ldr	r2, [r7, #32]
 8004d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d30:	f7ff ff78 	bl	8004c24 <prvInsertTimerInActiveList>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d067      	beq.n	8004e0a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d40:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05c      	beq.n	8004e0a <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	441a      	add	r2, r3
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d62:	f7ff fe23 	bl	80049ac <xTimerGenericCommand>
 8004d66:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d14d      	bne.n	8004e0a <prvProcessReceivedCommands+0x162>
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e7fe      	b.n	8004d80 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004d94:	e039      	b.n	8004e0a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <prvProcessReceivedCommands+0x122>
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e7fe      	b.n	8004dc8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	18d1      	adds	r1, r2, r3
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dd8:	f7ff ff24 	bl	8004c24 <prvInsertTimerInActiveList>
                        break;
 8004ddc:	e015      	b.n	8004e0a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8004dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dee:	f000 fc55 	bl	800569c <vPortFree>
 8004df2:	e00a      	b.n	8004e0a <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e06:	e000      	b.n	8004e0a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004e08:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <prvProcessReceivedCommands+0x184>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f107 0108 	add.w	r1, r7, #8
 8004e12:	2200      	movs	r2, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe fb7d 	bl	8003514 <xQueueReceive>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f af47 	bne.w	8004cb0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004e22:	bf00      	nop
 8004e24:	3728      	adds	r7, #40	; 0x28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	2000016c 	.word	0x2000016c

08004e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e36:	e047      	b.n	8004ec8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e38:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <prvSwitchTimerLists+0xc0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e42:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <prvSwitchTimerLists+0xc0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe f86a 	bl	8002f2a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02d      	beq.n	8004ec8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4413      	add	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d90e      	bls.n	8004e9c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <prvSwitchTimerLists+0xc0>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f7fe f80f 	bl	8002eb8 <vListInsert>
 8004e9a:	e015      	b.n	8004ec8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7ff fd80 	bl	80049ac <xTimerGenericCommand>
 8004eac:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <prvSwitchTimerLists+0x98>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	e7fe      	b.n	8004ec6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <prvSwitchTimerLists+0xc0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1b2      	bne.n	8004e38 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <prvSwitchTimerLists+0xc0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <prvSwitchTimerLists+0xc4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <prvSwitchTimerLists+0xc0>)
 8004ede:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ee0:	4a04      	ldr	r2, [pc, #16]	; (8004ef4 <prvSwitchTimerLists+0xc4>)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6013      	str	r3, [r2, #0]
    }
 8004ee6:	bf00      	nop
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000164 	.word	0x20000164
 8004ef4:	20000168 	.word	0x20000168

08004ef8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004efc:	f000 f9d2 	bl	80052a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <prvCheckForValidListAndQueue+0x54>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d11d      	bne.n	8004f44 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004f08:	4811      	ldr	r0, [pc, #68]	; (8004f50 <prvCheckForValidListAndQueue+0x58>)
 8004f0a:	f7fd ff84 	bl	8002e16 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004f0e:	4811      	ldr	r0, [pc, #68]	; (8004f54 <prvCheckForValidListAndQueue+0x5c>)
 8004f10:	f7fd ff81 	bl	8002e16 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004f14:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <prvCheckForValidListAndQueue+0x60>)
 8004f16:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <prvCheckForValidListAndQueue+0x58>)
 8004f18:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <prvCheckForValidListAndQueue+0x64>)
 8004f1c:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <prvCheckForValidListAndQueue+0x5c>)
 8004f1e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f20:	2200      	movs	r2, #0
 8004f22:	210c      	movs	r1, #12
 8004f24:	200a      	movs	r0, #10
 8004f26:	f7fe f893 	bl	8003050 <xQueueGenericCreate>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <prvCheckForValidListAndQueue+0x54>)
 8004f2e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004f30:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <prvCheckForValidListAndQueue+0x54>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <prvCheckForValidListAndQueue+0x54>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4908      	ldr	r1, [pc, #32]	; (8004f60 <prvCheckForValidListAndQueue+0x68>)
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fd0c 	bl	800395c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f44:	f000 f9dc 	bl	8005300 <vPortExitCritical>
    }
 8004f48:	bf00      	nop
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	2000016c 	.word	0x2000016c
 8004f50:	2000013c 	.word	0x2000013c
 8004f54:	20000150 	.word	0x20000150
 8004f58:	20000164 	.word	0x20000164
 8004f5c:	20000168 	.word	0x20000168
 8004f60:	080073d0 	.word	0x080073d0

08004f64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b04      	subs	r3, #4
 8004f74:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b04      	subs	r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004f94:	4a0c      	ldr	r2, [pc, #48]	; (8004fc8 <pxPortInitialiseStack+0x64>)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3b14      	subs	r3, #20
 8004f9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3b04      	subs	r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f06f 0202 	mvn.w	r2, #2
 8004fb2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3b20      	subs	r3, #32
 8004fb8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	08004fcd 	.word	0x08004fcd

08004fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004fd6:	4b11      	ldr	r3, [pc, #68]	; (800501c <prvTaskExitError+0x50>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d009      	beq.n	8004ff4 <prvTaskExitError+0x28>
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e7fe      	b.n	8004ff2 <prvTaskExitError+0x26>
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005006:	bf00      	nop
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0fc      	beq.n	8005008 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000010 	.word	0x20000010

08005020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <pxCurrentTCBConst2>)
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	6808      	ldr	r0, [r1, #0]
 8005026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	f380 8809 	msr	PSP, r0
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	4770      	bx	lr
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst2>:
 8005040:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <prvPortStartFirstTask+0x24>)
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f380 8808 	msr	MSP, r0
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8814 	msr	CONTROL, r0
 800505a:	b662      	cpsie	i
 800505c:	b661      	cpsie	f
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	df00      	svc	0
 8005068:	bf00      	nop
 800506a:	0000      	.short	0x0000
 800506c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop

08005074 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800507a:	4b44      	ldr	r3, [pc, #272]	; (800518c <xPortStartScheduler+0x118>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a44      	ldr	r2, [pc, #272]	; (8005190 <xPortStartScheduler+0x11c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d109      	bne.n	8005098 <xPortStartScheduler+0x24>
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	e7fe      	b.n	8005096 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005098:	4b3c      	ldr	r3, [pc, #240]	; (800518c <xPortStartScheduler+0x118>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3d      	ldr	r2, [pc, #244]	; (8005194 <xPortStartScheduler+0x120>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d109      	bne.n	80050b6 <xPortStartScheduler+0x42>
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e7fe      	b.n	80050b4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <xPortStartScheduler+0x124>)
 80050b8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b30      	ldr	r3, [pc, #192]	; (800519c <xPortStartScheduler+0x128>)
 80050dc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050de:	4b30      	ldr	r3, [pc, #192]	; (80051a0 <xPortStartScheduler+0x12c>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e4:	e009      	b.n	80050fa <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80050e6:	4b2e      	ldr	r3, [pc, #184]	; (80051a0 <xPortStartScheduler+0x12c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <xPortStartScheduler+0x12c>)
 80050ee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d0ef      	beq.n	80050e6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005106:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <xPortStartScheduler+0x12c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	d009      	beq.n	8005126 <xPortStartScheduler+0xb2>
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	e7fe      	b.n	8005124 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <xPortStartScheduler+0x12c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <xPortStartScheduler+0x12c>)
 800512e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005130:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <xPortStartScheduler+0x12c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005138:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <xPortStartScheduler+0x12c>)
 800513a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005144:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <xPortStartScheduler+0x130>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <xPortStartScheduler+0x130>)
 800514a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800514e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <xPortStartScheduler+0x130>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <xPortStartScheduler+0x130>)
 8005156:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800515a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800515c:	f000 f954 	bl	8005408 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <xPortStartScheduler+0x134>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005166:	f000 f973 	bl	8005450 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800516a:	4b10      	ldr	r3, [pc, #64]	; (80051ac <xPortStartScheduler+0x138>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <xPortStartScheduler+0x138>)
 8005170:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005174:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005176:	f7ff ff67 	bl	8005048 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800517a:	f7ff f81f 	bl	80041bc <vTaskSwitchContext>
    prvTaskExitError();
 800517e:	f7ff ff25 	bl	8004fcc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	e000ed00 	.word	0xe000ed00
 8005190:	410fc271 	.word	0x410fc271
 8005194:	410fc270 	.word	0x410fc270
 8005198:	e000e400 	.word	0xe000e400
 800519c:	20000178 	.word	0x20000178
 80051a0:	2000017c 	.word	0x2000017c
 80051a4:	e000ed20 	.word	0xe000ed20
 80051a8:	20000010 	.word	0x20000010
 80051ac:	e000ef34 	.word	0xe000ef34

080051b0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051b6:	4b35      	ldr	r3, [pc, #212]	; (800528c <vInitPrioGroupValue+0xdc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a35      	ldr	r2, [pc, #212]	; (8005290 <vInitPrioGroupValue+0xe0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d109      	bne.n	80051d4 <vInitPrioGroupValue+0x24>
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e7fe      	b.n	80051d2 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051d4:	4b2d      	ldr	r3, [pc, #180]	; (800528c <vInitPrioGroupValue+0xdc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2e      	ldr	r2, [pc, #184]	; (8005294 <vInitPrioGroupValue+0xe4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d109      	bne.n	80051f2 <vInitPrioGroupValue+0x42>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e7fe      	b.n	80051f0 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051f2:	4b29      	ldr	r3, [pc, #164]	; (8005298 <vInitPrioGroupValue+0xe8>)
 80051f4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	22ff      	movs	r2, #255	; 0xff
 8005202:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <vInitPrioGroupValue+0xec>)
 8005218:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800521a:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <vInitPrioGroupValue+0xf0>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005220:	e009      	b.n	8005236 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005222:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <vInitPrioGroupValue+0xf0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3b01      	subs	r3, #1
 8005228:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <vInitPrioGroupValue+0xf0>)
 800522a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d0ef      	beq.n	8005222 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <vInitPrioGroupValue+0xf0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1c3 0307 	rsb	r3, r3, #7
 800524a:	2b04      	cmp	r3, #4
 800524c:	d009      	beq.n	8005262 <vInitPrioGroupValue+0xb2>
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	e7fe      	b.n	8005260 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <vInitPrioGroupValue+0xf0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <vInitPrioGroupValue+0xf0>)
 800526a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <vInitPrioGroupValue+0xf0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005274:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <vInitPrioGroupValue+0xf0>)
 8005276:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	e000ed00 	.word	0xe000ed00
 8005290:	410fc271 	.word	0x410fc271
 8005294:	410fc270 	.word	0x410fc270
 8005298:	e000e400 	.word	0xe000e400
 800529c:	20000178 	.word	0x20000178
 80052a0:	2000017c 	.word	0x2000017c

080052a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <vPortEnterCritical+0x54>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <vPortEnterCritical+0x54>)
 80052c4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80052c6:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <vPortEnterCritical+0x54>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d10e      	bne.n	80052ec <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052ce:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <vPortEnterCritical+0x58>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <vPortEnterCritical+0x48>
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	e7fe      	b.n	80052ea <vPortEnterCritical+0x46>
    }
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	20000010 	.word	0x20000010
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005306:	4b11      	ldr	r3, [pc, #68]	; (800534c <vPortExitCritical+0x4c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <vPortExitCritical+0x22>
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	e7fe      	b.n	8005320 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <vPortExitCritical+0x4c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3b01      	subs	r3, #1
 8005328:	4a08      	ldr	r2, [pc, #32]	; (800534c <vPortExitCritical+0x4c>)
 800532a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800532c:	4b07      	ldr	r3, [pc, #28]	; (800534c <vPortExitCritical+0x4c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <vPortExitCritical+0x3e>
 8005334:	2300      	movs	r3, #0
 8005336:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000010 	.word	0x20000010

08005350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005350:	f3ef 8009 	mrs	r0, PSP
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <pxCurrentTCBConst>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	f01e 0f10 	tst.w	lr, #16
 8005360:	bf08      	it	eq
 8005362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	6010      	str	r0, [r2, #0]
 800536c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005374:	f380 8811 	msr	BASEPRI, r0
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f7fe ff1c 	bl	80041bc <vTaskSwitchContext>
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f380 8811 	msr	BASEPRI, r0
 800538c:	bc09      	pop	{r0, r3}
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	6808      	ldr	r0, [r1, #0]
 8005392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005396:	f01e 0f10 	tst.w	lr, #16
 800539a:	bf08      	it	eq
 800539c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053a0:	f380 8809 	msr	PSP, r0
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst>:
 80053b0:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
        __asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80053d0:	f001 fc56 	bl	8006c80 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80053d4:	f7fe fe36 	bl	8004044 <xTaskIncrementTick>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80053de:	f001 fcad 	bl	8006d3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <SysTick_Handler+0x4c>)
 80053e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e001      	b.n	80053f0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80053ec:	f001 fc8a 	bl	8006d04 <SEGGER_SYSVIEW_RecordExitISR>
 80053f0:	2300      	movs	r3, #0
 80053f2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <vPortSetupTimerInterrupt+0x34>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <vPortSetupTimerInterrupt+0x38>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <vPortSetupTimerInterrupt+0x3c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <vPortSetupTimerInterrupt+0x40>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	4a09      	ldr	r2, [pc, #36]	; (800544c <vPortSetupTimerInterrupt+0x44>)
 8005426:	3b01      	subs	r3, #1
 8005428:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800542a:	4b04      	ldr	r3, [pc, #16]	; (800543c <vPortSetupTimerInterrupt+0x34>)
 800542c:	2207      	movs	r2, #7
 800542e:	601a      	str	r2, [r3, #0]
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000e010 	.word	0xe000e010
 8005440:	e000e018 	.word	0xe000e018
 8005444:	20000008 	.word	0x20000008
 8005448:	10624dd3 	.word	0x10624dd3
 800544c:	e000e014 	.word	0xe000e014

08005450 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005450:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005460 <vPortEnableVFP+0x10>
 8005454:	6801      	ldr	r1, [r0, #0]
 8005456:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800545a:	6001      	str	r1, [r0, #0]
 800545c:	4770      	bx	lr
 800545e:	0000      	.short	0x0000
 8005460:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop

08005468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800546e:	f3ef 8305 	mrs	r3, IPSR
 8005472:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d913      	bls.n	80054a2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800547a:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <vPortValidateInterruptPriority+0x6c>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005484:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <vPortValidateInterruptPriority+0x70>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	7afa      	ldrb	r2, [r7, #11]
 800548a:	429a      	cmp	r2, r3
 800548c:	d209      	bcs.n	80054a2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	e7fe      	b.n	80054a0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054a2:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <vPortValidateInterruptPriority+0x74>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054aa:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <vPortValidateInterruptPriority+0x78>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d909      	bls.n	80054c6 <vPortValidateInterruptPriority+0x5e>
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	e7fe      	b.n	80054c4 <vPortValidateInterruptPriority+0x5c>
    }
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	e000e3f0 	.word	0xe000e3f0
 80054d8:	20000178 	.word	0x20000178
 80054dc:	e000ed0c 	.word	0xe000ed0c
 80054e0:	2000017c 	.word	0x2000017c

080054e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80054f0:	f7fe fcd8 	bl	8003ea4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80054f4:	4b63      	ldr	r3, [pc, #396]	; (8005684 <pvPortMalloc+0x1a0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80054fc:	f000 f92e 	bl	800575c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005500:	4b61      	ldr	r3, [pc, #388]	; (8005688 <pvPortMalloc+0x1a4>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	f040 80a5 	bne.w	8005658 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02c      	beq.n	800556e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005514:	2208      	movs	r2, #8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d226      	bcs.n	800556e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8005520:	2208      	movs	r2, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b00      	cmp	r3, #0
 8005530:	d020      	beq.n	8005574 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f023 0307 	bic.w	r3, r3, #7
 8005538:	3308      	adds	r3, #8
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d213      	bcs.n	8005568 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	3308      	adds	r3, #8
 8005548:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00f      	beq.n	8005574 <pvPortMalloc+0x90>
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e7fe      	b.n	8005566 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800556c:	e002      	b.n	8005574 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	607b      	str	r3, [r7, #4]
 8005572:	e000      	b.n	8005576 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005574:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d06d      	beq.n	8005658 <pvPortMalloc+0x174>
 800557c:	4b43      	ldr	r3, [pc, #268]	; (800568c <pvPortMalloc+0x1a8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d868      	bhi.n	8005658 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005586:	4b42      	ldr	r3, [pc, #264]	; (8005690 <pvPortMalloc+0x1ac>)
 8005588:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800558a:	4b41      	ldr	r3, [pc, #260]	; (8005690 <pvPortMalloc+0x1ac>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005590:	e004      	b.n	800559c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d903      	bls.n	80055ae <pvPortMalloc+0xca>
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f1      	bne.n	8005592 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80055ae:	4b35      	ldr	r3, [pc, #212]	; (8005684 <pvPortMalloc+0x1a0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d04f      	beq.n	8005658 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2208      	movs	r2, #8
 80055be:	4413      	add	r3, r2
 80055c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	1ad2      	subs	r2, r2, r3
 80055d2:	2308      	movs	r3, #8
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d91e      	bls.n	8005618 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4413      	add	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <pvPortMalloc+0x11c>
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	e7fe      	b.n	80055fe <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	1ad2      	subs	r2, r2, r3
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005612:	69b8      	ldr	r0, [r7, #24]
 8005614:	f000 f904 	bl	8005820 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005618:	4b1c      	ldr	r3, [pc, #112]	; (800568c <pvPortMalloc+0x1a8>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	4a1a      	ldr	r2, [pc, #104]	; (800568c <pvPortMalloc+0x1a8>)
 8005624:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005626:	4b19      	ldr	r3, [pc, #100]	; (800568c <pvPortMalloc+0x1a8>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <pvPortMalloc+0x1b0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d203      	bcs.n	800563a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005632:	4b16      	ldr	r3, [pc, #88]	; (800568c <pvPortMalloc+0x1a8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a17      	ldr	r2, [pc, #92]	; (8005694 <pvPortMalloc+0x1b0>)
 8005638:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	4b12      	ldr	r3, [pc, #72]	; (8005688 <pvPortMalloc+0x1a4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	431a      	orrs	r2, r3
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <pvPortMalloc+0x1b4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3301      	adds	r3, #1
 8005654:	4a10      	ldr	r2, [pc, #64]	; (8005698 <pvPortMalloc+0x1b4>)
 8005656:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005658:	f7fe fc32 	bl	8003ec0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <pvPortMalloc+0x196>
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e7fe      	b.n	8005678 <pvPortMalloc+0x194>
    return pvReturn;
 800567a:	69fb      	ldr	r3, [r7, #28]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3728      	adds	r7, #40	; 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20019188 	.word	0x20019188
 8005688:	2001919c 	.word	0x2001919c
 800568c:	2001918c 	.word	0x2001918c
 8005690:	20019180 	.word	0x20019180
 8005694:	20019190 	.word	0x20019190
 8005698:	20019194 	.word	0x20019194

0800569c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d04b      	beq.n	8005746 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80056ae:	2308      	movs	r3, #8
 80056b0:	425b      	negs	r3, r3
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b23      	ldr	r3, [pc, #140]	; (8005750 <vPortFree+0xb4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <vPortFree+0x42>
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e7fe      	b.n	80056dc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <vPortFree+0x5e>
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	e7fe      	b.n	80056f8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b14      	ldr	r3, [pc, #80]	; (8005750 <vPortFree+0xb4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01e      	beq.n	8005746 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d11a      	bne.n	8005746 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <vPortFree+0xb4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005720:	f7fe fbc0 	bl	8003ea4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <vPortFree+0xb8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4413      	add	r3, r2
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <vPortFree+0xb8>)
 8005730:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005732:	6938      	ldr	r0, [r7, #16]
 8005734:	f000 f874 	bl	8005820 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005738:	4b07      	ldr	r3, [pc, #28]	; (8005758 <vPortFree+0xbc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	4a06      	ldr	r2, [pc, #24]	; (8005758 <vPortFree+0xbc>)
 8005740:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005742:	f7fe fbbd 	bl	8003ec0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005746:	bf00      	nop
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	2001919c 	.word	0x2001919c
 8005754:	2001918c 	.word	0x2001918c
 8005758:	20019198 	.word	0x20019198

0800575c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005762:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8005766:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005768:	4b27      	ldr	r3, [pc, #156]	; (8005808 <prvHeapInit+0xac>)
 800576a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00c      	beq.n	8005790 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3307      	adds	r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0307 	bic.w	r3, r3, #7
 8005782:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	4a1f      	ldr	r2, [pc, #124]	; (8005808 <prvHeapInit+0xac>)
 800578c:	4413      	add	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <prvHeapInit+0xb0>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800579a:	4b1c      	ldr	r3, [pc, #112]	; (800580c <prvHeapInit+0xb0>)
 800579c:	2200      	movs	r2, #0
 800579e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	4413      	add	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80057a8:	2208      	movs	r2, #8
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0307 	bic.w	r3, r3, #7
 80057b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <prvHeapInit+0xb4>)
 80057bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <prvHeapInit+0xb4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80057c6:	4b12      	ldr	r3, [pc, #72]	; (8005810 <prvHeapInit+0xb4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <prvHeapInit+0xb4>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <prvHeapInit+0xb8>)
 80057ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4a09      	ldr	r2, [pc, #36]	; (8005818 <prvHeapInit+0xbc>)
 80057f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <prvHeapInit+0xc0>)
 80057f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057fa:	601a      	str	r2, [r3, #0]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20000180 	.word	0x20000180
 800580c:	20019180 	.word	0x20019180
 8005810:	20019188 	.word	0x20019188
 8005814:	20019190 	.word	0x20019190
 8005818:	2001918c 	.word	0x2001918c
 800581c:	2001919c 	.word	0x2001919c

08005820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005828:	4b28      	ldr	r3, [pc, #160]	; (80058cc <prvInsertBlockIntoFreeList+0xac>)
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	e002      	b.n	8005834 <prvInsertBlockIntoFreeList+0x14>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d8f7      	bhi.n	800582e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4413      	add	r3, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	429a      	cmp	r2, r3
 800584e:	d108      	bne.n	8005862 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	441a      	add	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	441a      	add	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d118      	bne.n	80058a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <prvInsertBlockIntoFreeList+0xb0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d00d      	beq.n	800589e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	441a      	add	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	e008      	b.n	80058b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <prvInsertBlockIntoFreeList+0xb0>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e003      	b.n	80058b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d002      	beq.n	80058be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20019180 	.word	0x20019180
 80058d0:	20019188 	.word	0x20019188

080058d4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80058d8:	4803      	ldr	r0, [pc, #12]	; (80058e8 <_cbSendSystemDesc+0x14>)
 80058da:	f001 f97d 	bl	8006bd8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80058de:	4803      	ldr	r0, [pc, #12]	; (80058ec <_cbSendSystemDesc+0x18>)
 80058e0:	f001 f97a 	bl	8006bd8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80058e4:	bf00      	nop
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	080073d8 	.word	0x080073d8
 80058ec:	0800741c 	.word	0x0800741c

080058f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <SEGGER_SYSVIEW_Conf+0x20>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <SEGGER_SYSVIEW_Conf+0x20>)
 80058fa:	6819      	ldr	r1, [r3, #0]
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <SEGGER_SYSVIEW_Conf+0x24>)
 80058fe:	4a06      	ldr	r2, [pc, #24]	; (8005918 <SEGGER_SYSVIEW_Conf+0x28>)
 8005900:	f000 fce8 	bl	80062d4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005904:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005908:	f000 fd28 	bl	800635c <SEGGER_SYSVIEW_SetRAMBase>
}
 800590c:	bf00      	nop
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000008 	.word	0x20000008
 8005914:	080058d5 	.word	0x080058d5
 8005918:	080074bc 	.word	0x080074bc

0800591c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	b085      	sub	sp, #20
 8005920:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005922:	2300      	movs	r3, #0
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	e034      	b.n	8005992 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005928:	491e      	ldr	r1, [pc, #120]	; (80059a4 <_cbSendTaskList+0x88>)
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	491a      	ldr	r1, [pc, #104]	; (80059a4 <_cbSendTaskList+0x88>)
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	3304      	adds	r3, #4
 8005948:	681c      	ldr	r4, [r3, #0]
 800594a:	4916      	ldr	r1, [pc, #88]	; (80059a4 <_cbSendTaskList+0x88>)
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	3308      	adds	r3, #8
 800595a:	681d      	ldr	r5, [r3, #0]
 800595c:	4911      	ldr	r1, [pc, #68]	; (80059a4 <_cbSendTaskList+0x88>)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	330c      	adds	r3, #12
 800596c:	681e      	ldr	r6, [r3, #0]
 800596e:	490d      	ldr	r1, [pc, #52]	; (80059a4 <_cbSendTaskList+0x88>)
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	3310      	adds	r3, #16
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	4633      	mov	r3, r6
 8005984:	462a      	mov	r2, r5
 8005986:	4621      	mov	r1, r4
 8005988:	f000 f8b4 	bl	8005af4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3301      	adds	r3, #1
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <_cbSendTaskList+0x8c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d3c5      	bcc.n	8005928 <_cbSendTaskList+0xc>
  }
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059a4:	200191a0 	.word	0x200191a0
 80059a8:	20019240 	.word	0x20019240

080059ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80059ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80059b2:	f7fe fb35 	bl	8004020 <xTaskGetTickCountFromISR>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f04f 0400 	mov.w	r4, #0
 80059bc:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80059c0:	e9d7 5600 	ldrd	r5, r6, [r7]
 80059c4:	462b      	mov	r3, r5
 80059c6:	4634      	mov	r4, r6
 80059c8:	f04f 0100 	mov.w	r1, #0
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	0162      	lsls	r2, r4, #5
 80059d2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80059d6:	0159      	lsls	r1, r3, #5
 80059d8:	460b      	mov	r3, r1
 80059da:	4614      	mov	r4, r2
 80059dc:	1b5b      	subs	r3, r3, r5
 80059de:	eb64 0406 	sbc.w	r4, r4, r6
 80059e2:	f04f 0100 	mov.w	r1, #0
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	00a2      	lsls	r2, r4, #2
 80059ec:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80059f0:	0099      	lsls	r1, r3, #2
 80059f2:	460b      	mov	r3, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	195b      	adds	r3, r3, r5
 80059f8:	eb44 0406 	adc.w	r4, r4, r6
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	00e2      	lsls	r2, r4, #3
 8005a06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a0a:	00d9      	lsls	r1, r3, #3
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4614      	mov	r4, r2
 8005a10:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8005a14:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005a24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005a32:	2205      	movs	r2, #5
 8005a34:	492b      	ldr	r1, [pc, #172]	; (8005ae4 <SYSVIEW_AddTask+0xc0>)
 8005a36:	68b8      	ldr	r0, [r7, #8]
 8005a38:	f001 fc4a 	bl	80072d0 <memcmp>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d04b      	beq.n	8005ada <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005a42:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <SYSVIEW_AddTask+0xc4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b07      	cmp	r3, #7
 8005a48:	d903      	bls.n	8005a52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005a4a:	4828      	ldr	r0, [pc, #160]	; (8005aec <SYSVIEW_AddTask+0xc8>)
 8005a4c:	f001 fbc0 	bl	80071d0 <SEGGER_SYSVIEW_Warn>
    return;
 8005a50:	e044      	b.n	8005adc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005a52:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <SYSVIEW_AddTask+0xc4>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4926      	ldr	r1, [pc, #152]	; (8005af0 <SYSVIEW_AddTask+0xcc>)
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005a66:	4b20      	ldr	r3, [pc, #128]	; (8005ae8 <SYSVIEW_AddTask+0xc4>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4921      	ldr	r1, [pc, #132]	; (8005af0 <SYSVIEW_AddTask+0xcc>)
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	3304      	adds	r3, #4
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <SYSVIEW_AddTask+0xc4>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	491b      	ldr	r1, [pc, #108]	; (8005af0 <SYSVIEW_AddTask+0xcc>)
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <SYSVIEW_AddTask+0xc4>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4916      	ldr	r1, [pc, #88]	; (8005af0 <SYSVIEW_AddTask+0xcc>)
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <SYSVIEW_AddTask+0xc4>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	4910      	ldr	r1, [pc, #64]	; (8005af0 <SYSVIEW_AddTask+0xcc>)
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3310      	adds	r3, #16
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <SYSVIEW_AddTask+0xc4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <SYSVIEW_AddTask+0xc4>)
 8005ac6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f80e 	bl	8005af4 <SYSVIEW_SendTaskInfo>
 8005ad8:	e000      	b.n	8005adc <SYSVIEW_AddTask+0xb8>
    return;
 8005ada:	bf00      	nop

}
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	0800742c 	.word	0x0800742c
 8005ae8:	20019240 	.word	0x20019240
 8005aec:	08007434 	.word	0x08007434
 8005af0:	200191a0 	.word	0x200191a0

08005af4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005b02:	f107 0314 	add.w	r3, r7, #20
 8005b06:	2214      	movs	r2, #20
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 fbfa 	bl	8007304 <memset>
  TaskInfo.TaskID     = TaskID;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005b24:	f107 0314 	add.w	r3, r7, #20
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 ff5d 	bl	80069e8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005b2e:	bf00      	nop
 8005b30:	3728      	adds	r7, #40	; 0x28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <_DoInit>:
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <_DoInit+0x98>)
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2203      	movs	r2, #3
 8005b46:	611a      	str	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	615a      	str	r2, [r3, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <_DoInit+0x9c>)
 8005b52:	619a      	str	r2, [r3, #24]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <_DoInit+0xa0>)
 8005b58:	61da      	str	r2, [r3, #28]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b60:	621a      	str	r2, [r3, #32]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	629a      	str	r2, [r3, #40]	; 0x28
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <_DoInit+0x9c>)
 8005b78:	661a      	str	r2, [r3, #96]	; 0x60
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <_DoInit+0xa4>)
 8005b7e:	665a      	str	r2, [r3, #100]	; 0x64
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2210      	movs	r2, #16
 8005b84:	669a      	str	r2, [r3, #104]	; 0x68
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	671a      	str	r2, [r3, #112]	; 0x70
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	675a      	str	r2, [r3, #116]	; 0x74
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3307      	adds	r3, #7
 8005b9c:	4a10      	ldr	r2, [pc, #64]	; (8005be0 <_DoInit+0xa8>)
 8005b9e:	6810      	ldr	r0, [r2, #0]
 8005ba0:	6018      	str	r0, [r3, #0]
 8005ba2:	f3bf 8f5f 	dmb	sy
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <_DoInit+0xac>)
 8005baa:	6810      	ldr	r0, [r2, #0]
 8005bac:	6018      	str	r0, [r3, #0]
 8005bae:	8891      	ldrh	r1, [r2, #4]
 8005bb0:	7992      	ldrb	r2, [r2, #6]
 8005bb2:	8099      	strh	r1, [r3, #4]
 8005bb4:	719a      	strb	r2, [r3, #6]
 8005bb6:	f3bf 8f5f 	dmb	sy
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	719a      	strb	r2, [r3, #6]
 8005bc0:	f3bf 8f5f 	dmb	sy
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	2001a880 	.word	0x2001a880
 8005bd4:	08007484 	.word	0x08007484
 8005bd8:	20019244 	.word	0x20019244
 8005bdc:	20019644 	.word	0x20019644
 8005be0:	08007490 	.word	0x08007490
 8005be4:	08007494 	.word	0x08007494

08005be8 <SEGGER_RTT_ReadNoLock>:
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08c      	sub	sp, #48	; 0x30
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	4b3e      	ldr	r3, [pc, #248]	; (8005cf0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bf6:	623b      	str	r3, [r7, #32]
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <SEGGER_RTT_ReadNoLock+0x1e>
 8005c02:	f7ff ff99 	bl	8005b38 <_DoInit>
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	3360      	adds	r3, #96	; 0x60
 8005c12:	4a37      	ldr	r2, [pc, #220]	; (8005cf0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005c14:	4413      	add	r3, r2
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d92b      	bls.n	8005c8c <SEGGER_RTT_ReadNoLock+0xa4>
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	bf28      	it	cs
 8005c46:	4613      	movcs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	4413      	add	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	6939      	ldr	r1, [r7, #16]
 8005c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c5a:	f001 fb48 	bl	80072ee <memcpy>
 8005c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	4413      	add	r3, r2
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d101      	bne.n	8005c8c <SEGGER_RTT_ReadNoLock+0xa4>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bf28      	it	cs
 8005c9c:	4613      	movcs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d019      	beq.n	8005cda <SEGGER_RTT_ReadNoLock+0xf2>
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	4413      	add	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	6939      	ldr	r1, [r7, #16]
 8005cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cb6:	f001 fb1a 	bl	80072ee <memcpy>
 8005cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <SEGGER_RTT_ReadNoLock+0xfe>
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3730      	adds	r7, #48	; 0x30
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	2001a880 	.word	0x2001a880

08005cf4 <SEGGER_RTT_AllocUpBuffer>:
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	4b3d      	ldr	r3, [pc, #244]	; (8005df8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005d10:	f7ff ff12 	bl	8005b38 <_DoInit>
 8005d14:	f3ef 8311 	mrs	r3, BASEPRI
 8005d18:	f04f 0120 	mov.w	r1, #32
 8005d1c:	f381 8811 	msr	BASEPRI, r1
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	4b35      	ldr	r3, [pc, #212]	; (8005df8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	6939      	ldr	r1, [r7, #16]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	440b      	add	r3, r1
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <SEGGER_RTT_AllocUpBuffer+0x60>
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	3301      	adds	r3, #1
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	dbeb      	blt.n	8005d2a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005d52:	e000      	b.n	8005d56 <SEGGER_RTT_AllocUpBuffer+0x62>
 8005d54:	bf00      	nop
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	da3f      	bge.n	8005de0 <SEGGER_RTT_AllocUpBuffer+0xec>
 8005d60:	6939      	ldr	r1, [r7, #16]
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	4613      	mov	r3, r2
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4413      	add	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	440b      	add	r3, r1
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	6939      	ldr	r1, [r7, #16]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	4413      	add	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	440b      	add	r3, r1
 8005d84:	3304      	adds	r3, #4
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	6939      	ldr	r1, [r7, #16]
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4413      	add	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	440b      	add	r3, r1
 8005d98:	3320      	adds	r3, #32
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	6939      	ldr	r1, [r7, #16]
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	4613      	mov	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	4413      	add	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	440b      	add	r3, r1
 8005dac:	3328      	adds	r3, #40	; 0x28
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	6939      	ldr	r1, [r7, #16]
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	4613      	mov	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3324      	adds	r3, #36	; 0x24
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	6939      	ldr	r1, [r7, #16]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	4413      	add	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	440b      	add	r3, r1
 8005dd4:	332c      	adds	r3, #44	; 0x2c
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f3bf 8f5f 	dmb	sy
 8005dde:	e002      	b.n	8005de6 <SEGGER_RTT_AllocUpBuffer+0xf2>
 8005de0:	f04f 33ff 	mov.w	r3, #4294967295
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4618      	mov	r0, r3
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	2001a880 	.word	0x2001a880

08005dfc <SEGGER_RTT_ConfigDownBuffer>:
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08a      	sub	sp, #40	; 0x28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005e18:	f7ff fe8e 	bl	8005b38 <_DoInit>
 8005e1c:	4b1c      	ldr	r3, [pc, #112]	; (8005e90 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d82c      	bhi.n	8005e80 <SEGGER_RTT_ConfigDownBuffer+0x84>
 8005e26:	f3ef 8311 	mrs	r3, BASEPRI
 8005e2a:	f04f 0120 	mov.w	r1, #32
 8005e2e:	f381 8811 	msr	BASEPRI, r1
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4613      	mov	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	4413      	add	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	3360      	adds	r3, #96	; 0x60
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <SEGGER_RTT_ConfigDownBuffer+0x6e>
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	605a      	str	r2, [r3, #4]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	609a      	str	r2, [r3, #8]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2200      	movs	r2, #0
 8005e62:	611a      	str	r2, [r3, #16]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2200      	movs	r2, #0
 8005e68:	60da      	str	r2, [r3, #12]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6e:	615a      	str	r2, [r3, #20]
 8005e70:	f3bf 8f5f 	dmb	sy
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7e:	e002      	b.n	8005e86 <SEGGER_RTT_ConfigDownBuffer+0x8a>
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3728      	adds	r7, #40	; 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	2001a880 	.word	0x2001a880

08005e94 <_EncodeStr>:
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00f      	beq.n	8005eca <_EncodeStr+0x36>
 8005eaa:	e002      	b.n	8005eb2 <_EncodeStr+0x1e>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f6      	bne.n	8005eac <_EncodeStr+0x18>
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d901      	bls.n	8005eca <_EncodeStr+0x36>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2bfe      	cmp	r3, #254	; 0xfe
 8005ece:	d806      	bhi.n	8005ede <_EncodeStr+0x4a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	60fa      	str	r2, [r7, #12]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e011      	b.n	8005f02 <_EncodeStr+0x6e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	60fa      	str	r2, [r7, #12]
 8005ee4:	22ff      	movs	r2, #255	; 0xff
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	60fa      	str	r2, [r7, #12]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	0a19      	lsrs	r1, r3, #8
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	60fa      	str	r2, [r7, #12]
 8005efe:	b2ca      	uxtb	r2, r1
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e00a      	b.n	8005f1e <_EncodeStr+0x8a>
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	1c53      	adds	r3, r2, #1
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	60f9      	str	r1, [r7, #12]
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d3f0      	bcc.n	8005f08 <_EncodeStr+0x74>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <_PreparePacket>:
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <_HandleIncomingPacket>:
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4b33      	ldr	r3, [pc, #204]	; (8006020 <_HandleIncomingPacket+0xd4>)
 8005f54:	7e1b      	ldrb	r3, [r3, #24]
 8005f56:	4618      	mov	r0, r3
 8005f58:	1cfb      	adds	r3, r7, #3
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f7ff fe43 	bl	8005be8 <SEGGER_RTT_ReadNoLock>
 8005f62:	4603      	mov	r3, r0
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dd4d      	ble.n	8006008 <_HandleIncomingPacket+0xbc>
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d022      	beq.n	8005fb8 <_HandleIncomingPacket+0x6c>
 8005f72:	2b05      	cmp	r3, #5
 8005f74:	dc0b      	bgt.n	8005f8e <_HandleIncomingPacket+0x42>
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d015      	beq.n	8005fa6 <_HandleIncomingPacket+0x5a>
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	dc02      	bgt.n	8005f84 <_HandleIncomingPacket+0x38>
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d00e      	beq.n	8005fa0 <_HandleIncomingPacket+0x54>
 8005f82:	e034      	b.n	8005fee <_HandleIncomingPacket+0xa2>
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d011      	beq.n	8005fac <_HandleIncomingPacket+0x60>
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d012      	beq.n	8005fb2 <_HandleIncomingPacket+0x66>
 8005f8c:	e02f      	b.n	8005fee <_HandleIncomingPacket+0xa2>
 8005f8e:	2b07      	cmp	r3, #7
 8005f90:	d018      	beq.n	8005fc4 <_HandleIncomingPacket+0x78>
 8005f92:	2b07      	cmp	r3, #7
 8005f94:	db13      	blt.n	8005fbe <_HandleIncomingPacket+0x72>
 8005f96:	2b7f      	cmp	r3, #127	; 0x7f
 8005f98:	d038      	beq.n	800600c <_HandleIncomingPacket+0xc0>
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d015      	beq.n	8005fca <_HandleIncomingPacket+0x7e>
 8005f9e:	e026      	b.n	8005fee <_HandleIncomingPacket+0xa2>
 8005fa0:	f000 fba8 	bl	80066f4 <SEGGER_SYSVIEW_Start>
 8005fa4:	e037      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8005fa6:	f000 fc5f 	bl	8006868 <SEGGER_SYSVIEW_Stop>
 8005faa:	e034      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8005fac:	f000 fe38 	bl	8006c20 <SEGGER_SYSVIEW_RecordSystime>
 8005fb0:	e031      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8005fb2:	f000 fdfd 	bl	8006bb0 <SEGGER_SYSVIEW_SendTaskList>
 8005fb6:	e02e      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8005fb8:	f000 fc7c 	bl	80068b4 <SEGGER_SYSVIEW_GetSysDesc>
 8005fbc:	e02b      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8005fbe:	f001 f8c9 	bl	8007154 <SEGGER_SYSVIEW_SendNumModules>
 8005fc2:	e028      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8005fc4:	f001 f8a8 	bl	8007118 <SEGGER_SYSVIEW_SendModuleDescription>
 8005fc8:	e025      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <_HandleIncomingPacket+0xd4>)
 8005fcc:	7e1b      	ldrb	r3, [r3, #24]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	1cfb      	adds	r3, r7, #3
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f7ff fe07 	bl	8005be8 <SEGGER_RTT_ReadNoLock>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	607b      	str	r3, [r7, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	dd15      	ble.n	8006010 <_HandleIncomingPacket+0xc4>
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 f816 	bl	8007018 <SEGGER_SYSVIEW_SendModule>
 8005fec:	e010      	b.n	8006010 <_HandleIncomingPacket+0xc4>
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	b25b      	sxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da0e      	bge.n	8006014 <_HandleIncomingPacket+0xc8>
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <_HandleIncomingPacket+0xd4>)
 8005ff8:	7e1b      	ldrb	r3, [r3, #24]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	1cfb      	adds	r3, r7, #3
 8005ffe:	2201      	movs	r2, #1
 8006000:	4619      	mov	r1, r3
 8006002:	f7ff fdf1 	bl	8005be8 <SEGGER_RTT_ReadNoLock>
 8006006:	e005      	b.n	8006014 <_HandleIncomingPacket+0xc8>
 8006008:	bf00      	nop
 800600a:	e004      	b.n	8006016 <_HandleIncomingPacket+0xca>
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <_HandleIncomingPacket+0xca>
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	2001a65c 	.word	0x2001a65c

08006024 <_TrySendOverflowPacket>:
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	; 0x30
 8006028:	af00      	add	r7, sp, #0
 800602a:	2301      	movs	r3, #1
 800602c:	713b      	strb	r3, [r7, #4]
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	3301      	adds	r3, #1
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006038:	4b31      	ldr	r3, [pc, #196]	; (8006100 <_TrySendOverflowPacket+0xdc>)
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
 800603e:	e00b      	b.n	8006058 <_TrySendOverflowPacket+0x34>
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	62f9      	str	r1, [r7, #44]	; 0x2c
 800604a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	09db      	lsrs	r3, r3, #7
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	2b7f      	cmp	r3, #127	; 0x7f
 800605c:	d8f0      	bhi.n	8006040 <_TrySendOverflowPacket+0x1c>
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	4b25      	ldr	r3, [pc, #148]	; (8006104 <_TrySendOverflowPacket+0xe0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	4b22      	ldr	r3, [pc, #136]	; (8006100 <_TrySendOverflowPacket+0xdc>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	e00b      	b.n	80060a0 <_TrySendOverflowPacket+0x7c>
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	6279      	str	r1, [r7, #36]	; 0x24
 8006092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	09db      	lsrs	r3, r3, #7
 800609e:	623b      	str	r3, [r7, #32]
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2b7f      	cmp	r3, #127	; 0x7f
 80060a4:	d8f0      	bhi.n	8006088 <_TrySendOverflowPacket+0x64>
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	627a      	str	r2, [r7, #36]	; 0x24
 80060ac:	6a3a      	ldr	r2, [r7, #32]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	4b12      	ldr	r3, [pc, #72]	; (8006100 <_TrySendOverflowPacket+0xdc>)
 80060b8:	785b      	ldrb	r3, [r3, #1]
 80060ba:	4618      	mov	r0, r3
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	f7fa f882 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060cc:	4603      	mov	r3, r0
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <_TrySendOverflowPacket+0xc6>
 80060d6:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <_TrySendOverflowPacket+0xdc>)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	60d3      	str	r3, [r2, #12]
 80060dc:	4b08      	ldr	r3, [pc, #32]	; (8006100 <_TrySendOverflowPacket+0xdc>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <_TrySendOverflowPacket+0xdc>)
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e004      	b.n	80060f4 <_TrySendOverflowPacket+0xd0>
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <_TrySendOverflowPacket+0xdc>)
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	3301      	adds	r3, #1
 80060f0:	4a03      	ldr	r2, [pc, #12]	; (8006100 <_TrySendOverflowPacket+0xdc>)
 80060f2:	6153      	str	r3, [r2, #20]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4618      	mov	r0, r3
 80060f8:	3730      	adds	r7, #48	; 0x30
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	2001a65c 	.word	0x2001a65c
 8006104:	e0001004 	.word	0xe0001004

08006108 <_SendPacket>:
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	4b6c      	ldr	r3, [pc, #432]	; (80062c8 <_SendPacket+0x1c0>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d010      	beq.n	800613e <_SendPacket+0x36>
 800611c:	4b6a      	ldr	r3, [pc, #424]	; (80062c8 <_SendPacket+0x1c0>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 80a3 	beq.w	800626c <_SendPacket+0x164>
 8006126:	4b68      	ldr	r3, [pc, #416]	; (80062c8 <_SendPacket+0x1c0>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d109      	bne.n	8006142 <_SendPacket+0x3a>
 800612e:	f7ff ff79 	bl	8006024 <_TrySendOverflowPacket>
 8006132:	4b65      	ldr	r3, [pc, #404]	; (80062c8 <_SendPacket+0x1c0>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	f040 809a 	bne.w	8006270 <_SendPacket+0x168>
 800613c:	e001      	b.n	8006142 <_SendPacket+0x3a>
 800613e:	bf00      	nop
 8006140:	e000      	b.n	8006144 <_SendPacket+0x3c>
 8006142:	bf00      	nop
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b1f      	cmp	r3, #31
 8006148:	d809      	bhi.n	800615e <_SendPacket+0x56>
 800614a:	4b5f      	ldr	r3, [pc, #380]	; (80062c8 <_SendPacket+0x1c0>)
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	f040 808b 	bne.w	8006274 <_SendPacket+0x16c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b17      	cmp	r3, #23
 8006162:	d807      	bhi.n	8006174 <_SendPacket+0x6c>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3b01      	subs	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	e03d      	b.n	80061f0 <_SendPacket+0xe8>
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b7f      	cmp	r3, #127	; 0x7f
 8006180:	d912      	bls.n	80061a8 <_SendPacket+0xa0>
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	09da      	lsrs	r2, r3, #7
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3b01      	subs	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	3a01      	subs	r2, #1
 800619a:	60fa      	str	r2, [r7, #12]
 800619c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	e006      	b.n	80061b6 <_SendPacket+0xae>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ba:	d912      	bls.n	80061e2 <_SendPacket+0xda>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	09da      	lsrs	r2, r3, #7
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	3a01      	subs	r2, #1
 80061d4:	60fa      	str	r2, [r7, #12]
 80061d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e006      	b.n	80061f0 <_SendPacket+0xe8>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	4b36      	ldr	r3, [pc, #216]	; (80062cc <_SendPacket+0x1c4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	4b34      	ldr	r3, [pc, #208]	; (80062c8 <_SendPacket+0x1c0>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	623b      	str	r3, [r7, #32]
 8006208:	e00b      	b.n	8006222 <_SendPacket+0x11a>
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	1c59      	adds	r1, r3, #1
 8006212:	6279      	str	r1, [r7, #36]	; 0x24
 8006214:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	09db      	lsrs	r3, r3, #7
 8006220:	623b      	str	r3, [r7, #32]
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	2b7f      	cmp	r3, #127	; 0x7f
 8006226:	d8f0      	bhi.n	800620a <_SendPacket+0x102>
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	627a      	str	r2, [r7, #36]	; 0x24
 800622e:	6a3a      	ldr	r2, [r7, #32]
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	60bb      	str	r3, [r7, #8]
 8006238:	4b23      	ldr	r3, [pc, #140]	; (80062c8 <_SendPacket+0x1c0>)
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	4618      	mov	r0, r3
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	461a      	mov	r2, r3
 8006246:	68f9      	ldr	r1, [r7, #12]
 8006248:	f7f9 ffc2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800624c:	4603      	mov	r3, r0
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <_SendPacket+0x156>
 8006256:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <_SendPacket+0x1c0>)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	60d3      	str	r3, [r2, #12]
 800625c:	e00b      	b.n	8006276 <_SendPacket+0x16e>
 800625e:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <_SendPacket+0x1c0>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	b2da      	uxtb	r2, r3
 8006266:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <_SendPacket+0x1c0>)
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e004      	b.n	8006276 <_SendPacket+0x16e>
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <_SendPacket+0x16e>
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <_SendPacket+0x16e>
 8006274:	bf00      	nop
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <_SendPacket+0x1c0>)
 8006278:	7e1b      	ldrb	r3, [r3, #24]
 800627a:	4619      	mov	r1, r3
 800627c:	4a14      	ldr	r2, [pc, #80]	; (80062d0 <_SendPacket+0x1c8>)
 800627e:	460b      	mov	r3, r1
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	440b      	add	r3, r1
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	336c      	adds	r3, #108	; 0x6c
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <_SendPacket+0x1c0>)
 800628e:	7e1b      	ldrb	r3, [r3, #24]
 8006290:	4618      	mov	r0, r3
 8006292:	490f      	ldr	r1, [pc, #60]	; (80062d0 <_SendPacket+0x1c8>)
 8006294:	4603      	mov	r3, r0
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4403      	add	r3, r0
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	440b      	add	r3, r1
 800629e:	3370      	adds	r3, #112	; 0x70
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d00b      	beq.n	80062be <_SendPacket+0x1b6>
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <_SendPacket+0x1c0>)
 80062a8:	789b      	ldrb	r3, [r3, #2]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d107      	bne.n	80062be <_SendPacket+0x1b6>
 80062ae:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <_SendPacket+0x1c0>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	709a      	strb	r2, [r3, #2]
 80062b4:	f7ff fe4a 	bl	8005f4c <_HandleIncomingPacket>
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <_SendPacket+0x1c0>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	709a      	strb	r2, [r3, #2]
 80062be:	bf00      	nop
 80062c0:	3728      	adds	r7, #40	; 0x28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2001a65c 	.word	0x2001a65c
 80062cc:	e0001004 	.word	0xe0001004
 80062d0:	2001a880 	.word	0x2001a880

080062d4 <SEGGER_SYSVIEW_Init>:
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	2300      	movs	r3, #0
 80062e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062e8:	4917      	ldr	r1, [pc, #92]	; (8006348 <SEGGER_SYSVIEW_Init+0x74>)
 80062ea:	4818      	ldr	r0, [pc, #96]	; (800634c <SEGGER_SYSVIEW_Init+0x78>)
 80062ec:	f7ff fd02 	bl	8005cf4 <SEGGER_RTT_AllocUpBuffer>
 80062f0:	4603      	mov	r3, r0
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	4b16      	ldr	r3, [pc, #88]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 80062f6:	705a      	strb	r2, [r3, #1]
 80062f8:	4b15      	ldr	r3, [pc, #84]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 80062fa:	785a      	ldrb	r2, [r3, #1]
 80062fc:	4b14      	ldr	r3, [pc, #80]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 80062fe:	761a      	strb	r2, [r3, #24]
 8006300:	4b13      	ldr	r3, [pc, #76]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 8006302:	7e1b      	ldrb	r3, [r3, #24]
 8006304:	4618      	mov	r0, r3
 8006306:	2300      	movs	r3, #0
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2308      	movs	r3, #8
 800630c:	4a11      	ldr	r2, [pc, #68]	; (8006354 <SEGGER_SYSVIEW_Init+0x80>)
 800630e:	490f      	ldr	r1, [pc, #60]	; (800634c <SEGGER_SYSVIEW_Init+0x78>)
 8006310:	f7ff fd74 	bl	8005dfc <SEGGER_RTT_ConfigDownBuffer>
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 8006316:	2200      	movs	r2, #0
 8006318:	611a      	str	r2, [r3, #16]
 800631a:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <SEGGER_SYSVIEW_Init+0x84>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 8006320:	60d3      	str	r3, [r2, #12]
 8006322:	4a0b      	ldr	r2, [pc, #44]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6213      	str	r3, [r2, #32]
 8006328:	4a09      	ldr	r2, [pc, #36]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6053      	str	r3, [r2, #4]
 800632e:	4a08      	ldr	r2, [pc, #32]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6093      	str	r3, [r2, #8]
 8006334:	4a06      	ldr	r2, [pc, #24]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6253      	str	r3, [r2, #36]	; 0x24
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <SEGGER_SYSVIEW_Init+0x7c>)
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20019654 	.word	0x20019654
 800634c:	0800749c 	.word	0x0800749c
 8006350:	2001a65c 	.word	0x2001a65c
 8006354:	2001a654 	.word	0x2001a654
 8006358:	e0001004 	.word	0xe0001004

0800635c <SEGGER_SYSVIEW_SetRAMBase>:
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	4a04      	ldr	r2, [pc, #16]	; (8006378 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6113      	str	r3, [r2, #16]
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	2001a65c 	.word	0x2001a65c

0800637c <SEGGER_SYSVIEW_RecordVoid>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	f3ef 8311 	mrs	r3, BASEPRI
 8006388:	f04f 0120 	mov.w	r1, #32
 800638c:	f381 8811 	msr	BASEPRI, r1
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	4808      	ldr	r0, [pc, #32]	; (80063b4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006394:	f7ff fdce 	bl	8005f34 <_PreparePacket>
 8006398:	60b8      	str	r0, [r7, #8]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	68b8      	ldr	r0, [r7, #8]
 80063a0:	f7ff feb2 	bl	8006108 <_SendPacket>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	2001a68c 	.word	0x2001a68c

080063b8 <SEGGER_SYSVIEW_RecordU32>:
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
 80063c2:	f3ef 8311 	mrs	r3, BASEPRI
 80063c6:	f04f 0120 	mov.w	r1, #32
 80063ca:	f381 8811 	msr	BASEPRI, r1
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	4816      	ldr	r0, [pc, #88]	; (800642c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80063d2:	f7ff fdaf 	bl	8005f34 <_PreparePacket>
 80063d6:	6138      	str	r0, [r7, #16]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e00b      	b.n	80063fe <SEGGER_SYSVIEW_RecordU32+0x46>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	61f9      	str	r1, [r7, #28]
 80063f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	09db      	lsrs	r3, r3, #7
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b7f      	cmp	r3, #127	; 0x7f
 8006402:	d8f0      	bhi.n	80063e6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	61fa      	str	r2, [r7, #28]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	6938      	ldr	r0, [r7, #16]
 800641a:	f7ff fe75 	bl	8006108 <_SendPacket>
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	bf00      	nop
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	2001a68c 	.word	0x2001a68c

08006430 <SEGGER_SYSVIEW_RecordU32x2>:
 8006430:	b580      	push	{r7, lr}
 8006432:	b08c      	sub	sp, #48	; 0x30
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	f3ef 8311 	mrs	r3, BASEPRI
 8006440:	f04f 0120 	mov.w	r1, #32
 8006444:	f381 8811 	msr	BASEPRI, r1
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	4825      	ldr	r0, [pc, #148]	; (80064e0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800644c:	f7ff fd72 	bl	8005f34 <_PreparePacket>
 8006450:	61b8      	str	r0, [r7, #24]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
 800645e:	e00b      	b.n	8006478 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	b2da      	uxtb	r2, r3
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	62f9      	str	r1, [r7, #44]	; 0x2c
 800646a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	09db      	lsrs	r3, r3, #7
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	2b7f      	cmp	r3, #127	; 0x7f
 800647c:	d8f0      	bhi.n	8006460 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	623b      	str	r3, [r7, #32]
 8006496:	e00b      	b.n	80064b0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	b2da      	uxtb	r2, r3
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	1c59      	adds	r1, r3, #1
 80064a0:	6279      	str	r1, [r7, #36]	; 0x24
 80064a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	09db      	lsrs	r3, r3, #7
 80064ae:	623b      	str	r3, [r7, #32]
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	2b7f      	cmp	r3, #127	; 0x7f
 80064b4:	d8f0      	bhi.n	8006498 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	627a      	str	r2, [r7, #36]	; 0x24
 80064bc:	6a3a      	ldr	r2, [r7, #32]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	6979      	ldr	r1, [r7, #20]
 80064ca:	69b8      	ldr	r0, [r7, #24]
 80064cc:	f7ff fe1c 	bl	8006108 <_SendPacket>
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	bf00      	nop
 80064d8:	3730      	adds	r7, #48	; 0x30
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2001a68c 	.word	0x2001a68c

080064e4 <SEGGER_SYSVIEW_RecordU32x3>:
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08e      	sub	sp, #56	; 0x38
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	f3ef 8311 	mrs	r3, BASEPRI
 80064f6:	f04f 0120 	mov.w	r1, #32
 80064fa:	f381 8811 	msr	BASEPRI, r1
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	4832      	ldr	r0, [pc, #200]	; (80065cc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006502:	f7ff fd17 	bl	8005f34 <_PreparePacket>
 8006506:	61b8      	str	r0, [r7, #24]
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
 8006514:	e00b      	b.n	800652e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	b2da      	uxtb	r2, r3
 800651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651c:	1c59      	adds	r1, r3, #1
 800651e:	6379      	str	r1, [r7, #52]	; 0x34
 8006520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	09db      	lsrs	r3, r3, #7
 800652c:	633b      	str	r3, [r7, #48]	; 0x30
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	2b7f      	cmp	r3, #127	; 0x7f
 8006532:	d8f0      	bhi.n	8006516 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	637a      	str	r2, [r7, #52]	; 0x34
 800653a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
 800654c:	e00b      	b.n	8006566 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	b2da      	uxtb	r2, r3
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	1c59      	adds	r1, r3, #1
 8006556:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	09db      	lsrs	r3, r3, #7
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	2b7f      	cmp	r3, #127	; 0x7f
 800656a:	d8f0      	bhi.n	800654e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	e00b      	b.n	800659e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	1c59      	adds	r1, r3, #1
 800658e:	6279      	str	r1, [r7, #36]	; 0x24
 8006590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	09db      	lsrs	r3, r3, #7
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	2b7f      	cmp	r3, #127	; 0x7f
 80065a2:	d8f0      	bhi.n	8006586 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	627a      	str	r2, [r7, #36]	; 0x24
 80065aa:	6a3a      	ldr	r2, [r7, #32]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	6979      	ldr	r1, [r7, #20]
 80065b8:	69b8      	ldr	r0, [r7, #24]
 80065ba:	f7ff fda5 	bl	8006108 <_SendPacket>
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	bf00      	nop
 80065c6:	3738      	adds	r7, #56	; 0x38
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	2001a68c 	.word	0x2001a68c

080065d0 <SEGGER_SYSVIEW_RecordU32x4>:
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b090      	sub	sp, #64	; 0x40
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	f3ef 8311 	mrs	r3, BASEPRI
 80065e2:	f04f 0120 	mov.w	r1, #32
 80065e6:	f381 8811 	msr	BASEPRI, r1
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	4840      	ldr	r0, [pc, #256]	; (80066f0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80065ee:	f7ff fca1 	bl	8005f34 <_PreparePacket>
 80065f2:	61b8      	str	r0, [r7, #24]
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006600:	e00b      	b.n	800661a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	b2da      	uxtb	r2, r3
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	1c59      	adds	r1, r3, #1
 800660a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800660c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	09db      	lsrs	r3, r3, #7
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b7f      	cmp	r3, #127	; 0x7f
 800661e:	d8f0      	bhi.n	8006602 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	637b      	str	r3, [r7, #52]	; 0x34
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
 8006638:	e00b      	b.n	8006652 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	b2da      	uxtb	r2, r3
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	1c59      	adds	r1, r3, #1
 8006642:	6379      	str	r1, [r7, #52]	; 0x34
 8006644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	09db      	lsrs	r3, r3, #7
 8006650:	633b      	str	r3, [r7, #48]	; 0x30
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	2b7f      	cmp	r3, #127	; 0x7f
 8006656:	d8f0      	bhi.n	800663a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	637a      	str	r2, [r7, #52]	; 0x34
 800665e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006670:	e00b      	b.n	800668a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	b2da      	uxtb	r2, r3
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	1c59      	adds	r1, r3, #1
 800667a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800667c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	09db      	lsrs	r3, r3, #7
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	2b7f      	cmp	r3, #127	; 0x7f
 800668e:	d8f0      	bhi.n	8006672 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
 80066a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a6:	623b      	str	r3, [r7, #32]
 80066a8:	e00b      	b.n	80066c2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	1c59      	adds	r1, r3, #1
 80066b2:	6279      	str	r1, [r7, #36]	; 0x24
 80066b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	09db      	lsrs	r3, r3, #7
 80066c0:	623b      	str	r3, [r7, #32]
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	2b7f      	cmp	r3, #127	; 0x7f
 80066c6:	d8f0      	bhi.n	80066aa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	627a      	str	r2, [r7, #36]	; 0x24
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	6979      	ldr	r1, [r7, #20]
 80066dc:	69b8      	ldr	r0, [r7, #24]
 80066de:	f7ff fd13 	bl	8006108 <_SendPacket>
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	bf00      	nop
 80066ea:	3740      	adds	r7, #64	; 0x40
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	2001a68c 	.word	0x2001a68c

080066f4 <SEGGER_SYSVIEW_Start>:
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08c      	sub	sp, #48	; 0x30
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4b58      	ldr	r3, [pc, #352]	; (800685c <SEGGER_SYSVIEW_Start+0x168>)
 80066fc:	2201      	movs	r2, #1
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	f3ef 8311 	mrs	r3, BASEPRI
 8006704:	f04f 0120 	mov.w	r1, #32
 8006708:	f381 8811 	msr	BASEPRI, r1
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	4b53      	ldr	r3, [pc, #332]	; (800685c <SEGGER_SYSVIEW_Start+0x168>)
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	220a      	movs	r2, #10
 8006714:	4952      	ldr	r1, [pc, #328]	; (8006860 <SEGGER_SYSVIEW_Start+0x16c>)
 8006716:	4618      	mov	r0, r3
 8006718:	f7f9 fd5a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	200a      	movs	r0, #10
 8006724:	f7ff fe2a 	bl	800637c <SEGGER_SYSVIEW_RecordVoid>
 8006728:	f3ef 8311 	mrs	r3, BASEPRI
 800672c:	f04f 0120 	mov.w	r1, #32
 8006730:	f381 8811 	msr	BASEPRI, r1
 8006734:	60bb      	str	r3, [r7, #8]
 8006736:	484b      	ldr	r0, [pc, #300]	; (8006864 <SEGGER_SYSVIEW_Start+0x170>)
 8006738:	f7ff fbfc 	bl	8005f34 <_PreparePacket>
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006746:	4b45      	ldr	r3, [pc, #276]	; (800685c <SEGGER_SYSVIEW_Start+0x168>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
 800674c:	e00b      	b.n	8006766 <SEGGER_SYSVIEW_Start+0x72>
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	b2da      	uxtb	r2, r3
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	1c59      	adds	r1, r3, #1
 8006756:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	09db      	lsrs	r3, r3, #7
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2b7f      	cmp	r3, #127	; 0x7f
 800676a:	d8f0      	bhi.n	800674e <SEGGER_SYSVIEW_Start+0x5a>
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
 8006780:	4b36      	ldr	r3, [pc, #216]	; (800685c <SEGGER_SYSVIEW_Start+0x168>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	623b      	str	r3, [r7, #32]
 8006786:	e00b      	b.n	80067a0 <SEGGER_SYSVIEW_Start+0xac>
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	1c59      	adds	r1, r3, #1
 8006790:	6279      	str	r1, [r7, #36]	; 0x24
 8006792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	09db      	lsrs	r3, r3, #7
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	2b7f      	cmp	r3, #127	; 0x7f
 80067a4:	d8f0      	bhi.n	8006788 <SEGGER_SYSVIEW_Start+0x94>
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	627a      	str	r2, [r7, #36]	; 0x24
 80067ac:	6a3a      	ldr	r2, [r7, #32]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	4b28      	ldr	r3, [pc, #160]	; (800685c <SEGGER_SYSVIEW_Start+0x168>)
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	e00b      	b.n	80067da <SEGGER_SYSVIEW_Start+0xe6>
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	1c59      	adds	r1, r3, #1
 80067ca:	61f9      	str	r1, [r7, #28]
 80067cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	09db      	lsrs	r3, r3, #7
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b7f      	cmp	r3, #127	; 0x7f
 80067de:	d8f0      	bhi.n	80067c2 <SEGGER_SYSVIEW_Start+0xce>
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	61fa      	str	r2, [r7, #28]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	e00b      	b.n	8006812 <SEGGER_SYSVIEW_Start+0x11e>
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	1c59      	adds	r1, r3, #1
 8006802:	6179      	str	r1, [r7, #20]
 8006804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	09db      	lsrs	r3, r3, #7
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b7f      	cmp	r3, #127	; 0x7f
 8006816:	d8f0      	bhi.n	80067fa <SEGGER_SYSVIEW_Start+0x106>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	617a      	str	r2, [r7, #20]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	2218      	movs	r2, #24
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff fc6b 	bl	8006108 <_SendPacket>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	4b08      	ldr	r3, [pc, #32]	; (800685c <SEGGER_SYSVIEW_Start+0x168>)
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <SEGGER_SYSVIEW_Start+0x152>
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <SEGGER_SYSVIEW_Start+0x168>)
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	4798      	blx	r3
 8006846:	f000 f9eb 	bl	8006c20 <SEGGER_SYSVIEW_RecordSystime>
 800684a:	f000 f9b1 	bl	8006bb0 <SEGGER_SYSVIEW_SendTaskList>
 800684e:	f000 fc81 	bl	8007154 <SEGGER_SYSVIEW_SendNumModules>
 8006852:	bf00      	nop
 8006854:	3730      	adds	r7, #48	; 0x30
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	2001a65c 	.word	0x2001a65c
 8006860:	080074c4 	.word	0x080074c4
 8006864:	2001a68c 	.word	0x2001a68c

08006868 <SEGGER_SYSVIEW_Stop>:
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	f3ef 8311 	mrs	r3, BASEPRI
 8006872:	f04f 0120 	mov.w	r1, #32
 8006876:	f381 8811 	msr	BASEPRI, r1
 800687a:	607b      	str	r3, [r7, #4]
 800687c:	480b      	ldr	r0, [pc, #44]	; (80068ac <SEGGER_SYSVIEW_Stop+0x44>)
 800687e:	f7ff fb59 	bl	8005f34 <_PreparePacket>
 8006882:	6038      	str	r0, [r7, #0]
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <SEGGER_SYSVIEW_Stop+0x34>
 800688c:	220b      	movs	r2, #11
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6838      	ldr	r0, [r7, #0]
 8006892:	f7ff fc39 	bl	8006108 <_SendPacket>
 8006896:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	2001a68c 	.word	0x2001a68c
 80068b0:	2001a65c 	.word	0x2001a65c

080068b4 <SEGGER_SYSVIEW_GetSysDesc>:
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	; 0x30
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	f3ef 8311 	mrs	r3, BASEPRI
 80068be:	f04f 0120 	mov.w	r1, #32
 80068c2:	f381 8811 	msr	BASEPRI, r1
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	4845      	ldr	r0, [pc, #276]	; (80069e0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80068ca:	f7ff fb33 	bl	8005f34 <_PreparePacket>
 80068ce:	60b8      	str	r0, [r7, #8]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d8:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068de:	e00b      	b.n	80068f8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	09db      	lsrs	r3, r3, #7
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b7f      	cmp	r3, #127	; 0x7f
 80068fc:	d8f0      	bhi.n	80068e0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	607b      	str	r3, [r7, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
 8006912:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	623b      	str	r3, [r7, #32]
 8006918:	e00b      	b.n	8006932 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	b2da      	uxtb	r2, r3
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	6279      	str	r1, [r7, #36]	; 0x24
 8006924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	09db      	lsrs	r3, r3, #7
 8006930:	623b      	str	r3, [r7, #32]
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	2b7f      	cmp	r3, #127	; 0x7f
 8006936:	d8f0      	bhi.n	800691a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	627a      	str	r2, [r7, #36]	; 0x24
 800693e:	6a3a      	ldr	r2, [r7, #32]
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	4b25      	ldr	r3, [pc, #148]	; (80069e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e00b      	b.n	800696c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	1c59      	adds	r1, r3, #1
 800695c:	61f9      	str	r1, [r7, #28]
 800695e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	09db      	lsrs	r3, r3, #7
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2b7f      	cmp	r3, #127	; 0x7f
 8006970:	d8f0      	bhi.n	8006954 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	61fa      	str	r2, [r7, #28]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	2300      	movs	r3, #0
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	e00b      	b.n	80069a4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	b2da      	uxtb	r2, r3
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	1c59      	adds	r1, r3, #1
 8006994:	6179      	str	r1, [r7, #20]
 8006996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	09db      	lsrs	r3, r3, #7
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b7f      	cmp	r3, #127	; 0x7f
 80069a8:	d8f0      	bhi.n	800698c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	617a      	str	r2, [r7, #20]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	2218      	movs	r2, #24
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	68b8      	ldr	r0, [r7, #8]
 80069c0:	f7ff fba2 	bl	8006108 <_SendPacket>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
 80069d2:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	4798      	blx	r3
 80069d8:	bf00      	nop
 80069da:	3730      	adds	r7, #48	; 0x30
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	2001a68c 	.word	0x2001a68c
 80069e4:	2001a65c 	.word	0x2001a65c

080069e8 <SEGGER_SYSVIEW_SendTaskInfo>:
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b092      	sub	sp, #72	; 0x48
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	f3ef 8311 	mrs	r3, BASEPRI
 80069f4:	f04f 0120 	mov.w	r1, #32
 80069f8:	f381 8811 	msr	BASEPRI, r1
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	486a      	ldr	r0, [pc, #424]	; (8006ba8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006a00:	f7ff fa98 	bl	8005f34 <_PreparePacket>
 8006a04:	6138      	str	r0, [r7, #16]
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b66      	ldr	r3, [pc, #408]	; (8006bac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	643b      	str	r3, [r7, #64]	; 0x40
 8006a1a:	e00b      	b.n	8006a34 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a22:	1c59      	adds	r1, r3, #1
 8006a24:	6479      	str	r1, [r7, #68]	; 0x44
 8006a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a30:	09db      	lsrs	r3, r3, #7
 8006a32:	643b      	str	r3, [r7, #64]	; 0x40
 8006a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a36:	2b7f      	cmp	r3, #127	; 0x7f
 8006a38:	d8f0      	bhi.n	8006a1c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a54:	e00b      	b.n	8006a6e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5c:	1c59      	adds	r1, r3, #1
 8006a5e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	09db      	lsrs	r3, r3, #7
 8006a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	2b7f      	cmp	r3, #127	; 0x7f
 8006a72:	d8f0      	bhi.n	8006a56 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff fa01 	bl	8005e94 <_EncodeStr>
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	2209      	movs	r2, #9
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	6938      	ldr	r0, [r7, #16]
 8006a9a:	f7ff fb35 	bl	8006108 <_SendPacket>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	4b40      	ldr	r3, [pc, #256]	; (8006bac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab2:	e00b      	b.n	8006acc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	6379      	str	r1, [r7, #52]	; 0x34
 8006abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	09db      	lsrs	r3, r3, #7
 8006aca:	633b      	str	r3, [r7, #48]	; 0x30
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad0:	d8f0      	bhi.n	8006ab4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	637a      	str	r2, [r7, #52]	; 0x34
 8006ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aec:	e00b      	b.n	8006b06 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	1c59      	adds	r1, r3, #1
 8006af6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	09db      	lsrs	r3, r3, #7
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2b7f      	cmp	r3, #127	; 0x7f
 8006b0a:	d8f0      	bhi.n	8006aee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	623b      	str	r3, [r7, #32]
 8006b26:	e00b      	b.n	8006b40 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	6279      	str	r1, [r7, #36]	; 0x24
 8006b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	09db      	lsrs	r3, r3, #7
 8006b3e:	623b      	str	r3, [r7, #32]
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	2b7f      	cmp	r3, #127	; 0x7f
 8006b44:	d8f0      	bhi.n	8006b28 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	e00b      	b.n	8006b78 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	1c59      	adds	r1, r3, #1
 8006b68:	61f9      	str	r1, [r7, #28]
 8006b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	09db      	lsrs	r3, r3, #7
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7c:	d8f0      	bhi.n	8006b60 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	61fa      	str	r2, [r7, #28]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	2215      	movs	r2, #21
 8006b90:	68f9      	ldr	r1, [r7, #12]
 8006b92:	6938      	ldr	r0, [r7, #16]
 8006b94:	f7ff fab8 	bl	8006108 <_SendPacket>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	bf00      	nop
 8006ba0:	3748      	adds	r7, #72	; 0x48
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	2001a68c 	.word	0x2001a68c
 8006bac:	2001a65c 	.word	0x2001a65c

08006bb0 <SEGGER_SYSVIEW_SendTaskList>:
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006bc6:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4798      	blx	r3
 8006bce:	bf00      	nop
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	2001a65c 	.word	0x2001a65c

08006bd8 <SEGGER_SYSVIEW_SendSysDesc>:
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	f3ef 8311 	mrs	r3, BASEPRI
 8006be4:	f04f 0120 	mov.w	r1, #32
 8006be8:	f381 8811 	msr	BASEPRI, r1
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	480b      	ldr	r0, [pc, #44]	; (8006c1c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006bf0:	f7ff f9a0 	bl	8005f34 <_PreparePacket>
 8006bf4:	6138      	str	r0, [r7, #16]
 8006bf6:	2280      	movs	r2, #128	; 0x80
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f7ff f94a 	bl	8005e94 <_EncodeStr>
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	220e      	movs	r2, #14
 8006c04:	68f9      	ldr	r1, [r7, #12]
 8006c06:	6938      	ldr	r0, [r7, #16]
 8006c08:	f7ff fa7e 	bl	8006108 <_SendPacket>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	bf00      	nop
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	2001a68c 	.word	0x2001a68c

08006c20 <SEGGER_SYSVIEW_RecordSystime>:
 8006c20:	b590      	push	{r4, r7, lr}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d019      	beq.n	8006c62 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006c2e:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d014      	beq.n	8006c62 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006c38:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4798      	blx	r3
 8006c40:	e9c7 0100 	strd	r0, r1, [r7]
 8006c44:	6838      	ldr	r0, [r7, #0]
 8006c46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	f04f 0400 	mov.w	r4, #0
 8006c52:	0013      	movs	r3, r2
 8006c54:	2400      	movs	r4, #0
 8006c56:	461a      	mov	r2, r3
 8006c58:	4601      	mov	r1, r0
 8006c5a:	200d      	movs	r0, #13
 8006c5c:	f7ff fbe8 	bl	8006430 <SEGGER_SYSVIEW_RecordU32x2>
 8006c60:	e005      	b.n	8006c6e <SEGGER_SYSVIEW_RecordSystime+0x4e>
 8006c62:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	200c      	movs	r0, #12
 8006c6a:	f7ff fba5 	bl	80063b8 <SEGGER_SYSVIEW_RecordU32>
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
 8006c76:	bf00      	nop
 8006c78:	2001a65c 	.word	0x2001a65c
 8006c7c:	e0001004 	.word	0xe0001004

08006c80 <SEGGER_SYSVIEW_RecordEnterISR>:
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	f3ef 8311 	mrs	r3, BASEPRI
 8006c8a:	f04f 0120 	mov.w	r1, #32
 8006c8e:	f381 8811 	msr	BASEPRI, r1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	4819      	ldr	r0, [pc, #100]	; (8006cfc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c96:	f7ff f94d 	bl	8005f34 <_PreparePacket>
 8006c9a:	60b8      	str	r0, [r7, #8]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e00b      	b.n	8006ccc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	1c59      	adds	r1, r3, #1
 8006cbc:	6179      	str	r1, [r7, #20]
 8006cbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	09db      	lsrs	r3, r3, #7
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd0:	d8f0      	bhi.n	8006cb4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	617a      	str	r2, [r7, #20]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	68b8      	ldr	r0, [r7, #8]
 8006ce8:	f7ff fa0e 	bl	8006108 <_SendPacket>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	bf00      	nop
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	2001a68c 	.word	0x2001a68c
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <SEGGER_SYSVIEW_RecordExitISR>:
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d0e:	f04f 0120 	mov.w	r1, #32
 8006d12:	f381 8811 	msr	BASEPRI, r1
 8006d16:	607b      	str	r3, [r7, #4]
 8006d18:	4807      	ldr	r0, [pc, #28]	; (8006d38 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006d1a:	f7ff f90b 	bl	8005f34 <_PreparePacket>
 8006d1e:	6038      	str	r0, [r7, #0]
 8006d20:	2203      	movs	r2, #3
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6838      	ldr	r0, [r7, #0]
 8006d26:	f7ff f9ef 	bl	8006108 <_SendPacket>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	2001a68c 	.word	0x2001a68c

08006d3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	f3ef 8311 	mrs	r3, BASEPRI
 8006d46:	f04f 0120 	mov.w	r1, #32
 8006d4a:	f381 8811 	msr	BASEPRI, r1
 8006d4e:	607b      	str	r3, [r7, #4]
 8006d50:	4807      	ldr	r0, [pc, #28]	; (8006d70 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d52:	f7ff f8ef 	bl	8005f34 <_PreparePacket>
 8006d56:	6038      	str	r0, [r7, #0]
 8006d58:	2212      	movs	r2, #18
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6838      	ldr	r0, [r7, #0]
 8006d5e:	f7ff f9d3 	bl	8006108 <_SendPacket>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	2001a68c 	.word	0x2001a68c

08006d74 <SEGGER_SYSVIEW_OnIdle>:
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7e:	f04f 0120 	mov.w	r1, #32
 8006d82:	f381 8811 	msr	BASEPRI, r1
 8006d86:	607b      	str	r3, [r7, #4]
 8006d88:	4807      	ldr	r0, [pc, #28]	; (8006da8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d8a:	f7ff f8d3 	bl	8005f34 <_PreparePacket>
 8006d8e:	6038      	str	r0, [r7, #0]
 8006d90:	2211      	movs	r2, #17
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6838      	ldr	r0, [r7, #0]
 8006d96:	f7ff f9b7 	bl	8006108 <_SendPacket>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	2001a68c 	.word	0x2001a68c

08006dac <SEGGER_SYSVIEW_OnTaskCreate>:
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	f3ef 8311 	mrs	r3, BASEPRI
 8006db8:	f04f 0120 	mov.w	r1, #32
 8006dbc:	f381 8811 	msr	BASEPRI, r1
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	4819      	ldr	r0, [pc, #100]	; (8006e28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006dc4:	f7ff f8b6 	bl	8005f34 <_PreparePacket>
 8006dc8:	6138      	str	r0, [r7, #16]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	4b17      	ldr	r3, [pc, #92]	; (8006e2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e00b      	b.n	8006dfa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	1c59      	adds	r1, r3, #1
 8006dea:	61f9      	str	r1, [r7, #28]
 8006dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	09db      	lsrs	r3, r3, #7
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dfe:	d8f0      	bhi.n	8006de2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	61fa      	str	r2, [r7, #28]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	2208      	movs	r2, #8
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	6938      	ldr	r0, [r7, #16]
 8006e16:	f7ff f977 	bl	8006108 <_SendPacket>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	bf00      	nop
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	2001a68c 	.word	0x2001a68c
 8006e2c:	2001a65c 	.word	0x2001a65c

08006e30 <SEGGER_SYSVIEW_OnTaskStartExec>:
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	f3ef 8311 	mrs	r3, BASEPRI
 8006e3c:	f04f 0120 	mov.w	r1, #32
 8006e40:	f381 8811 	msr	BASEPRI, r1
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	4819      	ldr	r0, [pc, #100]	; (8006eac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e48:	f7ff f874 	bl	8005f34 <_PreparePacket>
 8006e4c:	6138      	str	r0, [r7, #16]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	e00b      	b.n	8006e7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	1c59      	adds	r1, r3, #1
 8006e6e:	61f9      	str	r1, [r7, #28]
 8006e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	09db      	lsrs	r3, r3, #7
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b7f      	cmp	r3, #127	; 0x7f
 8006e82:	d8f0      	bhi.n	8006e66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	61fa      	str	r2, [r7, #28]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	2204      	movs	r2, #4
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	6938      	ldr	r0, [r7, #16]
 8006e9a:	f7ff f935 	bl	8006108 <_SendPacket>
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	bf00      	nop
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	2001a68c 	.word	0x2001a68c
 8006eb0:	2001a65c 	.word	0x2001a65c

08006eb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b088      	sub	sp, #32
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec0:	f04f 0120 	mov.w	r1, #32
 8006ec4:	f381 8811 	msr	BASEPRI, r1
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	4819      	ldr	r0, [pc, #100]	; (8006f30 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ecc:	f7ff f832 	bl	8005f34 <_PreparePacket>
 8006ed0:	6138      	str	r0, [r7, #16]
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	4b17      	ldr	r3, [pc, #92]	; (8006f34 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	607b      	str	r3, [r7, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	61bb      	str	r3, [r7, #24]
 8006ee8:	e00b      	b.n	8006f02 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	1c59      	adds	r1, r3, #1
 8006ef2:	61f9      	str	r1, [r7, #28]
 8006ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	09db      	lsrs	r3, r3, #7
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b7f      	cmp	r3, #127	; 0x7f
 8006f06:	d8f0      	bhi.n	8006eea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	61fa      	str	r2, [r7, #28]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	2206      	movs	r2, #6
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	6938      	ldr	r0, [r7, #16]
 8006f1e:	f7ff f8f3 	bl	8006108 <_SendPacket>
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	bf00      	nop
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	2001a68c 	.word	0x2001a68c
 8006f34:	2001a65c 	.word	0x2001a65c

08006f38 <SEGGER_SYSVIEW_OnTaskStopReady>:
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	; 0x28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
 8006f42:	f3ef 8311 	mrs	r3, BASEPRI
 8006f46:	f04f 0120 	mov.w	r1, #32
 8006f4a:	f381 8811 	msr	BASEPRI, r1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	4827      	ldr	r0, [pc, #156]	; (8006ff0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f52:	f7fe ffef 	bl	8005f34 <_PreparePacket>
 8006f56:	6138      	str	r0, [r7, #16]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	607b      	str	r3, [r7, #4]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	e00b      	b.n	8006f88 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	1c59      	adds	r1, r3, #1
 8006f78:	6279      	str	r1, [r7, #36]	; 0x24
 8006f7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	09db      	lsrs	r3, r3, #7
 8006f86:	623b      	str	r3, [r7, #32]
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f8c:	d8f0      	bhi.n	8006f70 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	627a      	str	r2, [r7, #36]	; 0x24
 8006f94:	6a3a      	ldr	r2, [r7, #32]
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	e00b      	b.n	8006fc0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	1c59      	adds	r1, r3, #1
 8006fb0:	61f9      	str	r1, [r7, #28]
 8006fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	09db      	lsrs	r3, r3, #7
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fc4:	d8f0      	bhi.n	8006fa8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	61fa      	str	r2, [r7, #28]
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	2207      	movs	r2, #7
 8006fd8:	68f9      	ldr	r1, [r7, #12]
 8006fda:	6938      	ldr	r0, [r7, #16]
 8006fdc:	f7ff f894 	bl	8006108 <_SendPacket>
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	bf00      	nop
 8006fe8:	3728      	adds	r7, #40	; 0x28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2001a68c 	.word	0x2001a68c
 8006ff4:	2001a65c 	.word	0x2001a65c

08006ff8 <SEGGER_SYSVIEW_ShrinkId>:
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	4b04      	ldr	r3, [pc, #16]	; (8007014 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	2001a65c 	.word	0x2001a65c

08007018 <SEGGER_SYSVIEW_SendModule>:
 8007018:	b580      	push	{r7, lr}
 800701a:	b08c      	sub	sp, #48	; 0x30
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
 8007022:	4b3b      	ldr	r3, [pc, #236]	; (8007110 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d06d      	beq.n	8007106 <SEGGER_SYSVIEW_SendModule+0xee>
 800702a:	4b39      	ldr	r3, [pc, #228]	; (8007110 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007030:	2300      	movs	r3, #0
 8007032:	62bb      	str	r3, [r7, #40]	; 0x28
 8007034:	e008      	b.n	8007048 <SEGGER_SYSVIEW_SendModule+0x30>
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <SEGGER_SYSVIEW_SendModule+0x3a>
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	3301      	adds	r3, #1
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800704c:	429a      	cmp	r2, r3
 800704e:	d3f2      	bcc.n	8007036 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007050:	e000      	b.n	8007054 <SEGGER_SYSVIEW_SendModule+0x3c>
 8007052:	bf00      	nop
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d055      	beq.n	8007106 <SEGGER_SYSVIEW_SendModule+0xee>
 800705a:	f3ef 8311 	mrs	r3, BASEPRI
 800705e:	f04f 0120 	mov.w	r1, #32
 8007062:	f381 8811 	msr	BASEPRI, r1
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	482a      	ldr	r0, [pc, #168]	; (8007114 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800706a:	f7fe ff63 	bl	8005f34 <_PreparePacket>
 800706e:	6138      	str	r0, [r7, #16]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	623b      	str	r3, [r7, #32]
 800707c:	e00b      	b.n	8007096 <SEGGER_SYSVIEW_SendModule+0x7e>
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	1c59      	adds	r1, r3, #1
 8007086:	6279      	str	r1, [r7, #36]	; 0x24
 8007088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	09db      	lsrs	r3, r3, #7
 8007094:	623b      	str	r3, [r7, #32]
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	2b7f      	cmp	r3, #127	; 0x7f
 800709a:	d8f0      	bhi.n	800707e <SEGGER_SYSVIEW_SendModule+0x66>
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	627a      	str	r2, [r7, #36]	; 0x24
 80070a2:	6a3a      	ldr	r2, [r7, #32]
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e00b      	b.n	80070d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	61f9      	str	r1, [r7, #28]
 80070c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	09db      	lsrs	r3, r3, #7
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b7f      	cmp	r3, #127	; 0x7f
 80070d4:	d8f0      	bhi.n	80070b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	61fa      	str	r2, [r7, #28]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2280      	movs	r2, #128	; 0x80
 80070ec:	4619      	mov	r1, r3
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7fe fed0 	bl	8005e94 <_EncodeStr>
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	2216      	movs	r2, #22
 80070f8:	68f9      	ldr	r1, [r7, #12]
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f7ff f804 	bl	8006108 <_SendPacket>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	bf00      	nop
 8007108:	3730      	adds	r7, #48	; 0x30
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	2001a684 	.word	0x2001a684
 8007114:	2001a68c 	.word	0x2001a68c

08007118 <SEGGER_SYSVIEW_SendModuleDescription>:
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00f      	beq.n	8007146 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
 8007126:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	607b      	str	r3, [r7, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4798      	blx	r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	607b      	str	r3, [r7, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f2      	bne.n	800712c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	2001a684 	.word	0x2001a684

08007154 <SEGGER_SYSVIEW_SendNumModules>:
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	f3ef 8311 	mrs	r3, BASEPRI
 800715e:	f04f 0120 	mov.w	r1, #32
 8007162:	f381 8811 	msr	BASEPRI, r1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	4817      	ldr	r0, [pc, #92]	; (80071c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800716a:	f7fe fee3 	bl	8005f34 <_PreparePacket>
 800716e:	60b8      	str	r0, [r7, #8]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	607b      	str	r3, [r7, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	4b14      	ldr	r3, [pc, #80]	; (80071cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	e00b      	b.n	8007198 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	b2da      	uxtb	r2, r3
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	1c59      	adds	r1, r3, #1
 8007188:	6179      	str	r1, [r7, #20]
 800718a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	09db      	lsrs	r3, r3, #7
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b7f      	cmp	r3, #127	; 0x7f
 800719c:	d8f0      	bhi.n	8007180 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	617a      	str	r2, [r7, #20]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	221b      	movs	r2, #27
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	68b8      	ldr	r0, [r7, #8]
 80071b4:	f7fe ffa8 	bl	8006108 <_SendPacket>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	bf00      	nop
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	2001a68c 	.word	0x2001a68c
 80071cc:	2001a688 	.word	0x2001a688

080071d0 <SEGGER_SYSVIEW_Warn>:
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	f3ef 8311 	mrs	r3, BASEPRI
 80071dc:	f04f 0120 	mov.w	r1, #32
 80071e0:	f381 8811 	msr	BASEPRI, r1
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	4827      	ldr	r0, [pc, #156]	; (8007284 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071e8:	f7fe fea4 	bl	8005f34 <_PreparePacket>
 80071ec:	6138      	str	r0, [r7, #16]
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	6938      	ldr	r0, [r7, #16]
 80071f4:	f7fe fe4e 	bl	8005e94 <_EncodeStr>
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
 80071fe:	2301      	movs	r3, #1
 8007200:	623b      	str	r3, [r7, #32]
 8007202:	e00b      	b.n	800721c <SEGGER_SYSVIEW_Warn+0x4c>
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	1c59      	adds	r1, r3, #1
 800720c:	6279      	str	r1, [r7, #36]	; 0x24
 800720e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	09db      	lsrs	r3, r3, #7
 800721a:	623b      	str	r3, [r7, #32]
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	2b7f      	cmp	r3, #127	; 0x7f
 8007220:	d8f0      	bhi.n	8007204 <SEGGER_SYSVIEW_Warn+0x34>
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	627a      	str	r2, [r7, #36]	; 0x24
 8007228:	6a3a      	ldr	r2, [r7, #32]
 800722a:	b2d2      	uxtb	r2, r2
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	2300      	movs	r3, #0
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e00b      	b.n	8007254 <SEGGER_SYSVIEW_Warn+0x84>
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	b2da      	uxtb	r2, r3
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	1c59      	adds	r1, r3, #1
 8007244:	61f9      	str	r1, [r7, #28]
 8007246:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	09db      	lsrs	r3, r3, #7
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2b7f      	cmp	r3, #127	; 0x7f
 8007258:	d8f0      	bhi.n	800723c <SEGGER_SYSVIEW_Warn+0x6c>
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	61fa      	str	r2, [r7, #28]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	221a      	movs	r2, #26
 800726c:	68f9      	ldr	r1, [r7, #12]
 800726e:	6938      	ldr	r0, [r7, #16]
 8007270:	f7fe ff4a 	bl	8006108 <_SendPacket>
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	bf00      	nop
 800727c:	3728      	adds	r7, #40	; 0x28
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	2001a68c 	.word	0x2001a68c

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4e0d      	ldr	r6, [pc, #52]	; (80072c0 <__libc_init_array+0x38>)
 800728c:	4c0d      	ldr	r4, [pc, #52]	; (80072c4 <__libc_init_array+0x3c>)
 800728e:	1ba4      	subs	r4, r4, r6
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	2500      	movs	r5, #0
 8007294:	42a5      	cmp	r5, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	4e0b      	ldr	r6, [pc, #44]	; (80072c8 <__libc_init_array+0x40>)
 800729a:	4c0c      	ldr	r4, [pc, #48]	; (80072cc <__libc_init_array+0x44>)
 800729c:	f000 f83a 	bl	8007314 <_init>
 80072a0:	1ba4      	subs	r4, r4, r6
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	2500      	movs	r5, #0
 80072a6:	42a5      	cmp	r5, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072b0:	4798      	blx	r3
 80072b2:	3501      	adds	r5, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072ba:	4798      	blx	r3
 80072bc:	3501      	adds	r5, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	080074d8 	.word	0x080074d8
 80072c4:	080074d8 	.word	0x080074d8
 80072c8:	080074d8 	.word	0x080074d8
 80072cc:	080074dc 	.word	0x080074dc

080072d0 <memcmp>:
 80072d0:	b530      	push	{r4, r5, lr}
 80072d2:	2400      	movs	r4, #0
 80072d4:	42a2      	cmp	r2, r4
 80072d6:	d101      	bne.n	80072dc <memcmp+0xc>
 80072d8:	2000      	movs	r0, #0
 80072da:	e007      	b.n	80072ec <memcmp+0x1c>
 80072dc:	5d03      	ldrb	r3, [r0, r4]
 80072de:	3401      	adds	r4, #1
 80072e0:	190d      	adds	r5, r1, r4
 80072e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80072e6:	42ab      	cmp	r3, r5
 80072e8:	d0f4      	beq.n	80072d4 <memcmp+0x4>
 80072ea:	1b58      	subs	r0, r3, r5
 80072ec:	bd30      	pop	{r4, r5, pc}

080072ee <memcpy>:
 80072ee:	b510      	push	{r4, lr}
 80072f0:	1e43      	subs	r3, r0, #1
 80072f2:	440a      	add	r2, r1
 80072f4:	4291      	cmp	r1, r2
 80072f6:	d100      	bne.n	80072fa <memcpy+0xc>
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007302:	e7f7      	b.n	80072f4 <memcpy+0x6>

08007304 <memset>:
 8007304:	4402      	add	r2, r0
 8007306:	4603      	mov	r3, r0
 8007308:	4293      	cmp	r3, r2
 800730a:	d100      	bne.n	800730e <memset+0xa>
 800730c:	4770      	bx	lr
 800730e:	f803 1b01 	strb.w	r1, [r3], #1
 8007312:	e7f9      	b.n	8007308 <memset+0x4>

08007314 <_init>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	bf00      	nop
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr

08007320 <_fini>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	bf00      	nop
 8007324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007326:	bc08      	pop	{r3}
 8007328:	469e      	mov	lr, r3
 800732a:	4770      	bx	lr
